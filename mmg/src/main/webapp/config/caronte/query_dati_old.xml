<?xml version = "1.0"?>
<QUERIES>
    <QUERY_GROUP id="DATI">
        <QUERY id="CONTROLLO_PRENOTAZIONE_PAZIENTE">
            <SQL>
                select to_char(to_date(ed.data_esame,'YYYYMMDD'),'DD/MM/YYYY') data_esame,ed.ora_esame,n.descrizione,a.cognome || ' ' || a.nome PAZIENTE
                from esami_testata et inner join esami_dettaglio ed on (et.iden=ed.iden_testata and ed.stato=10 and ed.deleted='N' and et.deleted='N' and ed.data_esame>to_char(sysdate,'YYYYMMDD')) inner join nomenclatore n on (ed.iden_nomenclatore=n.iden) inner join anagrafica a on (et.iden_anagrafica=a.iden)
                where et.iden_anagrafica=:iden_anagrafica   order by data_esame desc
            </SQL>
        </QUERY>
        <QUERY id="PIANIFICAZIONI_AGENDA">
            <SQL>
                select descrizione, data_inizio, data_fine, ora_inizio, ora_fine, giorni_attivi, impostazione, tipo from agenda_pianificazione where iden_agenda = :iden_agenda
            </SQL>
        </QUERY>
        <QUERY id="COMBO_PACS_TOCALL">
            <SQL>
                select * from PACS_AETITLE where deleted = 'N' and iden not in
                (select IDEN_PACS_TOCALL
                from pacs_scan_aetitle
                where iden_pacs_sorgente = :iden_sorgente and iden_pacs_destinatario = :iden_destinatario)
            </SQL>
        </QUERY>

        <QUERY id="INFO_ANAGRAFICA">
            <SQL>
                select nome, cognome, ID_PAZ_DICOM  from anagrafica where iden = :iden
            </SQL>
        </QUERY>

        <QUERY id="NOTE_SALVATE_PRENOTAZIONE">
            <SQL>
                select /*+first_rows(10)*/ DESCRIZIONE, PARAMETRI AS CLASSE FROM TIPI
                WHERE TIPO = 'NOTA_AGENDA' ORDER BY DESCRIZIONE ASC
            </SQL>
        </QUERY>
        <QUERY id="Q_PACS_SCAN">
            <SQL>
                select /*+first_rows(10)*/  IDEN_PACS_SORGENTE , IDEN_PACS_DESTINATARIO, IDEN_PACS_TOCALL,ORDINE FROM PACS_SCAN_AETITLE
                WHERE ATTIVO = 'S'
            </SQL>
        </QUERY>
		<QUERY id="Q_REF_TRACCIANTI_PAZ">
            <SQL><![CDATA[with PM as (select to_number(regexp_substr(x, '[^,]+', 1, level)) ID
                  from(select :iden_dettagli x from dual) connect by level <= length(x) - length(replace(x, ',')) + 1)
                select /*+first_rows(1)*/
                pe.peso,
                pe.glicemia,
                pe.iden_stimolo,
                pe.iden_somministrazione,
                pe.iden_tecnica,
                cs.descrizione stimolo,
                cv.descrizione somministrazione,
                (select wm_concat(ct.descrizione) from med_nuc$configurazioni CT where ct.iden in (select column_value from table(split(pe.iden_tecnica)))) tecnica
                from MED_NUC$PREP_ESA_DETT PD
                inner join MED_NUC$PREP_ESA PE on (PE.IDEN = PD.IDEN_TESTATA)
                inner join esami_dettaglio ed on (ED.IDEN = PE.IDEN_ESAME)
                inner join med_nuc$configurazioni CS on (CS.iden = pe.iden_stimolo)
                inner join med_nuc$configurazioni CV on (CV.iden = pe.iden_somministrazione)
                inner join PM on (ED.IDEN = PM.ID)
                where rownum <= 1]]></SQL>
            <BINDS>
                <BIND id="iden_dettagli" value="#IDEN_DETTAGLIO#" type="V"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="Q_REF_TRACCIANTI">
            <SQL><![CDATA[with PM as (select to_number(regexp_substr(x, '[^,]+', 1, level)) ID
                  from(select :iden_dettagli x from dual) connect by level <= length(x) - length(replace(x, ',')) + 1)
                select /*+first_rows(1)*/
                ED.iden iden_esame,
                n.descrizione esame,
                PD.iden_tracciante,
                t.DESCRIZIONE tracciante,
                PD.attivita
                from MED_NUC$PREP_ESA_DETT PD
                inner join MED_NUC$PREP_ESA PE on (PE.IDEN = PD.IDEN_TESTATA)
                inner join esami_dettaglio ed on (ED.IDEN = PE.IDEN_ESAME)
                inner join nomenclatore n on (n.iden = ed.IDEN_NOMENCLATORE)
                inner join med_nuc$traccianti t on (t.iden = pd.iden_Tracciante)
                inner join PM on (ED.IDEN = PM.ID)]]></SQL>
            <BINDS>
                <BIND id="iden_dettagli" value="#IDEN_DETTAGLIO#" type="V"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="INFORMAZIONI_ESAME_CONSOLE">
            <SQL>
                SELECT tx.QUADRO_CLINICO,
                tx.quesito_clinico,
                tx.note,
                nomenclatore.descrizione DESCRIZIONE_ESAME,
                extractvalue(dx.stato_cronologia, '/E/I/S/@D') DATA_ORA_INSERIMENTO,
                personale.descrizione UTENTE_INSERIMENTO,
                (SELECT descrizione
                FROM stato_esame
                WHERE codice=extractvalue(dx.stato_cronologia, '/E/I/S/@V')
                ) STATO_INSERIMENTO
                FROM ESAMI_TESTATA_EXTRA_INFO ETEI,
                XMLTable('/ROWSET/ROW' passing ETEI.INFO                         columns IDEN NUMBER path '/ROW/IDEN/text()', NOTE VARCHAR2(4000) path '/ROW/NOTE/text()', QUADRO_CLINICO VARCHAR2(4000) path '/ROW/QUADRO_CLINICO/text()', QUESITO_CLINICO VARCHAR2(4000) path '/ROW/QUESITO_CLINICO/text()' ) TX,
                XMLTable('/ROWSET/ROW/DETTAGLIO/DETTAGLIO_ROW' passing ETEI.INFO columns IDEN NUMBER path '/DETTAGLIO_ROW/IDEN/text()', IDEN_NOMENCLATORE NUMBER path '/DETTAGLIO_ROW/IDEN_NOMENCLATORE/text()', STATO_CRONOLOGIA xmltype path '/DETTAGLIO_ROW/STATO_CRONOLOGIA/node()' ) DX
                INNER JOIN nomenclatore
                ON (dx.iden_nomenclatore=nomenclatore.iden)
                INNER JOIN personale
                ON (personale.iden            =extractvalue(dx.stato_cronologia, '/E/I/S/@U'))
                WHERE ETEI.IDEN_ESAME_TESTATA = :idTestata
                AND CATEGORIA                 = 'STATO_INSERIMENTO'
            </SQL>
        </QUERY>
        <QUERY id="Q_AREE_JSON">
            <SQL><![CDATA[with PD as (select to_number(regexp_substr(x, '[^,]+', 1, level)) ID from(select :iden_aree x from dual) connect by level <= length(x) - length(replace(x, ',')) + 1),
                PM as (select regexp_substr(x, '[^,]+', 1, level) DATA from(select :giorni x from dual) connect by level <= length(x) - length(replace(x, ',')) + 1)
                select /*+first_rows(1)*/
				Sale.Descrizione sala,
                sale.iden iden_sala,
                aree.iden iden_area,
                aree.descrizione area,
                ag.descrizione agenda,
                cdca.iden_cdc,
                ac.iden_agenda,
                cursor(select ar.note, ar.data from agenda_registro ar inner join PM on (AR.DATA = PM.DATA) where ar.iden_agenda_configurata = ac.iden and ar.note is not null) note_giorno,
                extractvalue(sale.extra, '/COL/NOTE') note_sala,
                cursor(select ap.descrizione,ap.tipo,ap.ora_inizio,ap.ora_fine,get_giorni_attivi(:giorni, ap.data_inizio, ap.data_fine, ap.giorni_attivi) giorni_attivi,ap.impostazione,ap.css from agenda_pianificazione ap where ap.iden_agenda = ac.iden_agenda and ap.attivo = 'S') JSON_SALA
                from sala_area sale inner join sala_area aree on(sale.iden = aree.iden_padre)
                inner join agenda_configurata ac on (ac.iden_erogante = aree.iden)
                inner join agenda ag on (ag.iden = ac.iden_agenda)
                inner join PD on (AREE.IDEN = PD.ID)
                inner join centri_di_costo_associati cdca on (cdca.tabella_nome = 'SALA_AREA' and cdca.tabella_iden = sale.iden)
                where sale.attivo = 'S' and aree.attivo = 'S' and cdca.attivo = 'S']]>
            </SQL>
        </QUERY>
        <QUERY id="Q_SCHEDA_ESECUZIONE">
            <SQL><![CDATA[select sr.* from esami_testata et
                        inner join esami_dettaglio ed on (et.iden=ed.iden_testata and ed.deleted='N')
                        inner join config$schede_refertazione sr on (ed.iden_nomenclatore=sr.iden_nomenclatore and et.iden_cdc=sr.iden_cdc and sr.apertura_esecuzione='S')
                        where iden_testata=:iden_testata]]></SQL>
            <BINDS>
                <BIND id="iden_testata" value="#IDEN_TESTATA#" type="V"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="Q_DATI_REGISTRO">
            <SQL><![CDATA[select /*+first_rows(1)*/ IDEN_REGISTRO,IDEN_REGISTRO_DETTAGLIO,IDEN_FASCIA_ORARIA,ORA_FINE,IDEN_EROGANTE
                from table( gestione_consulta_prenota.get_giorno_orario( :iden_area, 'SALA_AREA', :giorno ))
                where ora_inizio = :ora_inizio]]></SQL>
        </QUERY>
        <QUERY id="Q_INFO_DSG">
            <SQL><![CDATA[select /*+first_rows(1)*/ et.iden_anagrafica, ed.iden_testata from esami_dettaglio ed
                inner join esami_testata et on (ed.iden_testata = et.iden)
                where ed.iden = :iden_dettaglio]]></SQL>
        </QUERY>
        <QUERY id="Q_YOTTALOOK">
            <SQL>select GET_YOTTAURL(:iden_testata) URL from dual</SQL>
            <BINDS>
                <BIND id="iden_testata" value="#IDEN_TESTATA#" type="N"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="SCELTA_ESAMI">
            <SQL>select N.*,TIPI.PARAMETRI METODICA_DESCR from table(GESTIONE_RIS_ESAMI.GET_LISTA_NOMENCLATORE(:request,:sito,:versione)) N
                 inner join TIPI on(TIPI.CODICE_DECODIFICA = N.METODICA and TIPI.TIPO = 'METODICA')
            </SQL>
        </QUERY>
        <QUERY id="Q_SCHEDA_ESAME_NOMENCLATORI">
            <SQL>select GESTIONE_RIS_ESAMI.GET_SCHEDA_ESAME_DETAIL(:iden_testata) JSON from dual</SQL>
            <BINDS>
                <BIND id="iden_testata" value="#IDEN_TESTATA#" type="V"></BIND>
            </BINDS>
        </QUERY>

        <QUERY id="EROGATORE_ESAMI">
            <SQL>select * from table(GET_EROGATORE_ESAMI(:iden_nomenclatori,:iden_cdc,:iden_personale,:iden_testata ))</SQL>
        </QUERY>
        <QUERY id='ESAMI_DA_ESEGUIRE'>
            <SQL>select nom.descrizione,s_a.descrizione sala
                from ESAMI_TESTATA ET
                inner JOIN ESAMI_DETTAGLIO ED on(ED.IDEN_TESTATA = ET.IDEN)
                inner JOIN NOMENCLATORE NOM on (NOM.IDEN = ED.IDEN_NOMENCLATORE)
                inner JOIN SALA_AREA S_A on(ED.IDEN_SALA = S_A.IDEN and S_A.TIPO='SALA')
                where ET.IDEN_ANAGRAFICA = :iden_anagrafica and ED.STATO  = 30 and ED.data_esame = :data
            </SQL>
        </QUERY>
        <QUERY id='PRENOTAZIONI_PAZIENTE'>
            <SQL>select nom.descrizione,s_a.descrizione sala,ed.data_prenotazione,ed.ora_prenotazione
                from ESAMI_TESTATA ET
                inner JOIN ESAMI_DETTAGLIO ED on(ED.IDEN_TESTATA = ET.IDEN)
                inner JOIN NOMENCLATORE NOM on (NOM.IDEN = ED.IDEN_NOMENCLATORE)
                inner JOIN SALA_AREA S_A on(ED.IDEN_SALA = S_A.IDEN and S_A.TIPO='SALA')
                where ET.IDEN_ANAGRAFICA = :iden_anagrafica and ED.STATO  =10 and ED.data_prenotazione &gt;= :da_data
            </SQL>
        </QUERY>
        <QUERY id="ESAMI_PAZIENTE">
            <SQL>select /*+first_rows(10)*/ ET.IDEN VALUE,ED.IDEN IDEN_DETTAGLIO,ET.IDEN_ANAGRAFICA,ED.IDEN_NOMENCLATORE,NOM.DESCRIZIONE DESCR,ET.IDEN_CDC,CDC.DESCRIZIONE CDC,ET.STATO,ED.DATA_ESAME,ED.ORA_ESAME from ESAMI_TESTATA ET inner join ESAMI_DETTAGLIO ED on (ED.IDEN_TESTATA = ET.IDEN and ET.DELETED = 'N' and ED.DELETED = 'N') inner join ANAGRAFICA ANAG on (ANAG.IDEN = ET.IDEN_ANAGRAFICA and ANAG.DELETED = 'N') inner join NOMENCLATORE NOM on (NOM.IDEN = ED.IDEN_NOMENCLATORE) inner join CENTRI_DI_COSTO CDC on (CDC.IDEN = ET.IDEN_CDC) where iden_anagrafica = :iden_anagrafica</SQL>
        </QUERY>
        <QUERY id="ESAMI_PAZIENTE_RICONCILIAZIONE">
            <SQL>select et.iden value,get_data_from_testata(et.iden) data_esame,get_descr_esami(et.iden) descr,et.iden_anagrafica from esami_testata et where iden_anagrafica= :iden_anagrafica</SQL>
        </QUERY>
        <QUERY id="COMUNI">
            <SQL>select * from COMUNI where IDEN = :iden</SQL>
        </QUERY>
        <QUERY id="PACS_AETITLE">
            <SQL>select * from PACS_AETITLE where IDEN = :iden</SQL>
        </QUERY>
        <QUERY id="COMUNI_ALL">
            <SQL>select * from COMUNI</SQL>
        </QUERY>
        <QUERY id="STAMPA_REFERTO">
            <SQL>select R.IDEN,R.IDEN_CDC,RV.URL_REFERTO,RV.URL_REFERTO_ESTERNO,r.FIRMATO,r.tipo_firma,rv.progressivo,rv.URL_REFERTO from referti r left outer join REFERTI_VERSIONE rv on (r.IDEN=rv.IDEN_REFERTO and rv.ATTIVO='S') WHERE r.IDEN=:iden_referto  order by rv.IDEN desc</SQL>
        </QUERY>
        <QUERY id="MOTIVAZIONE_APPROPRIATEZZA">
            <SQL>select /*+first_rows(10)*/ IDEN VALUE,DESCRIZIONE DESCR from TIPI where TIPO ='MOTIVAZIONE_APPROPRIATEZZA'</SQL>
        </QUERY>
        <QUERY id="MOTIVAZIONE_CANCELLAZIONE_ESAME">
            <SQL>select /*+first_rows(10)*/ IDEN VALUE,DESCRIZIONE DESCR from TIPI where TIPO ='MOTIVAZIONE_CANCELLAZIONE_ESAME'</SQL>
        </QUERY>
        <QUERY id="MOTIVAZIONE_ESAME_NON_EROGATO">
            <SQL>select /*+first_rows(10)*/ IDEN VALUE,DESCRIZIONE DESCR from TIPI where TIPO ='MOTIVAZIONE_ESAME_NON_EROGATO'</SQL>
        </QUERY>
        <QUERY id="MOTIVAZIONE_ANNULLAMENTO_RICHIESTA">
            <SQL>select /*+first_rows(10)*/ IDEN VALUE,DESCRIZIONE DESCR from TIPI where TIPO ='MOTIVAZIONE_ANNULLAMENTO_RICHIESTA'</SQL>
        </QUERY>
        <QUERY id="GRUPPO_ASSOCIAZIONE">
            <SQL>SELECT /*+first_rows(100) */ N.DESCRIZIONE, GA.TABELLA_IDEN_NOMENCLATORE IDEN FROM GRUPPO_ASSOCIAZIONE GA INNER JOIN NOMENCLATORE N ON GA.TABELLA_IDEN_NOMENCLATORE = N.IDEN WHERE GA.TABELLA_IDEN_EROGANTE = :iden_erogante AND TABELLA_NOME_EROGANTE = 'SALA_AREA' AND TABELLA_NOME_NOMENCLATORE = 'NOMENCLATORE'</SQL>
        </QUERY>
        <QUERY id="PANNELLO_PRIMARIO_STRUTTURA">
            <SQL>SELECT /*+first_rows(100) */ * FROM ALL_TAB_COLUMNS WHERE TABLE_NAME = 'VIEW_PANNELLO_PRIMARIO'</SQL>
        </QUERY>
        <QUERY id="PANNELLO_PRIMARIO_DATI">
            <SQL>SELECT * FROM VIEW_PANNELLO_PRIMARIO WHERE ROWNUM = 1</SQL>
        </QUERY>
        <QUERY id="AGENDA_CONFIGURATA">
            <SQL>SELECT /*+first_rows(10)*/ AC.IDEN, AC.IDEN_AGENDA, AC.IDEN_EROGANTE, A.DESCRIZIONE FROM AGENDA_CONFIGURATA AC INNER JOIN AGENDA A ON AC.IDEN_AGENDA = A.IDEN WHERE AC.IDEN_EROGANTE = :iden_erogante AND AC.ATTIVO = 'S' AND A.ATTIVO = 'S'</SQL>
        </QUERY>
        <QUERY id="NOTE">
            <SQL>SELECT IDEN, VALORE, IDEN_PERSONALE FROM NOTE WHERE IDEN_PERSONALE = :iden_personale AND ATTIVO = 'S'</SQL>
        </QUERY>
        <QUERY id="IMPORTA_REFERTO_STANDARD">
            <SQL>SELECT RST.TESTO
                FROM REFERTI_STANDARD RST
                LEFT OUTER JOIN NOMENCLATORE NM ON NM.IDEN = RST.IDEN_NOMENCLATORE
                where rst.attivo = 'S' and testo is not null
                AND (:iden_nomenclatore IS NULL OR (NM.IDEN IN (SELECT TO_NUMBER(COLUMN_VALUE) FROM TABLE(SPLIT(:iden_nomenclatore))))) and rownum = 1</SQL>
        </QUERY>
        <QUERY id="GET_DATI_ESAME_PER_CONSOLE">
            <SQL>select /*+first_rows(1)*/
                et.iden_anagrafica,et.iden iden_testata,ed.iden iden_dettaglio,ed.iden_referto,et.iden_cdc,ed.iden_nomenclatore,ed.iden_sala,ed.id_dicom,anag.id_paz_dicom
                from esami_dettaglio ed
                inner join esami_testata et on (et.iden = ed.iden_testata)
                inner join anagrafica anag on (anag.iden = et.iden_anagrafica)
                where ed.id_dicom = :id_dicom</SQL>
        </QUERY>
        <QUERY id="GET_PROVENIENZA_CONTATTO">
            <SQL>
                select /*+first_rows(1)*/ P.IDEN VALUE,P.CODICE_DECODIFICA,P.DESCRIZIONE DESCR,T.DESCRIZIONE TIPO
                from adt$contatti  c
                inner JOIN adt$contatti_giuridici cg on (c.iden=cg.iden_contatto and cg.stato='1' and cg.deleted='N' and cg.attivo='S')
                INNER JOIN  PROVENIENZE p on (p.iden=cg.iden_provenienza)
                inner join TIPI T on (P.TIPO_PROVENIENZA=T.CODICE_DECODIFICA and T.TIPO='PROVENIENZA' )
                where c.iden= :numero_caso
            </SQL>
        </QUERY>
        <QUERY id="INFORMAZIONI_GESTIONE_RICHIESTE">
            <SQL>
                select * from table(get_info_gestione_richieste(:iden_testata))
            </SQL>
         </QUERY>
        <QUERY id="INFORMAZIONI_WK">
            <SQL>
                select et.quesito_clinico,et.quadro_clinico,et.note NOTE_ESAME ,p1.descrizione medico_refertante,p2.descrizione medico_inviante,anag.note NOTE_PAZIENTE
                from esami_testata et
                inner join esami_dettaglio ed on ed.iden_testata = et.iden
                inner join ANAGRAFICA anag on anag.iden = et.IDEN_ANAGRAFICA
                left join personale p1 on p1.iden = ed.iden_medico_refertante
                left join personale p2 on p2.iden = et.iden_medico_inviante
                where ed.iden =  :iden_dettaglio
            </SQL>
        </QUERY>
        <QUERY id="INFORMAZIONI_WK_CANCELLAZIONE">
            <SQL>
                select ed.deleted_motivo,t.descrizione ,
                get_descrizione_personale(extractvalue(ed.stato_cronologia, '/E/D/S/@U')) || ' - ' || extractvalue(ed.stato_cronologia, '/E/D/S/@D') canc_user_data
                from esami_dettaglio ed inner join tipi t on (ed.iden_motivazione=t.iden)
                where ed.iden= :iden_dettaglio
            </SQL>
        </QUERY>
        <QUERY id="METODICA_NOMENCLATORI">
            <SQL>select n.descrizione descrizione,n.iden iden from nomenclatore n where attivo = 'S' and metodica = :metodica </SQL>
        </QUERY>
    </QUERY_GROUP>
    <QUERY_GROUP id="FILTRI">
        <QUERY id="FILTRI">
            <SQL>select ID_FILTRO, CODICE_VARCHAR, CODICE_NUMBER from FILTRI where ATTIVO = 'S' and USERNAME = :username and SITO = :sito</SQL>
        </QUERY>
        <QUERY id="PRENOTAZIONE_SALE">
            <SQL>select /*+first_rows(10)*/  SA.IDEN value, SA.DESCRIZIONE DESCR from SALA_AREA SA inner join CENTRI_DI_COSTO_ASSOCIATI CDCA on (CDCA.TABELLA_IDEN = SA.IDEN and CDCA.TABELLA_NOME = 'SALA_AREA' ) inner join FILTRI F on F.CODICE_NUMBER = CDCA.IDEN_CDC where F.ID_FILTRO = 'FILTRO_CDC_PRENOTAZIONE' and USERNAME = :username and SA.ATTIVO = 'S' and CDCA.ATTIVO = 'S' order by SA.DESCRIZIONE</SQL>
        </QUERY>
        <QUERY id="PRENOTAZIONE_AREE">
            <SQL>select /*+first_rows(10)*/  AR.IDEN value, AR.DESCRIZIONE DESCR from SALA_AREA AR inner join FILTRI F on F.CODICE_NUMBER = AR.IDEN_PADRE where F.ID_FILTRO = 'FILTRO_SALE_PRENOTAZIONE' and USERNAME = :username and AR.ATTIVO = 'S' and AR.TIPO='AREA'  order by AR.DESCRIZIONE</SQL>
        </QUERY>
        <QUERY id="FILTRI_PERSONALI">
            <SQL>select /*+first_rows(10)*/ distinct ID_FILTRO_PERSONALE from FILTRI where GRUPPO_FILTRI = :gruppo_filtri and USERNAME = :username and SITO = :sito AND ID_FILTRO_PERSONALE is not null</SQL>
        </QUERY>
    </QUERY_GROUP>

    <QUERY_GROUP id="WORKLIST">
        <QUERY id="WK_GESTIONE_GRUPPI_PARAMETRI">
            <SQL>
                select distinct id_gruppo from parametri where gruppo = :rPcUtenti and id_gruppo like :idGruppo and ATTIVO = 'S' and SITO in ('RIS','ALL')
            </SQL>
        </QUERY>
        <QUERY id="WK_SCHEDA_FATTURAZIONE_ESAMI">
            <SQL>
                select CODICE_DECODIFICA CODICE_ESAME,METODICA TIPO,DESCRIZIONE,PREZZO LISTINO
                from nomenclatore n
                inner join esami_dettaglio ed on (ed.iden_nomenclatore=n.iden)
                where ed.iden_Testata = :iden_testata
            </SQL>
        </QUERY>
        <QUERY id="FASCE_ORARIE_AGENDA">
            <SQL>
                select distinct descrizione, ora_inizio, ora_fine, giorni_attivi, impostazione POSTI_TEMPO from agenda_pianificazione where tipo = :tipo order by ora_inizio asc
            </SQL>
        </QUERY>
        <QUERY id="PACS_SCAN_WK">
            <SQL>
                select /*+first_rows(10)*/ PA.IDEN, IDEN_PACS_SORGENTE , IDEN_PACS_DESTINATARIO, IDEN_PACS_TOCALL,ORDINE, PA_SORGENTE.DESCRIZIONE DESCR_SORGENTE, PA_DESTINATARIO.DESCRIZIONE DESCR_DESTINATARIO, PA_TOCALL.DESCRIZIONE DESCR_TOCALL FROM PACS_SCAN_AETITLE PA
                INNER JOIN PACS_AETITLE PA_SORGENTE ON (PA_SORGENTE.IDEN = PA.IDEN_PACS_SORGENTE)
                INNER JOIN PACS_AETITLE PA_DESTINATARIO ON (PA_DESTINATARIO.IDEN = PA.IDEN_PACS_DESTINATARIO)
                INNER JOIN PACS_AETITLE PA_TOCALL ON (PA_TOCALL.IDEN = PA.IDEN_PACS_TOCALL)
                WHERE PA.ATTIVO = 'S' AND PA.IDEN_PACS_SORGENTE = :idenSorgente AND PA.IDEN_PACS_DESTINATARIO = :idenDestinatario {#ORDER#}
            </SQL>
        </QUERY>
        <QUERY id="DETTAGLIO_PAZIENTE_IN_WK">
            <SQL><![CDATA[
				select /*+first_rows(100)*/ ET.IDEN IDEN_TESTATA,ED.IDEN IDEN_DETTAGLIO,ED.IDEN_REFERTO,ED.IDEN_SALA,ED.IDEN_AREA,ET.IDEN_ANAGRAFICA,ET.IDEN_PROVENIENZA,ED.IDEN_NOMENCLATORE,ED.ID_DICOM,ANAG.ID_PAZ_DICOM,ANAG.COGNOME || ' ' || ANAG.NOME || ' ' || ANAG.DATA_NASCITA PAZIENTE,NOM.DESCRIZIONE NOMENCLATORE,ET.IDEN_CDC,CDC.DESCRIZIONE CDC,ET.STATO STATO_TESTATA,SE.DESCRIZIONE STATO_DETTAGLIO,ET.URGENTE,ED.DATA_ESAME,ED.ORA_ESAME,PROV.DESCRIZIONE PROVENIENZA,ET.FLAG_CONSENSO,'' USERNAME  ,ED.STATO ESAME_DETTAGLIO_STATO,NOM.STATO_PER_REFERTAZIONE,
                ca.sotto_indagine sotto_indagine_anag,cd.sotto_indagine sotto_indagine_dett,ct.sotto_indagine sotto_indagine_test,cr.sotto_indagine sotto_indagine_ref,ct.pagato,PROV.TIPO_PROVENIENZA,narc.numero
                from ESAMI_TESTATA ET inner join ESAMI_DETTAGLIO ED on (ED.IDEN_TESTATA = ET.IDEN and ET.DELETED = 'N' and ED.DELETED = 'N')
                inner join ANAGRAFICA ANAG on (ANAG.IDEN = ET.IDEN_ANAGRAFICA and ANAG.DELETED = 'N')
                inner join PROVENIENZE PROV on (PROV.IDEN = ET.IDEN_PROVENIENZA) inner join NOMENCLATORE NOM on (NOM.IDEN = ED.IDEN_NOMENCLATORE)
                inner join centri_di_costo cdc on (cdc.iden = et.iden_cdc) inner join STATO_ESAME SE on (se.codice = ED.STATO)
                INNER JOIN anagrafica_codici_esterni ca ON (ca.iden_anagrafica = et.iden_anagrafica)
                inner join esami_dettaglio_codici_esterni cd on (cd.iden_esame = ed.iden) inner join ESAMI_TESTATA_CODICI_ESTERNI CT on (CT.IDEN_ESAME = ET.IDEN)
                LEFT OUTER JOIN referti_codici_esterni cr ON (cr.iden_referto = ed.iden_referto)
                left outer join numeri_archivio narc on (narc.iden = et.iden_numero_archivio)
                where et.iden_anagrafica = :iden_anagrafica {#ORDER#}
			]]></SQL>
        </QUERY>
        <QUERY id="WK_RIC_NOSO_DETAIL">
            <SQL>
                select /*+first_rows(100)*/ ET.IDEN IDEN_TESTATA,ED.IDEN IDEN_DETTAGLIO,ED.IDEN_REFERTO,ED.IDEN_SALA,ED.IDEN_AREA,ET.IDEN_ANAGRAFICA,ET.IDEN_PROVENIENZA,ED.IDEN_NOMENCLATORE,ED.ID_DICOM,ANAG.ID_PAZ_DICOM,ANAG.COGNOME || ' ' || ANAG.NOME || ' ' || ANAG.DATA_NASCITA PAZIENTE,NOM.DESCRIZIONE NOMENCLATORE,ET.IDEN_CDC,CDC.DESCRIZIONE CDC,ET.STATO STATO_TESTATA,SE.DESCRIZIONE STATO_DETTAGLIO,ET.URGENTE,ED.DATA_ESAME,ED.ORA_ESAME,PROV.DESCRIZIONE PROVENIENZA,ET.FLAG_CONSENSO,'' USERNAME  ,ED.STATO ESAME_DETTAGLIO_STATO,NOM.STATO_PER_REFERTAZIONE,
                ca.sotto_indagine sotto_indagine_anag,cd.sotto_indagine sotto_indagine_dett,ct.sotto_indagine sotto_indagine_test,cr.sotto_indagine sotto_indagine_ref
                from ESAMI_TESTATA ET inner join ESAMI_DETTAGLIO ED on (ED.IDEN_TESTATA = ET.IDEN and ET.DELETED = 'N' and ED.DELETED = 'N')
                inner join ANAGRAFICA ANAG on (ANAG.IDEN = ET.IDEN_ANAGRAFICA and ANAG.DELETED = 'N')
                inner join PROVENIENZE PROV on (PROV.IDEN = ET.IDEN_PROVENIENZA) inner join NOMENCLATORE NOM on (NOM.IDEN = ED.IDEN_NOMENCLATORE)
                inner join centri_di_costo cdc on (cdc.iden = et.iden_cdc) inner join STATO_ESAME SE on (se.codice = ED.STATO)
                INNER JOIN anagrafica_codici_esterni ca ON (ca.iden_anagrafica = et.iden_anagrafica) inner join esami_dettaglio_codici_esterni cd on (cd.iden_esame = ed.iden) inner join ESAMI_TESTATA_CODICI_ESTERNI CT on (CT.IDEN_ESAME = ET.IDEN) LEFT OUTER JOIN referti_codici_esterni cr ON (cr.iden_referto = ed.iden_referto)
                where et.iden_contatto = :iden_contatto{#ORDER#}
            </SQL>
        </QUERY>
        <QUERY id="DETTAGLIO_PAZIENTE_RICONCILIA">
            <SQL>
                select /*+first_rows(100)*/ ET.IDEN IDEN_TESTATA,ED.IDEN IDEN_DETTAGLIO,ED.IDEN_REFERTO,ED.IDEN_SALA,ET.IDEN_ANAGRAFICA,ET.IDEN_PROVENIENZA,ED.IDEN_NOMENCLATORE,ED.ID_DICOM,ANAG.ID_PAZ_DICOM,ANAG.COGNOME || ' ' || ANAG.NOME || ' ' || ANAG.DATA_NASCITA PAZIENTE,NOM.DESCRIZIONE NOMENCLATORE,ET.IDEN_CDC,cdc.descrizione cdc,et.stato stato_testata,se.descrizione STATO_DETTAGLIO,ET.URGENTE,ED.DATA_ESAME,ED.ORA_ESAME,PROV.DESCRIZIONE PROVENIENZA,ET.FLAG_CONSENSO,'' USERNAME  ,ED.STATO ESAME_DETTAGLIO_STATO,NOM.STATO_PER_REFERTAZIONE
                from ESAMI_TESTATA ET inner join ESAMI_DETTAGLIO ED on (ED.IDEN_TESTATA = ET.IDEN and ET.DELETED = 'N' and ED.DELETED = 'N')
                inner join ANAGRAFICA ANAG on (ANAG.IDEN = ET.IDEN_ANAGRAFICA and ANAG.DELETED = 'N')
                inner join PROVENIENZE PROV on (PROV.IDEN = ET.IDEN_PROVENIENZA)
                inner join NOMENCLATORE NOM on (NOM.IDEN = ED.IDEN_NOMENCLATORE)
                inner join centri_di_costo cdc on (cdc.iden = et.iden_cdc)
                inner join STATO_ESAME SE on (se.codice = ED.STATO)
                where et.iden_anagrafica = :iden_anagrafica {#ORDER#}
            </SQL>
        </QUERY>
        <QUERY id="DETTAGLIO_ESAMI">
            <SQL>select /*+first_rows(100)*/ ET.IDEN_ANAGRAFICA, ED.IDEN IDEN_DETTAGLIO, ED.IDEN_TESTATA, ET.IDEN_PROVENIENZA, ET.IDEN_CDC, ED.IDEN_NOMENCLATORE, NOM.DESCRIZIONE DESCR_NOMENCLATORE, PROV.DESCRIZIONE PROVENIENZA, ED.DATA_ESAME, ED.ORA_ESAME, ed.iden_referto from ESAMI_TESTATA ET inner join ESAMI_DETTAGLIO ED on (ET.IDEN = ED.IDEN_TESTATA and ET.DELETED = 'N' and ED.DELETED = 'N') inner join PROVENIENZE PROV on (PROV.IDEN = ET.IDEN_PROVENIENZA and PROV.ATTIVO = 'S') inner join NOMENCLATORE NOM on (NOM.IDEN = ED.IDEN_NOMENCLATORE and NOM.ATTIVO = 'S') where ET.IDEN = :iden_testata</SQL>
        </QUERY>
        <QUERY id="PRINCIPALE">
            <SQL>
                select /*+first_rows(100)*/
                    ET.IDEN IDEN_TESTATA, ET.IDEN_ANAGRAFICA, ET.IDEN_PROVENIENZA, ET.IDEN_CDC, ET.STATO STATO_TESTATA, ET.URGENTE, ET.FLAG_CONSENSO,
                    ED.IDEN IDEN_DETTAGLIO, ED.IDEN_REFERTO, ED.IDEN_SALA,ED.IDEN_AREA, ED.IDEN_NOMENCLATORE, ED.ID_DICOM, ED.DATA_ESAME, ED.ORA_ESAME, ED.DATA_ACCETTAZIONE, ED.ORA_ACCETTAZIONE, ED.DATA_PRENOTAZIONE, ED.ORA_PRENOTAZIONE, ED.STATO ESAME_DETTAGLIO_STATO,
                    ANAG.ID_PAZ_DICOM, ANAG.COGNOME || ' ' || ANAG.NOME || ' ' || ANAG.DATA_NASCITA PAZIENTE,
                    NOM.DESCRIZIONE NOMENCLATORE, NOM.STATO_PER_REFERTAZIONE,
                    PROV.DESCRIZIONE PROVENIENZA,
                    :username USERNAME,
                    PROV.TIPO_PROVENIENZA,
                    (select /*+first_rows(1)*/ CA.SOTTO_INDAGINE from ANAGRAFICA_CODICI_ESTERNI CA where CA.IDEN_ANAGRAFICA = ET.IDEN_ANAGRAFICA) SOTTO_INDAGINE_ANAG,
                    (select /*+first_rows(1)*/ CD.SOTTO_INDAGINE from ESAMI_DETTAGLIO_CODICI_ESTERNI CD where CD.IDEN_ESAME = ED.IDEN) SOTTO_INDAGINE_DETT,
                    (select /*+first_rows(1)*/ PD.PAZIENTE_DUPLICATO from ESAMI_DETTAGLIO_CODICI_ESTERNI PD where PD.IDEN_ESAME = ED.IDEN) PAZIENTE_DUPLICATO,
                    (select /*+first_rows(1)*/ CT.SOTTO_INDAGINE from ESAMI_TESTATA_CODICI_ESTERNI CT where CT.IDEN_ESAME = ET.IDEN) SOTTO_INDAGINE_TEST, (select /*+first_rows(1)*/ CT.PAGATO from ESAMI_TESTATA_CODICI_ESTERNI CT where CT.IDEN_ESAME = ET.IDEN) PAGATO,
                    (select /*+first_rows(1)*/ CR.SOTTO_INDAGINE from REFERTI_CODICI_ESTERNI CR where CR.IDEN_REFERTO = ED.IDEN_REFERTO) SOTTO_INDAGINE_REF,
                    (select /*+first_rows(1)*/ CDC.DESCRIZIONE from CENTRI_DI_COSTO CDC where CDC.IDEN = ET.IDEN_CDC) CDC,
                    (select /*+first_rows(1)*/ SE.DESCRIZIONE from STATO_ESAME SE where SE.CODICE = ED.STATO) STATO_DETTAGLIO,
                    (select /*+first_rows(1)*/ SA.DESCRIZIONE from SALA_AREA SA where SA.IDEN = ED.IDEN_SALA) SALA,
                    (select /*+first_rows(1)*/ MI.DESCRIZIONE from PERSONALE MI where MI.IDEN = ET.IDEN_MEDICO_INVIANTE) MEDICO_INVIANTE
                from
                    ESAMI_DETTAGLIO ED inner join NOMENCLATORE NOM on (NOM.IDEN = ED.IDEN_NOMENCLATORE)
                                       inner join ESAMI_TESTATA ET on (ET.IDEN = ED.IDEN_TESTATA)
                                       inner join ANAGRAFICA ANAG on (ANAG.IDEN = ET.IDEN_ANAGRAFICA)
                                       inner join FILTRI F_CDC on (F_CDC.CODICE_NUMBER = ET.IDEN_CDC)
                                       inner join PROVENIENZE PROV on (PROV.IDEN = ET.IDEN_PROVENIENZA)
                                       inner join FILTRI F_SALA on (F_SALA.CODICE_NUMBER = ED.IDEN_SALA)
                                       inner join FILTRI F_STATO on (F_STATO.CODICE_NUMBER = ED.STATO)
                                       inner join FILTRI F_METO on (F_METO.CODICE_VARCHAR = NOM.METODICA)
                                       inner join FILTRI F_MEDICO on (F_MEDICO.CODICE_NUMBER = ED.IDEN_MEDICO_REFERTANTE or F_MEDICO.CODICE_NUMBER = 0)
                                       inner join FILTRI F_URGENZA on (F_URGENZA.CODICE_NUMBER = ET.URGENTE or F_URGENZA.CODICE_NUMBER = -1)
                                       inner join FILTRI F_PROV on (F_PROV.CODICE_NUMBER = PROV.IDEN or F_PROV.CODICE_VARCHAR = PROV.TIPO_PROVENIENZA)
                where ED.DATA_ESAME &gt;= :da_data and ED.DATA_ESAME &lt;= :a_data and ED.DELETED = 'N' and
                      ET.DELETED = 'N' and
                      ANAG.DELETED = 'N' and
                      F_CDC.USERNAME = :username and F_CDC.ID_FILTRO = 'FILTRO_CDC_WORKLIST' and F_CDC.ATTIVO = 'S' and
                      F_SALA.USERNAME = :username and F_SALA.ID_FILTRO = 'FILTRO_SALE_WORKLIST' and F_SALA.ATTIVO = 'S' and
                      F_STATO.USERNAME = :username and F_STATO.ID_FILTRO = 'FILTRO_STATO_WORKLIST' and F_STATO.ATTIVO = 'S' and
                      F_METO.USERNAME = :username and F_METO.ID_FILTRO = 'FILTRO_METODICA_WORKLIST' and F_METO.ATTIVO = 'S' and
                      F_MEDICO.USERNAME = :username and F_MEDICO.ID_FILTRO = 'FILTRO_MEDICO_WORKLIST' and F_MEDICO.ATTIVO = 'S' and
                      F_URGENZA.USERNAME = :username and F_URGENZA.ID_FILTRO = 'FILTRO_URGENZA_WORKLIST' and F_URGENZA.ATTIVO = 'S' and
                      F_PROV.USERNAME = :username and (F_PROV.ID_FILTRO = 'FILTRO_PROV_WORKLIST' or F_PROV.ID_FILTRO = 'FILTRO_TIPO_PROV_WORKLIST') and F_PROV.ATTIVO='S'
                {#ORDER#}
            </SQL>
        </QUERY>
        <QUERY id="WK_FATTURAZIONE">
            <SQL><![CDATA[

					select /*+first_rows(100)*/ rownum NUMERO_RIGA, t.*
					from
					(SELECT /*+first_rows(100)*/ ET.IDEN IDEN_TESTATA,ED.IDEN IDEN_DETTAGLIO,ED.IDEN_REFERTO,ED.IDEN_SALA,ED.IDEN_AREA,
									(select /*+first_rows(1)*/ ca.sotto_indagine from anagrafica_codici_esterni ca where ca.iden_anagrafica = et.iden_anagrafica) sotto_indagine_anag,
									(select /*+first_rows(1)*/ cd.sotto_indagine from esami_dettaglio_codici_esterni cd where cd.iden_esame = ed.iden) sotto_indagine_dett,
									(select /*+first_rows(1)*/ ct.sotto_indagine from esami_testata_codici_esterni ct where ct.iden_esame = et.iden) sotto_indagine_test,
									(select /*+first_rows(1)*/ ct.PAGATO from esami_testata_codici_esterni ct where ct.iden_esame = et.iden) PAGATO,
									(select /*+first_rows(1)*/ cr.sotto_indagine from referti_codici_esterni cr where cr.iden_referto = ed.iden_referto) sotto_indagine_ref,
									ET.IDEN_ANAGRAFICA,ET.IDEN_PROVENIENZA,ED.IDEN_NOMENCLATORE,ED.ID_DICOM,ANAG.ID_PAZ_DICOM,ED.DATA_ACCETTAZIONE DATA_ACCETTAZIONE, ED.ORA_ACCETTAZIONE ORA_ACCETAZIONE,
									ANAG.COGNOME || ' ' || ANAG.NOME || ' ' || ANAG.DATA_NASCITA PAZIENTE,NOM.DESCRIZIONE NOMENCLATORE,
									ET.IDEN_CONTATTO,ET.IDEN_CDC,cdc.descrizione cdc,et.stato stato_testata,
									(select /*+first_rows(1)*/ se.descrizione from STATO_ESAME SE where se.codice = ED.STATO)STATO_DETTAGLIO,
									ET.URGENTE,ED.DATA_ESAME,ED.ORA_ESAME,PROV.DESCRIZIONE PROVENIENZA,
									ET.FLAG_CONSENSO,F_CDC.USERNAME  ,ED.STATO ESAME_DETTAGLIO_STATO,NOM.STATO_PER_REFERTAZIONE,VS.DESCRIZIONE SALA
									from ESAMI_TESTATA ET
									inner join ESAMI_DETTAGLIO ED on (ED.IDEN_TESTATA = ET.IDEN)
									INNER JOIN SALA_AREA VS ON (ED.IDEN_SALA = VS.IDEN)
									inner join ANAGRAFICA ANAG on (ANAG.IDEN = ET.IDEN_ANAGRAFICA)
									inner join PROVENIENZE PROV on (PROV.IDEN = ET.IDEN_PROVENIENZA)
									inner join NOMENCLATORE NOM on (NOM.IDEN = ED.IDEN_NOMENCLATORE)
									inner join centri_di_costo cdc on (cdc.iden = et.iden_cdc)
									inner join FILTRI F_CDC on (F_CDC.CODICE_NUMBER = ET.IDEN_CDC)
									WHERE ANAG.DELETED = 'N' and ET.DELETED = 'N' and ED.DELETED = 'N' and F_CDC.ID_FILTRO = 'FATTURAZIONE_CDC' and F_CDC.ATTIVO='S'
									and ed.stato > 30
									and F_CDC.USERNAME = :username and ED.DATA_ESAME >= :da_data and ED.DATA_ESAME <= :a_data) t
					  where get_stato_fatturazione(t.iden_testata) in (select to_number(regexp_substr(x, '[^,]+', 1, level)) ID
									from(select :stato x from dual) connect by level <= length(x) - length(replace(x, ',')) + 1)
				 {#ORDER#}
            ]]></SQL>
        </QUERY>
        <QUERY id="WK_RICH_ESTERNE">
            <SQL>
                select /*+first_rows(10)*/ ET.IDEN IDEN_TESTATA,ED.IDEN IDEN_DETTAGLIO,ED.IDEN_REFERTO,ED.IDEN_SALA,ED.IDEN_AREA,ET.IDEN_ANAGRAFICA,ET.IDEN_PROVENIENZA,ED.IDEN_NOMENCLATORE,ED.ID_DICOM,ANAG.ID_PAZ_DICOM,ANAG.COGNOME || ' ' || ANAG.NOME || ' ' || ANAG.DATA_NASCITA PAZIENTE,NOM.DESCRIZIONE NOMENCLATORE,ET.IDEN_CDC,CDC.DESCRIZIONE CDC,ET.STATO STATO_TESTATA,SE.DESCRIZIONE STATO_DETTAGLIO,ET.URGENTE,ED.DATA_ESAME,ED.ORA_ESAME,PROV.DESCRIZIONE PROVENIENZA,ET.FLAG_CONSENSO,'' USERNAME  ,ED.STATO ESAME_DETTAGLIO_STATO,NOM.STATO_PER_REFERTAZIONE,
                ca.sotto_indagine sotto_indagine_anag,cd.sotto_indagine sotto_indagine_dett,ct.sotto_indagine sotto_indagine_test,cr.sotto_indagine sotto_indagine_ref,cont.codice CODICE_CONTATTO
                from ESAMI_TESTATA ET inner join ESAMI_DETTAGLIO ED on (ED.IDEN_TESTATA = ET.IDEN and ET.DELETED = 'N' and ED.DELETED = 'N')
                left outer join ADT$CONTATTI CONT on (CONT.IDEN = ET.IDEN_CONTATTO)
                inner join ANAGRAFICA ANAG on (ANAG.IDEN = ET.IDEN_ANAGRAFICA and ANAG.DELETED = 'N')
                inner join PROVENIENZE PROV on (PROV.IDEN = ET.IDEN_PROVENIENZA) inner join NOMENCLATORE NOM on (NOM.IDEN = ED.IDEN_NOMENCLATORE)
                inner join centri_di_costo cdc on (cdc.iden = et.iden_cdc) inner join STATO_ESAME SE on (se.codice = ED.STATO)
                INNER JOIN anagrafica_codici_esterni ca ON (ca.iden_anagrafica = et.iden_anagrafica) inner join esami_dettaglio_codici_esterni cd on (cd.iden_esame = ed.iden) inner join ESAMI_TESTATA_CODICI_ESTERNI CT on (CT.IDEN_ESAME = ET.IDEN) LEFT OUTER JOIN referti_codici_esterni cr ON (cr.iden_referto = ed.iden_referto)
                where anag.id_paz_dicom like :id_paz_dicom and cont.codice like :codice_contatto  {#ORDER#}
            </SQL>
        </QUERY>
       <!-- <QUERY id="GESTIONE_RICHIESTE">
            <SQL>select IDEN_TESTATA,IDEN_ANAGRAFICA,IDEN_PROVENIENZA,PAZIENTE,NOME,COGNOME,DATA_NASCITA,STATO_PAZIENTE,IDEN_CDC,URGENTE,URGENZA_CLASS,URGENTE_DESCR,PROVENIENZA,STATO_TESTATA,DATA_RICHIESTA,ORA_RICHIESTA,DATA_PROPOSTA,ORA_PROPOSTA from VIEW_WK_GESTIONE_RICHIESTE where USERNAME = :username and DATA_RICHIESTA &gt;= :da_data and DATA_RICHIESTA &lt;= :a_data AND NOME like :nome AND COGNOME like :cognome AND DATA_NASCITA like :data_nascita {#ORDER#}</SQL>
        </QUERY>-->
        <QUERY id="GESTIONE_RICHIESTE">
            <SQL>
                select /*+first_rows(100)*/
                ET.IDEN IDEN_TESTATA,
                ET.IDEN_ANAGRAFICA,
                PROV.DESCRIZIONE,
                ANAG.ID_PAZ_DICOM,
                ANAG.COGNOME || ' ' || ANAG.NOME || ' ' || ANAG.DATA_NASCITA PAZIENTE,
                ANAG.COGNOME,
                ANAG.NOME,
                ANAG.DATA_NASCITA DATA_NASCITA,
                S_PAZ.DESCRIZIONE STATO_PAZIENTE,
                ET.IDEN_CDC IDEN_CDC,
                ET.STATO STATO_TESTATA,
                ET.URGENTE URGENTE,
                ET.IDEN_PROVENIENZA IDEN_PROVENIENZA,
                PROV.DESCRIZIONE PROVENIENZA,
                ET.DATA_RICHIESTA DATA_RICHIESTA,
                ET.ORA_RICHIESTA ORA_RICHIESTA,
                ET.DATA_PROPOSTA DATA_PROPOSTA,
                ET.ORA_PROPOSTA ORA_PROPOSTA,
                ET.QUESITO_CLINICO
                from ESAMI_TESTATA ET
                inner join ANAGRAFICA ANAG on (ANAG.IDEN = ET.IDEN_ANAGRAFICA and ANAG.DELETED = 'N')
                inner join STATO_PAZIENTE S_PAZ on (S_PAZ.IDEN = ET.IDEN_STATO_PAZIENTE)
                inner join PROVENIENZE PROV on (PROV.IDEN = ET.IDEN_PROVENIENZA)
                inner join TIPI TI on (ti.codice_decodifica = et.urgente and ti.tipo='URGENZA')
                inner join FILTRI F_CDC on (F_CDC.CODICE_NUMBER = ET.IDEN_CDC and F_CDC.ID_FILTRO = 'F_GRICHIESTE_CDC' AND F_CDC.ATTIVO='S')
                inner join FILTRI F_PROV on (F_PROV.CODICE_NUMBER = ET.IDEN_PROVENIENZA and F_PROV.ID_FILTRO = 'F_GRICHIESTE_PROV' AND F_PROV.ATTIVO='S' )
                inner join FILTRI F_URGENZA ON  ((F_URGENZA.codice_number = et.urgente or F_URGENZA.codice_number = -1) and F_URGENZA.id_filtro = 'F_GRICHIESTE_URGENZA' and F_URGENZA.ATTIVO='S')
                and exists(select /*+first_rows(10)*/ ED.IDEN from ESAMI_DETTAGLIO ED
                INNER JOIN NOMENCLATORE NOM on (NOM.IDEN = ED.IDEN_NOMENCLATORE)
                INNER JOIN FILTRI F_METO ON (F_METO.CODICE_VARCHAR = NOM.METODICA AND F_METO.ID_FILTRO = 'F_GRICHIESTE_METODICA' AND F_METO.ATTIVO='S')
                inner join FILTRI F_STATO on (F_STATO.CODICE_NUMBER = ED.STATO and F_STATO.ID_FILTRO = 'F_GRICHIESTE_STATO' and F_STATO.ATTIVO='S')
                where ED.IDEN_TESTATA = ET.IDEN and ED.DELETED = 'N' and F_CDC.USERNAME = F_METO.USERNAME and F_CDC.USERNAME = F_STATO.USERNAME)
                where F_CDC.USERNAME=F_PROV.USERNAME AND F_CDC.USERNAME = F_URGENZA.USERNAME AND  F_CDC.USERNAME = :username  AND  ET.DELETED = 'N' AND ET.RICHIESTA='S'
                and ANAG.COGNOME like :cognome and ANAG.NOME like :nome and ET.DATA_RICHIESTA &gt;= :da_data  and ET.DATA_RICHIESTA &lt;= :a_data {#ORDER#}
            </SQL>
        </QUERY>
        <QUERY id="ESAMI_PAZIENTE_IN_SK_ANAG">
            <SQL>
                select /*+first_rows(100)*/ ED.IDEN,ET.IDEN IDEN_TESTATA,ED.IDEN IDEN_DETTAGLIO,ED.IDEN_REFERTO,ED.IDEN_SALA,ET.IDEN_ANAGRAFICA,ET.IDEN_PROVENIENZA,ED.IDEN_NOMENCLATORE,ED.ID_DICOM,ANAG.ID_PAZ_DICOM,ANAG.COGNOME || ' ' || ANAG.NOME || ' ' || ANAG.DATA_NASCITA PAZIENTE,NOM.DESCRIZIONE NOMENCLATORE,ET.IDEN_CDC,cdc.descrizione cdc,et.stato stato_testata,se.descrizione STATO_DETTAGLIO,ET.URGENTE,ED.DATA_ESAME,ED.ORA_ESAME,PROV.DESCRIZIONE PROVENIENZA,ET.FLAG_CONSENSO,ED.STATO ESAME_DETTAGLIO_STATO,NOM.STATO_PER_REFERTAZIONE
                from ESAMI_TESTATA ET
                inner join ESAMI_DETTAGLIO ED on (ED.IDEN_TESTATA = ET.IDEN and ET.DELETED = 'N' and ED.DELETED = 'N')
                inner join ANAGRAFICA ANAG on (ANAG.IDEN = ET.IDEN_ANAGRAFICA and ANAG.DELETED = 'N')
                inner join PROVENIENZE PROV on (PROV.IDEN = ET.IDEN_PROVENIENZA)
                inner join NOMENCLATORE NOM on (NOM.IDEN = ED.IDEN_NOMENCLATORE)
                inner join centri_di_costo cdc on (cdc.iden = et.iden_cdc)
                inner join STATO_ESAME SE on (se.codice = ED.STATO)
                where ed.deleted='N' and et.iden_anagrafica = :iden_anagrafica {#ORDER#}
            </SQL>
        </QUERY>
        <QUERY id="WK_RIC_PAZ_CND">
            <SQL><![CDATA[
				select /*+first_rows(100)*/
				a.IDEN, a.IDEN IDEN_ANAGRAFICA, a.COGNOME, a.NOME, a.ID_PAZ_DICOM, a.DATA_NASCITA, a.COGNOME || ' ' || a.NOME PAZIENTE, a.CODICE_FISCALE,
				a.READONLY, a.CERTIFICATO,COM_NASC.DESCRIZIONE COMUNE_NASCITA, COM_RES.DESCRIZIONE COMUNE_RESIDENZA, COM_DOM.DESCRIZIONE COMUNE_DOMICILIO
				from ANAGRAFICA a
				left outer join COMUNI COM_NASC on (a.IDEN_COMUNE_NASCITA = COM_NASC.IDEN)
				left outer join COMUNI COM_RES on (a.IDEN_COMUNE_RESIDENZA = COM_RES.IDEN)
				left outer join COMUNI COM_DOM on (a.IDEN_COMUNE_DOMICILIO = COM_DOM.IDEN)
				where COGNOME like :cognome and NOME like :nome and DATA_NASCITA like :data_nascita and a.DELETED = 'N' {#ORDER#}
			]]></SQL>
        </QUERY>
        <QUERY id="WK_RIC_PAZ_COD_FISC">
            <SQL><![CDATA[
				select /*+first_rows(100)*/ a.IDEN, a.IDEN IDEN_ANAGRAFICA, a.COGNOME, a.NOME, a.ID_PAZ_DICOM, a.DATA_NASCITA, a.COGNOME || ' ' || a.NOME PAZIENTE,
				a.CODICE_FISCALE, a.READONLY, a.CERTIFICATO,COM_NASC.DESCRIZIONE COMUNE_NASCITA, COM_RES.DESCRIZIONE COMUNE_RESIDENZA, COM_DOM.DESCRIZIONE COMUNE_DOMICILIO
				from ANAGRAFICA a
				left outer join COMUNI COM_NASC on (a.IDEN_COMUNE_NASCITA = COM_NASC.IDEN)
				left outer join COMUNI COM_RES on (a.IDEN_COMUNE_RESIDENZA = COM_RES.IDEN)
				left outer join COMUNI COM_DOM on (a.IDEN_COMUNE_DOMICILIO = COM_DOM.IDEN)
				where a.codice_fiscale = :codice_fiscale and a.DELETED = 'N' {#ORDER#}
			]]></SQL>
        </QUERY>
        <QUERY id="WK_RIC_NOSO">
            <SQL>
                select /*+first_rows(100)*/ a.IDEN, a.IDEN IDEN_ANAGRAFICA, a.COGNOME, a.NOME, a.ID_PAZ_DICOM, a.DATA_NASCITA, a.COGNOME || ' ' || a.NOME PAZIENTE, a.CODICE_FISCALE,
                a.READONLY, a.CERTIFICATO , com.DESCRIZIONE COMUNE_NASCITA,at.codice_decodifica,
                c.codice NOSOLOGICO,c.stato,to_char (c.data_inizio,'YYYYMMDD') DATA_APERTURA ,to_char (c.data_fine,'YYYYMMDD') DATA_CHIUSURA,p.descrizione PROVENIENZA,at.descrizione   NOSOLOGICO_ATTIVO,
                c.IDEN IDEN_CONTATTO, cg.IDEN IDEN_CONTATTO_GIURIDICO
                from ANAGRAFICA a
                left outer join comuni com on (a.iden_comune_nascita=com.iden)
                inner JOIN adt$contatti c on (c.iden_anagrafica=a.iden)
                inner JOIN adt$contatti_giuridici cg on (c.iden=cg.iden_contatto)
                inner join provenienze p on (p.iden=cg.iden_provenienza)
                inner join adt$tipi at on (at.iden=cg.stato and at.tipo ='STATO' and at.ASSIGNING_AUTHORITY_AREA='ADT')
                inner join filtri f_stato on ((f_stato.codice_number = cg.stato or f_stato.codice_number = 0) and f_stato.id_filtro = 'STATO_NOSOLOGICO' and f_stato.ATTIVO='S' and f_stato.username=:username)
                where COGNOME like :cognome_noso  and NOME like :nome_noso and DATA_NASCITA like :data_nascita_noso and ID_PAZ_DICOM like :neoc_noso     and
                ID_PAZ_DICOM like :patid and c.codice  like :noso {#ORDER#}
            </SQL>
        </QUERY>
        <QUERY id="WK_RIC_ASSOCIA">
            <SQL>
                select /*+first_rows(100)*/ a.IDEN, a.IDEN IDEN_ANAGRAFICA, a.COGNOME, a.NOME, a.ID_PAZ_DICOM, a.DATA_NASCITA, a.COGNOME || ' ' || a.NOME PAZIENTE, a.CODICE_FISCALE,
                a.READONLY, a.CERTIFICATO , com.DESCRIZIONE COMUNE_NASCITA,at.codice_decodifica,
                c.codice NOSOLOGICO,c.stato,to_char (c.data_inizio,'YYYYMMDD') DATA_APERTURA ,to_char (c.data_fine,'YYYYMMDD') DATA_CHIUSURA,p.descrizione PROVENIENZA,at.descrizione   NOSOLOGICO_ATTIVO,
                c.IDEN IDEN_CONTATTO, cg.IDEN IDEN_CONTATTO_GIURIDICO
                from ANAGRAFICA a
                left outer join comuni com on (a.iden_comune_nascita=com.iden)
                inner JOIN adt$contatti c on (c.iden_anagrafica=a.iden)
                inner JOIN adt$contatti_giuridici cg on (c.iden=cg.iden_contatto)
                inner join provenienze p on (p.iden=cg.iden_provenienza)
                inner join adt$tipi at on (at.iden=cg.stato and at.tipo ='STATO' and at.ASSIGNING_AUTHORITY_AREA='ADT')
                inner join filtri f_stato on ((f_stato.codice_number = cg.stato or f_stato.codice_number = 0) and f_stato.id_filtro = 'STATO_NOSOLOGICO_ASSOCIA' and f_stato.ATTIVO='S' and f_stato.username=:username)
                where COGNOME like :cognome_noso  and NOME like :nome_noso and DATA_NASCITA like :data_nascita_noso and ID_PAZ_DICOM like :neoc_noso and
                ID_PAZ_DICOM like :patid and c.codice  like :noso {#ORDER#}
            </SQL>
        </QUERY>
        <QUERY id="WK_RIC_PAZ_PRENOTAZIONE">
            <!--select /*+first_rows(100)*/ a.IDEN, a.IDEN IDEN_ANAGRAFICA, a.COGNOME, a.NOME, a.DATA_NASCITA, a.COGNOME || ' ' || a.NOME || ' ' || a.DATA_NASCITA PAZIENTE, a.CODICE_FISCALE, a.READONLY, a.CERTIFICATO,COM_NASC.DESCRIZIONE COMUNE_NASCITA, COM_RES.DESCRIZIONE COMUNE_RESIDENZA, COM_DOM.DESCRIZIONE COMUNE_DOMICILIO
                from ANAGRAFICA a left outer join COMUNI COM_NASC on (a.IDEN_COMUNE_NASCITA = COM_NASC.IDEN) left outer join COMUNI COM_RES on (a.IDEN_COMUNE_RESIDENZA = COM_RES.IDEN) left outer join COMUNI COM_DOM on (a.IDEN_COMUNE_DOMICILIO = COM_DOM.IDEN)
                where COGNOME like :cognome and NOME like :nome and DATA_NASCITA like :data_nascita and a.DELETED = 'N' {#ORDER#} -->
            <SQL>
                select /*+first_rows(100)*/ a.IDEN, a.IDEN IDEN_ANAGRAFICA, a.COGNOME, a.NOME, a.DATA_NASCITA, a.COGNOME || ' ' || a.NOME || ' ' || a.DATA_NASCITA PAZIENTE, a.CODICE_FISCALE, a.READONLY, a.CERTIFICATO,COM_NASC.DESCRIZIONE COMUNE_NASCITA, COM_RES.DESCRIZIONE COMUNE_RESIDENZA, COM_DOM.DESCRIZIONE COMUNE_DOMICILIO, a_c.codice CONTATTO
                from ANAGRAFICA a left outer join COMUNI COM_NASC on (a.IDEN_COMUNE_NASCITA = COM_NASC.IDEN)
                left outer join COMUNI COM_RES on (a.IDEN_COMUNE_RESIDENZA = COM_RES.IDEN)
                left outer join COMUNI COM_DOM on (a.IDEN_COMUNE_DOMICILIO = COM_DOM.IDEN)
                left outer join adt$contatti A_C on (a.iden = A_C.iden_anagrafica and A_C.DELETED = 'N')
                where :codice is null and a.COGNOME like :cognome and a.NOME like :nome and a.DATA_NASCITA like :data_nascita and a.DELETED = 'N'
                union
                select /*+first_rows(100)*/ a.IDEN, a.IDEN IDEN_ANAGRAFICA, a.COGNOME, a.NOME, a.DATA_NASCITA, a.COGNOME || ' ' || a.NOME || ' ' || a.DATA_NASCITA PAZIENTE, a.CODICE_FISCALE, a.READONLY, a.CERTIFICATO,COM_NASC.DESCRIZIONE COMUNE_NASCITA, COM_RES.DESCRIZIONE COMUNE_RESIDENZA, COM_DOM.DESCRIZIONE COMUNE_DOMICILIO, a_c.codice CONTATTO
                from ANAGRAFICA a left outer join COMUNI COM_NASC on (a.IDEN_COMUNE_NASCITA = COM_NASC.IDEN)
                left outer join COMUNI COM_RES on (a.IDEN_COMUNE_RESIDENZA = COM_RES.IDEN)
                left outer join COMUNI COM_DOM on (a.IDEN_COMUNE_DOMICILIO = COM_DOM.IDEN)
                left outer join adt$contatti A_C on (a.iden = A_C.iden_anagrafica and A_C.DELETED = 'N')
                where :codice is not null and a_c.codice = :codice and A_C.DELETED = 'N' and a.DELETED = 'N'
                {#ORDER#}
            </SQL>
        </QUERY>
       <!-- <QUERY id="WK_RIC_PAZ_CONTATTO_PRENOTAZIONE">
            <SQL>
                select /*+first_rows(100)*/ a.IDEN, a.IDEN IDEN_ANAGRAFICA, a.COGNOME, a.NOME, a.DATA_NASCITA, a.COGNOME || ' ' || a.NOME || ' ' || a.DATA_NASCITA PAZIENTE, a.CODICE_FISCALE, a.READONLY, a.CERTIFICATO,COM_NASC.DESCRIZIONE COMUNE_NASCITA, COM_RES.DESCRIZIONE COMUNE_RESIDENZA, COM_DOM.DESCRIZIONE COMUNE_DOMICILIO,a_c.codice CONTATTO
                from ANAGRAFICA a
                left outer join COMUNI COM_NASC on (a.IDEN_COMUNE_NASCITA = COM_NASC.IDEN) left outer join COMUNI COM_RES on (a.IDEN_COMUNE_RESIDENZA = COM_RES.IDEN) left outer join COMUNI COM_DOM on (a.IDEN_COMUNE_DOMICILIO = COM_DOM.IDEN)
                inner join adt$contatti A_C on(a.iden = A_C.iden_anagrafica)
                where COGNOME like :cognome and NOME like :nome and DATA_NASCITA like :data_nascita and a_c.codice = :codice and a.DELETED = 'N' {#ORDER#}
            </SQL>
        </QUERY>  -->
        <QUERY id="RICONCILIA_SPOSTA_ESAMI">
            <SQL>select IDEN,ID_PAZ_DICOM, COGNOME, NOME, DATA_NASCITA, PAZIENTE, CODICE_FISCALE, READONLY, CERTIFICATO, COMUNE_NASCITA, COMUNE_RESIDENZA, COMUNE_DOMICILIO from VIEW_WK_ANAGRAFICA where COGNOME like :cognome and NOME like :nome and DATA_NASCITA like :data_nascita {#ORDER#}</SQL>
        </QUERY>
        <!--<QUERY id="CDC">
            <SQL>Select IDEN,CODICE,DESCRIZIONE,ORDINE from CENTRI_DI_COSTO WHERE DESCRIZIONE like :descr AND CODICE like :codice AND ATTIVO IN (select column_value from table(split(:attivo))) {#ORDER#}</SQL>
        </QUERY>-->
        <QUERY id="CDC">
            <SQL>
                with LIST_ATTIVO as (select regexp_substr(x, '[^,]+', 1, level) ID
                                     from(select :attivo x from dual)
                                     connect by level &lt;= length(x) - length(replace(x, ',')) + 1)
                Select IDEN,CODICE,DESCRIZIONE,ORDINE
                from CENTRI_DI_COSTO inner join LIST_ATTIVO on (CENTRI_DI_COSTO.ATTIVO = LIST_ATTIVO.ID)
                WHERE DESCRIZIONE like :descr AND CODICE like :codice
                {#ORDER#}
            </SQL>
        </QUERY>

        <QUERY id="PACS_AETITLE">
            <SQL>
                select /*+first_rows(10)*/ IDEN, DESCRIZIONE, DB_STRINGA_CONNESSIONE, DB_USER, DB_PASSWORD, DB_DRIVER, DB_TIMEOUT, ID_QUERY, AETITLE, DELETED AS ATTIVO
                FROM PACS_AETITLE  where UPPER(DESCRIZIONE) like :descr  {#ORDER#}
            </SQL>
        </QUERY>
        <QUERY id="COMUNI">
            <SQL>Select * from VIEW_COMUNI WHERE DESCRIZIONE like :descr AND CODICE_COMUNE like :codice {#ORDER#}</SQL>
        </QUERY>
        <!--<QUERY id="NOMENCLATORE">
            <SQL>Select * from VIEW_NOMENCLATORE WHERE DESCR_NOMENCLATORE like :descr AND CODICE_DECODIFICA like :codice AND ATTIVO IN (select column_value from table(split(:attivo))) {#ORDER#}</SQL>
        </QUERY>-->
        <QUERY id="NOMENCLATORE">
            <SQL>
                with LIST_ATTIVO as (select regexp_substr(x, '[^,]+', 1, level) ID
                                     from(select :attivo x from dual)
                                     connect by level &lt;= length(x) - length(replace(x, ',')) + 1)
                Select *
                from VIEW_NOMENCLATORE inner join LIST_ATTIVO on (VIEW_NOMENCLATORE.ATTIVO = LIST_ATTIVO.ID)
                WHERE DESCR_NOMENCLATORE like :descr AND CODICE_DECODIFICA like :codice
                {#ORDER#}
            </SQL>
        </QUERY>
        <!--<QUERY id="TICKET">
            <SQL>Select * from VIEW_TICKET WHERE DESCRIZIONE like :descr AND CODICE_DECODIFICA like :codice AND ATTIVO IN (select column_value from table(split(:attivo))) {#ORDER#}</SQL>
        </QUERY>-->
        <QUERY id="TICKET">
            <SQL>
                with LIST_ATTIVO as (select regexp_substr(x, '[^,]+', 1, level) ID
                                     from(select :attivo x from dual)
                                     connect by level &lt;= length(x) - length(replace(x, ',')) + 1)
                Select * from TICKET T inner join LIST_ATTIVO on (T.ATTIVO = LIST_ATTIVO.ID)
                WHERE T.DESCRIZIONE like :descr AND T.CODICE_DECODIFICA like :codice
                {#ORDER#}
            </SQL>
        </QUERY>
        <!--<QUERY id="ONERI">
            <SQL>Select * from VIEW_ONERI WHERE DESCRIZIONE like :descr AND CODICE_DECODIFICA like :codice AND ATTIVO IN (select column_value from table(split(:attivo))) {#ORDER#}</SQL>
        </QUERY>-->
        <QUERY id="ONERI">
            <SQL>
                with LIST_ATTIVO as (select regexp_substr(x, '[^,]+', 1, level) ID
                                     from(select :attivo x from dual)
                                     connect by level &lt;= length(x) - length(replace(x, ',')) + 1)
                Select *
                from ONERI inner join LIST_ATTIVO on (ONERI.ATTIVO = LIST_ATTIVO.ID)
                WHERE DESCRIZIONE like :descr AND CODICE_DECODIFICA like :codice
                {#ORDER#}
            </SQL>
        </QUERY>
        <!--<QUERY id="PROVENIENZE">
            <SQL>Select * from VIEW_PROVENIENZE WHERE DESCR_PROVENIENZA like :descr AND CODICE_DECODIFICA like :codice AND ATTIVO IN (select column_value from table(split(:attivo))) {#ORDER#}</SQL>
        </QUERY>-->
        <QUERY id="PROVENIENZE">
            <SQL>
                with LIST_ATTIVO as (select regexp_substr(x, '[^,]+', 1, level) ID
                                     from(select :attivo x from dual)
                                     connect by level &lt;= length(x) - length(replace(x, ',')) + 1)
                Select *
                from VIEW_PROVENIENZE inner join LIST_ATTIVO on (VIEW_PROVENIENZE.ATTIVO = LIST_ATTIVO.ID)
                WHERE DESCR_PROVENIENZA like :descr AND CODICE_DECODIFICA like :codice
                {#ORDER#}
            </SQL>
        </QUERY>
        <!--<QUERY id="SALE">
            <SQL>Select * from VIEW_SALA WHERE DESCRIZIONE like :descr AND CODICE_DECODIFICA like :codice AND ATTIVO IN (select column_value from table(split(:attivo))) {#ORDER#}</SQL>
        </QUERY>-->
        <QUERY id="SALE">
            <SQL>
                with LIST_ATTIVO as (select regexp_substr(x, '[^,]+', 1, level) ID
                                     from(select :attivo x from dual)
                                     connect by level &lt;= length(x) - length(replace(x, ',')) + 1)
                Select *
                from VIEW_SALA inner join LIST_ATTIVO on (VIEW_SALA.ATTIVO = LIST_ATTIVO.ID)
                WHERE DESCRIZIONE like :descr AND CODICE_DECODIFICA like :codice
                {#ORDER#}
            </SQL>
        </QUERY>
        <QUERY id="AREE">
            <SQL>Select * from VIEW_AREA WHERE IDEN_SALA=:iden_sal {#ORDER#}</SQL>
        </QUERY>
        <QUERY id="CMB_MEDICI_REFERTANTI_CDC">
            <SQL>Select p.IDEN VALUE,p.DESCRIZIONE DESCR from personale p inner join centri_di_costo_associati cdca on (p.iden=cdca.tabella_iden and cdca.tabella_nome='PERSONALE') where p.attivo='S' and p.tipo_personale='M' and p.tipo_medico='R' and cdca.iden_cdc=:IDEN_CDC</SQL>
            <BIND id="iden_cdc" value="#IDEN_CDC#" type="N"></BIND>
        </QUERY>
        <!--<QUERY id="PROFESSIONI">
            <SQL>Select * from VIEW_PROFESSIONI WHERE DESCRIZIONE like :descr AND CODICE_DECODIFICA like :codice AND ATTIVO IN (select column_value from table(split(:attivo))) {#ORDER#}</SQL>
        </QUERY>-->
        <QUERY id="PROFESSIONI">
            <SQL>
                with LIST_ATTIVO as (select regexp_substr(x, '[^,]+', 1, level) ID
                                     from(select :attivo x from dual)
                                     connect by level &lt;= length(x) - length(replace(x, ',')) + 1)
                Select *
                from VIEW_PROFESSIONI inner join LIST_ATTIVO on (VIEW_PROFESSIONI.ATTIVO = LIST_ATTIVO.ID)
                WHERE DESCRIZIONE like :descr AND CODICE_DECODIFICA like :codice
                {#ORDER#}
            </SQL>
        </QUERY>
        <!--<QUERY id="PATOLOGIE">
            <SQL>Select * from VIEW_PATOLOGIE WHERE DESCRIZIONE like :descr AND CODICE_DECODIFICA like :codice AND ATTIVO IN (select column_value from table(split(:attivo))) {#ORDER#}</SQL>
        </QUERY>-->
        <QUERY id="PATOLOGIE">
            <SQL>
                with LIST_ATTIVO as (select regexp_substr(x, '[^,]+', 1, level) ID
                                     from(select :attivo x from dual)
                                     connect by level &lt;= length(x) - length(replace(x, ',')) + 1)
                Select *
                from VIEW_PATOLOGIE inner join LIST_ATTIVO on (VIEW_PATOLOGIE.ATTIVO = LIST_ATTIVO.ID)
                WHERE DESCRIZIONE like :descr AND CODICE_DECODIFICA like :codice
                {#ORDER#}
            </SQL>
        </QUERY>
        <!--<QUERY id="PERSONALE">
            <SQL>Select * from VIEW_PERSONALE WHERE DESCRIZIONE like :descr AND CODICE_DECODIFICA like :codice AND ATTIVO IN (select column_value from table(split(:attivo))) {#ORDER#}</SQL>
        </QUERY>-->
        <QUERY id="PERSONALE">
            <SQL>
                with LIST_ATTIVO as (select regexp_substr(x, '[^,]+', 1, level) ID
                                     from(select :attivo x from dual)
                                     connect by level &lt;= length(x) - length(replace(x, ',')) + 1)
                Select *
                from VIEW_PERSONALE inner join LIST_ATTIVO on (VIEW_PERSONALE.ATTIVO = LIST_ATTIVO.ID)
                WHERE DESCRIZIONE like :descr AND CODICE_DECODIFICA like :codice
                {#ORDER#}
            </SQL>
        </QUERY>
        <!--<QUERY id="TIPI">
            <SQL>Select * from VIEW_TIPI WHERE DESCRIZIONE like :descr AND CODICE_DECODIFICA like :codice AND ATTIVO IN (select column_value from table(split(:attivo))) {#ORDER#}</SQL>
        </QUERY>-->
        <QUERY id="TIPI">
            <SQL>
                with LIST_ATTIVO as (select regexp_substr(x, '[^,]+', 1, level) ID
                                     from(select :attivo x from dual)
                                     connect by level &lt;= length(x) - length(replace(x, ',')) + 1)
                Select *
                from VIEW_TIPI inner join LIST_ATTIVO on (VIEW_TIPI.ATTIVO = LIST_ATTIVO.ID)
                WHERE DESCRIZIONE like :descr AND CODICE_DECODIFICA like :codice
                {#ORDER#}
            </SQL>
        </QUERY>
        <!--<QUERY id="STATI_PAZIENTE">
            <SQL>Select * from VIEW_STATI_PAZIENTE WHERE DESCRIZIONE like :descr AND CODICE_DECODIFICA like :codice AND ATTIVO IN (select column_value from table(split(:attivo))) {#ORDER#}</SQL>
        </QUERY>-->
        <QUERY id="STATI_PAZIENTE">
            <SQL>
                with LIST_ATTIVO as (select regexp_substr(x, '[^,]+', 1, level) ID
                                     from(select :attivo x from dual)
                                     connect by level &lt;= length(x) - length(replace(x, ',')) + 1)
                Select *
                from VIEW_STATI_PAZIENTE inner join LIST_ATTIVO on (VIEW_STATI_PAZIENTE.ATTIVO = LIST_ATTIVO.ID)
                WHERE DESCRIZIONE like :descr AND CODICE_DECODIFICA like :codice
                {#ORDER#}
            </SQL>
        </QUERY>
        <!--<QUERY id="STATI_ESAME">
            <SQL>Select IDEN,DESCRIZIONE,STATO,CODICE,ATTIVO,ORDINE,FILTRO from STATO_ESAME WHERE DESCRIZIONE like :descr AND CODICE = nvl(:codice, CODICE) AND ATTIVO IN (select column_value from table(split(:attivo))) {#ORDER#} </SQL>
        </QUERY>-->
        <QUERY id="STATI_ESAME">
            <SQL>
                with LIST_ATTIVO as (select regexp_substr(x, '[^,]+', 1, level) ID
                                     from(select :attivo x from dual)
                                     connect by level &lt;= length(x) - length(replace(x, ',')) + 1)
                Select IDEN,DESCRIZIONE,STATO,CODICE,ATTIVO,ORDINE,FILTRO
                from STATO_ESAME inner join LIST_ATTIVO on (STATO_ESAME.ATTIVO = LIST_ATTIVO.ID)
                WHERE DESCRIZIONE like :descr AND CODICE = nvl(:codice, CODICE)
                {#ORDER#}
            </SQL>
        </QUERY>
        <!--<QUERY id="GESTIONE_PC">
            <SQL>Select * from VIEW_GESTIONE_PC WHERE IP like :ip AND ATTIVO IN (select column_value from table(split(:attivo))) {#ORDER#}</SQL>
        </QUERY>-->
        <QUERY id="GESTIONE_PC">
            <SQL>
                with LIST_ATTIVO as (select regexp_substr(x, '[^,]+', 1, level) ID
                                     from(select :attivo x from dual)
                                     connect by level &lt;= length(x) - length(replace(x, ',')) + 1)
                Select *
                from VIEW_GESTIONE_PC inner join LIST_ATTIVO on (VIEW_GESTIONE_PC.ATTIVO = LIST_ATTIVO.ID)
                WHERE IP like :ip
                {#ORDER#}
            </SQL>
        </QUERY>
        <!--<QUERY id="GESTIONE_UTENTI">
            <SQL>Select * from VIEW_GESTIONE_UTENTI WHERE USERNAME like :user AND ATTIVO IN (select column_value from table(split(:attivo))) {#ORDER#}</SQL>
        </QUERY>-->
        <QUERY id="GESTIONE_UTENTI">
            <SQL>
                with LIST_ATTIVO as (select regexp_substr(x, '[^,]+', 1, level) ID
                from(select :attivo x from dual)
                connect by level &lt;= length(x) - length(replace(x, ',')) + 1)
                Select *
                from VIEW_GESTIONE_UTENTI inner join LIST_ATTIVO on (VIEW_GESTIONE_UTENTI.ATTIVO = LIST_ATTIVO.ID)
                WHERE USERNAME like :user
                {#ORDER#}
            </SQL>
        </QUERY>
        <!--<QUERY id="REFERTI_STANDARD">
            <SQL>SELECT rst.iden iden,nm.descrizione nomenclatore,RST.codice_decodifica codice_ref,pr.descrizione medico,rst.descrizione nome_referto FROM referti_Standard rst LEFT OUTER JOIN nomenclatore nm ON nm.iden = rst.iden_nomenclatore LEFT JOIN personale pr ON pr.iden = rst.iden_medico where rst.DESCRIZIONE like :descr AND rst.CODICE_DECODIFICA like :codice AND rst.ATTIVO IN (select column_value from table(split(:attivo))) {#ORDER#}</SQL>
        </QUERY>-->
        <QUERY id="REFERTI_STANDARD">
            <SQL>
                with LIST_ATTIVO as (select regexp_substr(x, '[^,]+', 1, level) ID
                                     from(select :attivo x from dual)
                                     connect by level &lt;= length(x) - length(replace(x, ',')) + 1)
                SELECT rst.iden iden,nm.descrizione nomenclatore,RST.codice_decodifica codice_ref,pr.descrizione medico,rst.descrizione nome_referto
                FROM referti_Standard rst inner join LIST_ATTIVO on (rst.ATTIVO = LIST_ATTIVO.ID)
                                          LEFT OUTER JOIN nomenclatore nm ON nm.iden = rst.iden_nomenclatore
                                          LEFT JOIN personale pr ON pr.iden = rst.iden_medico
                where rst.DESCRIZIONE like :descr AND rst.CODICE_DECODIFICA like :codice
                {#ORDER#}
            </SQL>
        </QUERY>
        <QUERY id="LISTA_REFERTI_STANDARD_WK">
            <SQL>WITH CODICI_DECODIFICA AS (SELECT COLUMN_VALUE COD FROM TABLE(SPLIT(:codice_decod))),
                DESCRIZIONI AS (SELECT COLUMN_VALUE DESCR FROM TABLE(SPLIT(:descrizione)))
                SELECT nm.descrizione nomenclatore,RST.CODICE_DECODIFICA,GET_DESCRIZIONE_PERSONALE(RST.IDEN_MEDICO) MEDICO,RST.TESTO,RST.DESCRIZIONE
                FROM REFERTI_STANDARD RST
                LEFT OUTER JOIN NOMENCLATORE NM ON NM.IDEN = RST.IDEN_NOMENCLATORE
                INNER JOIN CODICI_DECODIFICA CD ON (:codice_decod IS NULL OR (:codice_decod IS NOT NULL AND RST.CODICE_DECODIFICA LIKE CD.COD))
                INNER JOIN DESCRIZIONI DE ON (:descrizione IS NULL OR (:descrizione IS NOT NULL AND RST.DESCRIZIONE LIKE DE.DESCR))
                where rst.attivo = 'S' and testo is not null and (rst.iden_medico is null or rst.iden_medico = :iden_medico)
                AND (:iden_nomenclatore IS NULL OR (NM.IDEN IN (SELECT TO_NUMBER(COLUMN_VALUE) FROM TABLE(SPLIT(:iden_nomenclatore)))))
				union all
          SELECT '' nomenclatore,RST1.CODICE_DECODIFICA,GET_DESCRIZIONE_PERSONALE(RST1.IDEN_MEDICO) MEDICO,RST1.TESTO,RST1.DESCRIZIONE
           FROM REFERTI_STANDARD RST1
          where RST1.iden_medico=:iden_medico
            </SQL>
        </QUERY>
        <!--<QUERY id="FASCE_ORARIE">
            <SQL>select  /*+first_rows(10)*/ get_giorni_settimana(GIORNI_ATTIVI) GIORNI ,IDEN,DESCRIZIONE,ORA_INIZIO,ORA_FINE,ATTIVO from AGENDA_FASCE_ORARIE WHERE DESCRIZIONE like :descr /*AND IDEN like :codice*/ AND ATTIVO IN (select column_value from table(split(:attivo))) {#ORDER#}</SQL>
        </QUERY>-->
        <QUERY id="FASCE_ORARIE">
            <SQL>
                with LIST_ATTIVO as (select regexp_substr(x, '[^,]+', 1, level) ID
                                     from(select :attivo x from dual)
                                     connect by level &lt;= length(x) - length(replace(x, ',')) + 1)
                select  /*+first_rows(10)*/ get_giorni_settimana(GIORNI_ATTIVI) GIORNI, IDEN, DESCRIZIONE, ORA_INIZIO, ORA_FINE, ATTIVO
                from AGENDA_FASCE_ORARIE inner join LIST_ATTIVO on (AGENDA_FASCE_ORARIE.ATTIVO = LIST_ATTIVO.ID)
                WHERE DESCRIZIONE like :descr
                {#ORDER#}
            </SQL>
        </QUERY>
        <QUERY id="FASCE_ORARIE_IN_AGENDA">
            <SQL>select /*+first_rows(10)*/ get_giorni_settimana(giorni_attivi) giorni ,giorni_attivi,iden,descrizione,ora_inizio,ora_fine,attivo from AGENDA_FASCE_ORARIE WHERE ATTIVO = :attivo {#ORDER#}</SQL>
        </QUERY>
        <!--<QUERY id="AGENDE">
            <SQL>Select * from agenda WHERE DESCRIZIONE like :descr AND CODICE_DECODIFICA like :codice AND deleted IN (select column_value from table(split(:delete))) and  attivo IN (select column_value from table(split(:attivo))) {#ORDER#}</SQL>
        </QUERY>-->
        <QUERY id="AGENDE">
            <SQL>
                with LIST_ATTIVO as (select regexp_substr(x, '[^,]+', 1, level) ID
                                     from(select :attivo x from dual)
                                     connect by level &lt;= length(x) - length(replace(x, ',')) + 1)
                Select *
                from agenda inner join LIST_ATTIVO on (AGENDA.ATTIVO = LIST_ATTIVO.ID)
                WHERE DESCRIZIONE like :descr AND CODICE_DECODIFICA like :codice AND deleted IN (select column_value from table(split(:delete)))
                {#ORDER#}
            </SQL>
        </QUERY>
        <QUERY id="SEGRETERIA">
            <SQL>Select data_consegna,iden, iden_anagrafica, iden_testata, case  when tipo='C' then 'CONSEGNA' when tipo='V' then 'VISIONE' when tipo ='A' then 'ARCHIVIO' end TIPO from SEGRETERIA WHERE IDEN_TESTATA=:iden_testata AND DELETED =:deleted {#ORDER#}</SQL>
        </QUERY>
        <QUERY id="DOCUMENTI_ALLEGATI">
            <SQL>Select to_char(data_inserimento,'YYYYMMDD') DATA ,to_char(data_inserimento,'HH24:MI') ORA ,IDEN,NOME_FILE,URL_DOCUMENTO,MIME_TYPE from DOCUMENTI_ALLEGATI WHERE ((IDEN_ESAMI_TESTATA IS NOT NULL AND IDEN_ESAMI_TESTATA=:iden_testata) or (IDEN_ANAGRAFICA=:iden_anagrafica and IDEN_ESAMI_TESTATA IS NULL)) AND DELETED =:deleted {#ORDER#}</SQL>
        </QUERY>
        <QUERY id="REFERTI_VERSIONE">
            <SQL>Select rv.url_referto,to_char(rv.DATE_VERSIONE, 'YYYYMMDD') DATA_VERSIONE,to_char(rv.DATE_VERSIONE, 'HH24:MI') ORA_VERSIONE  ,rv.iden_primo_medico ,p.descrizione,rv.iden,rv.progressivo,rv.iden_referto from REFERTI_VERSIONE RV inner join PERSONALE P on (RV.iden_primo_medico = P.IDEN ) where rv.IDEN_REFERTO=:iden_referto and rv.ATTIVO=:attivo {#ORDER#}</SQL>
        </QUERY>
        <QUERY id="CONSULTA_PRENOTAZIONE_GIORNALIERA">
            <SQL>
                SELECT
                /*+first_rows(100)*/
                IDEN_AGENDA,
                IDEN_AGENDA_CONFIGURATA,
                IDEN_EROGANTE,
                IDEN_FASCIA_ORARIA,
                IDEN_ANAGRAFICA,
                ESAMI_TESTATA.IDEN AS IDEN_ESAME_TESTATA,
                ESAMI_DETTAGLIO.IDEN AS IDEN_ESAME_DETTAGLIO,
                NOMENCLATORE.DESCRIZIONE DESCRIZIONE_ESAME,
                ORA,
                NOME || ' ' || COGNOME || ' ' || ' ' || TO_CHAR( TO_DATE( DATA_NASCITA, 'YYYYMMDD' ), 'dd/mm/yyyy' ) AS PAZIENTE,
                SALA_AREA.DESCRIZIONE AS DESCRIZIONE_SALA_AREA,
                ORARIO.DATA,
                IDEN_REGISTRO,
                IDEN_REGISTRO_DETTAGLIO,
                ORARIO.STATO,
                DESCRIZIONE_AGENDA,
                ORARIO.NOTE,
                ORA_INIZIO,
                ORA_FINE
                from table( GESTIONE_CONSULTA_PRENOTA.GET_GIORNO_ORARIO( :iden_area, 'SALA_AREA', :giorno )  ) ORARIO
                left outer join ESAMI_TESTATA on (ESAMI_TESTATA.IDEN = ORARIO.ID_GRUPPO_PRENOTAZIONE and ESAMI_TESTATA.DELETED = 'N')
                left outer join ESAMI_DETTAGLIO on (ESAMI_DETTAGLIO.IDEN = ORARIO.IDEN_PRENOTAZIONE and ESAMI_DETTAGLIO.DELETED = 'N')
                left outer join NOMENCLATORE on (ESAMI_DETTAGLIO.IDEN_NOMENCLATORE = NOMENCLATORE.IDEN and NOMENCLATORE.ATTIVO = 'S')
                left outer join ANAGRAFICA on (ANAGRAFICA.IDEN = ESAMI_TESTATA.IDEN_ANAGRAFICA and ANAGRAFICA.DELETED = 'N')
                left outer join PROVENIENZE on (PROVENIENZE.IDEN = ESAMI_TESTATA.IDEN_PROVENIENZA and PROVENIENZE.ATTIVO = 'S')
                left outer join SALA_AREA on (SALA_AREA.IDEN = ORARIO.IDEN_EROGANTE and SALA_AREA.TIPO = 'AREA' and SALA_AREA.ATTIVO = 'S')
                where ( :tutti = 'S' or ( :tutti = 'N' and ( ORARIO.IDEN_PRENOTAZIONE is null or ORARIO.IDEN_PRENOTAZIONE = 0 ) ) )   {#ORDER#}
            </SQL>
        </QUERY>
        <QUERY id="PRECEDENTI">
            <SQL>
                select /*+first_rows(10)*/
                ed.iden iden_dettaglio,et.iden iden_testata,ed.id_dicom,anag.id_paz_dicom,ed.iden_sala,n.descrizione nomenclatore,ed.data_esame,ed.ora_esame,et.urgente,ed.stato stato_dettaglio,et.stato stato_testata
                from esami_dettaglio ed
                inner join esami_testata et on (et.iden = ed.iden_testata)
                inner join nomenclatore n on (n.iden = ed.iden_nomenclatore)
                inner join anagrafica anag on (anag.iden = et.iden_anagrafica)
                where ed.stato > get_codice_stato_esame('A') and ED.DELETED = 'N' and ET.DELETED = 'N' AND IDEN_ANAGRAFICA = :iden_anagrafica {#ORDER#}
            </SQL>
        </QUERY>
        <QUERY id="CASI_SIMILI">
        <SQL>
            <![CDATA[with PAROLE as
        (
        select /*+first_rows(10)*/ regexp_substr(x, '[^,]+', 1, level) WORD
        from(select :parole x from dual) connect by level <= length(x) - length(replace(x, ',')) + 1
        ),
        TOTALE_PAROLE as
        (
        select /*+first_rows(1)*/ count(1) CONTEGGIO from PAROLE
        )
        select RISULTATO.*, round(((RISULTATO.PAROLE_TROVATE / TOTALE_PAROLE.CONTEGGIO)) * 100, 2) VALORE,ED.ID_DICOM,
        an.cognome || ' ' ||  an.NOME  || ' ' || TO_CHAR(TO_DATE(AN.DATA_NASCITA,'YYYYMMDD'),'DD/MM/YYYY') PAZIENTE,
        ED.DATA_ESAME,
        N.descrizione NOMENCLATORE,
        an.id_paz_dicom    ,
        ED.IDEN IDEN_DETTAGLIO,
        ET.IDEN IDEN_TESTATA
        from
        (
        select /*+first_rows(10)*/
        HR.IDEN_REFERTO,
        sum((select count(1) from PAROLE where PAROLE.WORD = HR.TAG)) PAROLE_TROVATE
        from REFERTI_HASHTAGS HR
        where hr.deleted='N'
        group by HR.IDEN_REFERTO
        ) RISULTATO
        inner join ESAMI_DETTAGLIO ED on (ED.IDEN_REFERTO=RISULTATO.IDEN_REFERTO)
        INNER JOIN ESAMI_TESTATA ET on (ED.IDEN_TESTATA=ET.IDEN)
        INNER JOIN ANAGRAFICA AN on (ET.IDEN_ANAGRAFICA=AN.IDEN)
        INNER JOIN NOMENCLATORE N ON (ED.IDEN_NOMENCLATORE=n.IDEN),
        TOTALE_PAROLE where PAROLE_TROVATE>0     and ED.IDEN_REFERTO != nvl(:iden_referto,-1)
        order by VALORE desc]]>

        </SQL>
        </QUERY>
        <!--<QUERY id="WK_IRD_DOCUMENTI_ALLEGATI">
            <SQL>select DISTINCT(nome_file), to_char(data_inserimento,'YYYYMMDD') data_inserimento, mime_type,url_documento from documenti_allegati where (IDEN_ESAMI_TESTATA in (select column_value from table(split(:iden_testata))) or (IDEN_ANAGRAFICA =:iden_anagrafica and IDEN_ESAMI_TESTATA is null) ) and deleted = 'N' {#ORDER#}</SQL>
        </QUERY>-->
        <!--<QUERY id="WK_IRD_DOCUMENTI_ALLEGATI">
            <SQL><![CDATA[select * from (with FILTRO as (select TO_NUMBER(REGEXP_SUBSTR(X, '[^,]+', 1, level)) id from (select :iden_testata X from dual) connect by level <= length(regexp_replace(X,'[^,]*'))+1) select /*+ INDEX(da IDX_DOCUMENT_ANAG_TEST_DEL)*/ distinct(NOME_FILE), IDEN, TO_CHAR(DATA_INSERIMENTO,'YYYYMMDD') DATA_INSERIMENTO,TO_CHAR(DATA_INSERIMENTO,'HH24:MI') ORA_INSERIMENTO,  MIME_TYPE, URL_DOCUMENTO from DOCUMENTI_ALLEGATI inner join FILTRO on (DOCUMENTI_ALLEGATI.IDEN_ESAMI_TESTATA = FILTRO.ID and DOCUMENTI_ALLEGATI.DELETED = 'N') union select /*+ INDEX(da IDX_DOCUMENTI_ID_ANAGRAFICA)*/ distinct(NOME_FILE),   IDEN, TO_CHAR(DATA_INSERIMENTO,'YYYYMMDD') DATA_INSERIMENTO,TO_CHAR(DATA_INSERIMENTO,'HH24:MI') ORA_INSERIMENTO, MIME_TYPE,  URL_DOCUMENTO from DOCUMENTI_ALLEGATI where IDEN_ANAGRAFICA = :iden_anagrafica and DELETED = 'N' and MIME_TYPE <> 'audio/wav'){#ORDER#}]]></SQL>
        </QUERY>-->
        <QUERY id="WK_IRD_DOCUMENTI_ALLEGATI">
            <SQL><![CDATA[select * from (with FILTRO as (select TO_NUMBER(REGEXP_SUBSTR(X, '[^,]+', 1, level)) id from (select :iden_testata X from dual) connect by level <= length(regexp_replace(X,'[^,]*'))+1)
                select /*+ INDEX(da IDX_DOCUMENT_ANAG_TEST_DEL)*/ distinct(DA.NOME_FILE), DA.IDEN,ET.IDEN_ANAGRAFICA,ET.IDEN IDEN_TESTATA, TO_CHAR(DA.DATA_INSERIMENTO,'YYYYMMDD') DATA_INSERIMENTO,TO_CHAR(DA.DATA_INSERIMENTO,'HH24:MI') ORA_INSERIMENTO,  DA.MIME_TYPE, DA.URL_DOCUMENTO
                from DOCUMENTI_ALLEGATI DA
                inner join FILTRO on (DA.IDEN_ESAMI_TESTATA = FILTRO.ID and DA.DELETED = 'N')
                inner join esami_testata ET on(ET.IDEN = DA.IDEN_ESAMI_TESTATA)){#ORDER#}]]></SQL>
        </QUERY>
        <QUERY id="WK_RICERCA_TESTO_REFERTO">
            <SQL>select
                /*+first_rows(100)*/
                r.iden,
                rt.testo,
                r.data_referto,
                (select anag.cognome || ' ' || anag.nome || ' ' || anag.data_nascita from esami_dettaglio ed inner join esami_testata et on (et.iden = ed.iden_testata)inner join anagrafica anag on (anag.iden = et.iden_anagrafica) where ed.iden_referto = r.iden and rownum = 1) anagrafica
                from referti r inner join referti_testo rt on (rt.iden_referto = r.iden)
                where r.data_referto &gt;= :da_data and r.data_referto &lt;= :a_data and CONTAINS (rt.testo, :testo, 1) > 0 {#ORDER#}
            </SQL>
        </QUERY>
        <QUERY id="WK_RICERCA_TESTO_REFERTO_SUB">
            <SQL>
                select /*+first_rows(10)*/ anag.cognome || ' ' || anag.nome || ' ' || anag.data_nascita paziente,ed.iden iden_dettaglio,et.iden iden_testata,et.iden_cdc,cdc.descrizione cdc,prov.descrizione provenienza,
                vs.descrizione sala,ed.id_dicom,anag.id_paz_dicom,ed.iden_sala,n.descrizione nomenclatore,ed.data_esame,ed.ora_esame,et.urgente,et.stato stato_testata,ed.stato stato_dettaglio from esami_dettaglio ed
                inner join esami_testata et on (et.iden = ed.iden_testata) inner join centri_di_costo cdc on (cdc.iden = et.iden_cdc) inner join provenienze prov on (prov.iden = et.iden_provenienza) inner join view_sala vs on (ed.iden_sala = vs.iden)
                inner join nomenclatore n on (n.iden = ed.iden_nomenclatore) inner join anagrafica anag on (anag.iden = et.iden_anagrafica) where iden_referto = :iden_referto {#ORDER#}
            </SQL>
        </QUERY>
        <QUERY id="WK_SYSTEM_ADMIN">
            <SQL><![CDATA[SELECT /*+first_row(100)*/ rm.iden,GET_DESCRIZIONE_TIPI(rm.tipo_richiesta) tipo_richiesta,tipo_richiesta.parametri tipo,rm.stato_richiesta stato,stati.descrizione stato_richiesta,get_Descrizione_personale(rm.iden_ope_richiesta) richiedente,rm.iden_ope_richiesta iden_richiedente,to_char(rm.data_richiesta,'YYYYMMDD') data_richiesta,nvl(get_Descrizione_personale(rm.iden_ope_ultima_modifica),get_Descrizione_personale(rm.iden_ope_richiesta)) ope_ultima_modifica,to_char(nvl(rm.data_ultima_modifica,rm.data_richiesta),'YYYYMMDD') data_ultima_modifica,
                rm.iden_cdc,get_descrizione_cdc(rm.iden_cdc) cdc,rm.iden_anagrafica,rm.iden_dettaglio,rm.iden_testata,rm.iden_referto
                FROM richieste_modifica rm
                INNER JOIN tipi stati ON (stati.codice_decodifica = rm.stato_richiesta AND stati.tipo = 'STATO_RICHIESTA_MODIFICA')
                INNER JOIN tipi tipo_richiesta ON (tipo_richiesta.iden = rm.tipo_richiesta  and tipo_richiesta.tipo = 'TIPO_RICHIESTA_MODIFICA')
                INNER JOIN FILTRI F_STATO ON (F_STATO.CODICE_VARCHAR = rm.stato_richiesta AND F_STATO.ID_FILTRO = 'FILTRO_STATO_RICH_MOD')
                INNER JOIN FILTRI F_TIPO ON (F_TIPO.CODICE_NUMBER = rm.tipo_richiesta AND F_TIPO.ID_FILTRO = 'FILTRO_TIPO_RICH_MOD')
                INNER JOIN filtri F_RICH ON ((F_RICH.CODICE_NUMBER = rm.iden_ope_richiesta or F_RICH.codice_number = 0) AND F_RICH.ID_FILTRO = 'FILTRO_RICHIEDENTE_RICH_MOD')
                left outer JOIN FILTRI F_CDC ON (F_CDC.username = :username and F_CDC.CODICE_NUMBER = rm.iden_cdc AND F_CDC.ID_FILTRO = 'FILTRO_CDC_RICH_MOD')
                WHERE (F_STATO.username = F_TIPO.username AND F_STATO.username = F_RICH.username AND F_STATO.username = :username)
                and rm.data_richiesta >= to_date(:da_data || ' 00:00', 'YYYYMMDD HH24:MI') and rm.data_richiesta <= to_date(:a_data || ' 23:59', 'YYYYMMDD HH24:MI')
                {#ORDER#}]]>
            </SQL>
        </QUERY>
        <QUERY id="MAGAZZINI_MOVIMENTI">
            <SQL>
                select mv.iden, data_movimento,iden_causale,iden_magazzino,iden_articolo,a.descrizione nome_articolo,
                mg.descrizione as nome_magazzino , a.codice_barre,tp.descrizione as causale,mv.quantita from magazzino.movimenti mv inner join magazzino.magazzini mg on mg.iden = mv.iden_magazzino
                inner join tipi tp on tp.iden = mv.iden_causale
                inner join magazzino.articoli a on a.iden = mv.iden_articolo where mg.iden = :iden  and (
                (a.descrizione like :nome_articolo or a.codice_barre like :codice_barre or mv.CODICE_LOTTO like :iden_lotto)
                or
                (mv.data_movimento &gt;= :data_inizio and mv.data_movimento &lt;= :data_fine))
            </SQL>
        </QUERY>
        <QUERY id="ASSOCIAZIONE_MATERIALI_NOMENCLATORE">
            <SQL>
                SELECT ga.iden iden_associazione, a.codice_barre,a.descrizione,a.codice_articolo,  QUANTITA,   TIPO_UTILIZZO,GA.tabella_iden_erogante IDEN_ARTICOLO
                from VIEW_PREST_MATERIALI GA
                INNER JOIN MAGAZZINO$ARTICOLI a ON a.IDEN = ga.tabella_iden_erogante
                where tabella_nome_erogante = 'ARTICOLI' AND tabella_nome_nomenclatore ='NOMENCLATORE' and tabella_iden_nomenclatore = :iden_nomenclatore {#ORDER#}
            </SQL>
        </QUERY>
        <QUERY id="SCARICO_MATERIALI_ELENCO_ESAMI">
            <SQL>
                select ed.data_esame,nm.descrizione,ET.stato,ed.iden,et.iden iden_testata from
                esami_testata et inner join esami_Dettaglio ed on et.iden = ed.iden_testata inner join nomenclatore nm on nm.iden = ed.iden_nomenclatore
                inner join stato_esame se on se.codice = ed.stato
                where et.iden = :iden_testata and ed.deleted='N'
            </SQL>
        </QUERY>
        <QUERY id="SCARICO_MATERIALI_ELENCO_MAT">
            <SQL>
                select distinct ARTICOLI.IDEN, ARTICOLI.DESCRIZIONE, ARTICOLI.CODICE_ARTICOLO, ARTICOLI.CODICE_BARRE, GIACENZE.GIACENZA
                from ARTICOLI, MOVIMENTI, GIACENZE
                where ARTICOLI.ATTIVO = 'S' and MOVIMENTI.IDEN_MAGAZZINO = :iden_magazzino  and ARTICOLI.IDEN = MOVIMENTI.IDEN_ARTICOLO
                and GIACENZE.IDEN_ARTICOLO = ARTICOLI.IDEN and GIACENZE.IDEN_MAGAZZINO = MOVIMENTI.IDEN_MAGAZZINO  and (:descrizione is null or descrizione like :descrizione)
                and (:codice_barre is null or codice_barre like :codice_barre) and (:codice_articolo is null or codice_articolo like :codice_articolo)
            </SQL>
        </QUERY>
        <QUERY id="INDIRIZZI">
            <SQL>
                SELECT /*+first_rows(10)*/ INDIRIZZI.IDEN,INDIRIZZI.IDEN_TABELLA,INDIRIZZI.NOME_TABELLA,INDIRIZZO || ',' || CIVICO || ' ' || PRESSO INDIRIZZO,
                NVL(COMUNI.DESCRIZIONE, INDIRIZZI.DESCRIZIONE_COMUNE) COMUNE,NVL(TIPI.DESCRIZIONE, INDIRIZZI.DESCRIZIONE_INDIRIZZO) TIPO,NAZIONI.DESCRIZIONE NAZIONE
                from INDIRIZZI left outer join COMUNI on (COMUNI.IDEN = INDIRIZZI.IDEN_COMUNE) left outer join TIPI on (TIPI.IDEN = INDIRIZZI.TIPO_INDIRIZZO)
                left outer join NAZIONI on (NAZIONI.IDEN = INDIRIZZI.IDEN_NAZIONE) where nome_tabella = :nome_tabella and iden_tabella = :iden_tabella and INDIRIZZI.deleted = 'N'
            </SQL>
        </QUERY>
        <QUERY id="RIPRISTINO_CANCELLATI">
            <SQL>
                select /*+first_rows(100)*/
                a.IDEN,
                a.IDEN IDEN_ANAGRAFICA,
                a.COGNOME,
                a.NOME,
                a.ID_PAZ_DICOM,
                a.DATA_NASCITA,
                a.COGNOME || ' ' || a.NOME PAZIENTE,
                a.CODICE_FISCALE,
                COM_NASC.DESCRIZIONE COMUNE_NASCITA,
                COM_RES.DESCRIZIONE COMUNE_RESIDENZA,
                COM_DOM.DESCRIZIONE COMUNE_DOMICILIO,
                CASE a.DELETED WHEN 'N' THEN 'ATTIVO' WHEN 'S' THEN 'NON ATTIVO' END STATO_ANAGRAFICA
                from ANAGRAFICA a left outer join COMUNI COM_NASC on (a.IDEN_COMUNE_NASCITA = COM_NASC.IDEN) left outer join COMUNI COM_RES on (a.IDEN_COMUNE_RESIDENZA = COM_RES.IDEN) left outer join COMUNI COM_DOM on (a.IDEN_COMUNE_DOMICILIO = COM_DOM.IDEN) where COGNOME like :cognome and NOME like :nome and DATA_NASCITA like :data_di_nascita {#ORDER#}
            </SQL>
        </QUERY>
        <QUERY id="DETTAGLIO_ESAMI_DA_RIPRISTINARE">
            <SQL>
                select /*+first_rows(100)*/
                ET.IDEN IDEN_TESTATA,
                ED.IDEN IDEN_DETTAGLIO,
                ED.IDEN_SALA,
                ET.IDEN_ANAGRAFICA,
                ET.IDEN_PROVENIENZA,
                ED.IDEN_NOMENCLATORE,
                NOM.DESCRIZIONE NOMENCLATORE,
                ET.IDEN_CDC,
                CDC.DESCRIZIONE CDC,
                ET.STATO STATO_TESTATA,
                ED.DATA_ESAME,
                ED.ORA_ESAME,
                PROV.DESCRIZIONE PROVENIENZA,
                ED.DELETED,
                CASE ED.DELETED WHEN 'N' THEN 'ATTIVO' WHEN 'S' THEN 'NON ATTIVO' END STATO_CANCELLAZIONE_ESAME
                from ESAMI_TESTATA ET
                inner join ESAMI_DETTAGLIO ED on (ED.IDEN_TESTATA = ET.IDEN )
                inner join ANAGRAFICA ANAG on (ANAG.IDEN = ET.IDEN_ANAGRAFICA )
                inner join PROVENIENZE PROV on (PROV.IDEN = ET.IDEN_PROVENIENZA)
                inner join NOMENCLATORE NOM on (NOM.IDEN = ED.IDEN_NOMENCLATORE)
                inner join centri_di_costo cdc on (cdc.iden = et.iden_cdc)
                where et.iden_anagrafica = :iden_anagrafica {#ORDER#}
            </SQL>
        </QUERY>
        <QUERY id="WK_VALID_MULTIPLA">
            <SQL><![CDATA[SELECT /*+first_rows(100)*/ r.iden IDEN_REFERTO, ANAG.id_paz_dicom,
                ANAG.iden as IDEN_ANAGRAFICA,
                ANAG.COGNOME || ' ' || ANAG.NOME || ' ' || ANAG.DATA_NASCITA PAZIENTE,
                r.DATA_REFERTO, r.ORA_REFERTO, cr.sotto_indagine sotto_indagine_ref,
               r.iden_cdc as IDEN_CDC,
                wm_concat(ed.iden) as IDEN_DETTAGLIO,
                wm_concat(ed.iden_nomenclatore) as IDEN_NOMENCLATORE,
                wm_concat(et.iden) as IDEN_TESTATA,
                wm_concat(ed.iden_sala) as IDEN_SALA,
                wm_concat(ed.id_dicom) as ID_DICOM
                from REFERTI r
                LEFT OUTER JOIN referti_codici_esterni cr ON (cr.iden_referto = r.iden)
                inner join esami_dettaglio ed on (ed.iden_referto = r.iden and ed.deleted='N')
                inner join esami_testata et on (et.iden = ed.iden_testata and et.deleted='N')
                inner join anagrafica ANAG on (ANAG.iden = et.iden_anagrafica and ANAG.deleted='N')
                inner join filtri f_medico on ((f_medico.codice_number = r.IDEN_PRIMO_MEDICO or f_medico.codice_number = 0) and f_medico.id_filtro = 'MEDICO_VALID_MULTIPLA' and f_medico.ATTIVO='S' )
                WHERE r.annullato='N' and r.deleted='N' and r.firmato='N' and f_medico.USERNAME = :username and ED.DATA_ESAME >= :da_data and ED.DATA_ESAME <= :a_data
                GROUP BY r.iden, ANAG.iden, ANAG.id_paz_dicom, r.DATA_REFERTO, r.ORA_REFERTO, ANAG.COGNOME, ANAG.NOME, ANAG.DATA_NASCITA, cr.sotto_indagine,r.iden_cdc
                {#ORDER#}]]></SQL>
        </QUERY>
        <QUERY id="DETTAGLIO_REFERTO">
            <SQL>select /*+first_rows(100)*/ ET.IDEN_ANAGRAFICA, ED.IDEN IDEN_DETTAGLIO, ED.IDEN_TESTATA, ET.IDEN_PROVENIENZA, ET.IDEN_CDC, ED.IDEN_NOMENCLATORE, NOM.DESCRIZIONE DESCR_NOMENCLATORE, PROV.DESCRIZIONE PROVENIENZA, ED.DATA_ESAME, ED.ORA_ESAME, ed.iden_referto from ESAMI_TESTATA ET inner join ESAMI_DETTAGLIO ED on (ET.IDEN = ED.IDEN_TESTATA and ET.DELETED = 'N' and ED.DELETED = 'N') inner join PROVENIENZE PROV on (PROV.IDEN = ET.IDEN_PROVENIENZA and PROV.ATTIVO = 'S') inner join NOMENCLATORE NOM on (NOM.IDEN = ED.IDEN_NOMENCLATORE and NOM.ATTIVO = 'S') where ED.IDEN_REFERTO = :iden_referto</SQL>
        </QUERY>
        <QUERY id="BACKUP_ESAMI_DETTAGLIO">
            <SQL>select data_prenotazione,data_accettazione,data_esame,ora_esame,ed.deleted,sl.descrizione sala,nm.descrizione prestazione,p.descrizione tecnico_1,
                id_dicom,se.descrizione stato_dettaglio,machine,iden_bck from bck$esami_dettaglio ed
                inner join sala_area sl on (sl.iden = ed.iden_sala and tipo ='SALA')
                left join personale p on p.iden = ed.iden_tecnico_1
                inner join nomenclatore nm on nm.iden = ed.iden_nomenclatore
                inner join stato_esame se on se.codice = ed.stato
                where ed.iden = :iden_dettaglio
            </SQL>
        </QUERY>
        <QUERY id="BACKUP_TESTATA">
            <SQL>
                select iden_bck, machine,cc.descrizione cdc,p.descrizione provenienza,et.stato stato_testata from bck$esami_testata et inner join centri_di_costo cc on cc.iden = et.iden_cdc inner join provenienze p on p.iden = et.iden_provenienza where et.iden = :iden_testata {#ORDER#}
            </SQL>
        </QUERY>
        <QUERY id="BACKUP_ANAGRAFICA">
            <SQL>
                select iden_bck,iden,cognome,nome,sesso,data_nascita,codice_fiscale,id_paz_dicom,deleted,readonly,date_inserimento,date_modifica,machine from bck$anagrafica where iden = :iden_anagrafica {#ORDER#}
            </SQL>
        </QUERY>
    </QUERY_GROUP>

    <QUERY_GROUP id="AUTOCOMPLETE">
        <QUERY id="AC_COMUNI">
            <SQL>Select IDEN VALUE,DESCRIZIONE DESCR,CAP,PROVINCIA,DATA_INIZIO_VALIDA,DATA_FINE_VALIDA from VIEW_COMUNI WHERE DESCRIZIONE like :descr {#ORDER#}</SQL>
        </QUERY>
        <QUERY id="AC_MEDICI">
            <SQL>Select IDEN VALUE,DESCRIZIONE DESCR,CODICE_FISCALE from PERSONALE WHERE TIPO_PERSONALE='M' AND TIPO_MEDICO in (select column_value from table(split(:tipo_med))) AND ATTIVO='S' AND DESCRIZIONE like :descr {#ORDER#}</SQL>
        </QUERY>
        <QUERY id="AC_PERSONALE">
            <SQL>Select IDEN VALUE,DESCRIZIONE DESCR,CODICE_FISCALE from PERSONALE WHERE TIPO_PERSONALE=:tipo_personale AND ATTIVO='S' AND DESCRIZIONE like :descr {#ORDER#}</SQL>
        </QUERY>
        <QUERY id="AC_PATOLOGIE">
            <SQL>Select IDEN VALUE,CODICE_DECODIFICA,DESCRIZIONE || ' - ' || CODICE_DECODIFICA  DESCR from PATOLOGIE WHERE ATTIVO='S' AND (DESCRIZIONE like :descr or CODICE_DECODIFICA like :descr) and (TIPO like :tipo or tipo ='DIAGN') {#ORDER#}</SQL>
        </QUERY>
        <QUERY id="AC_TICKET">
            <SQL>Select IDEN VALUE,CODICE_DECODIFICA,DESCRIZIONE DESCR from TICKET WHERE ATTIVO='S' AND DESCRIZIONE like :descr {#ORDER#}</SQL>
        </QUERY>
        <QUERY id="AC_ESENZIONI">
            <SQL>Select IDEN VALUE,CODICE_DECODIFICA,DESCRIZIONE DESCR from ESENZIONI_PATOLOGIA WHERE ATTIVO='S' AND DESCRIZIONE like :descr {#ORDER#}</SQL>
        </QUERY>
        <QUERY id="AC_RICETTE">
            <SQL>Select IDEN VALUE,CODICE_DECODIFICA,DESCRIZIONE DESCR from RICETTE WHERE ATTIVO='S' AND DESCRIZIONE like :descr {#ORDER#}</SQL>
        </QUERY>
        <QUERY id="AC_PROVENIENZE">
            <SQL>Select P.IDEN VALUE,P.CODICE_DECODIFICA,P.DESCRIZIONE DESCR,T.DESCRIZIONE TIPO from PROVENIENZE P inner join TIPI T on (P.TIPO_PROVENIENZA=T.CODICE_DECODIFICA) and T.TIPO='PROVENIENZA' WHERE P.ATTIVO='S' AND P.DESCRIZIONE like :descr {#ORDER#}</SQL>
        </QUERY>
        <QUERY id="AC_TAB_ESA_DESCR">
            <SQL>select IDEN AS VALUE,DESCRIZIONE AS DESCR from NOMENCLATORE where DESCRIZIONE like :filter</SQL>
        </QUERY>
        <QUERY id="AC_TAB_ESA_IDEN">
            <SQL>select IDEN AS VALUE,DESCRIZIONE AS DESCR from NOMENCLATORE where IDEN = :filter</SQL>
        </QUERY>
        <QUERY id="AC_COMUNI_CODICE_COMUNE">
            <SQL>select IDEN ,DESCRIZIONE from COMUNI where CODICE_COMUNE like :descr {#ORDER#}</SQL>
        </QUERY>
        <QUERY id="AC_ALLERTE">
            <SQL>select IDEN VALUE,DESCRIZIONE DESCR from CODIFICHE_CLINICHE where DESCRIZIONE like :descr and TIPO ='ALLERTE'{#ORDER#} </SQL>
        </QUERY>
        <QUERY id="AC_CONTROINDICAZIONI">
            <SQL>select IDEN VALUE,DESCRIZIONE DESCR from CODIFICHE_CLINICHE where DESCRIZIONE like :descr and TIPO ='CONTROINDICAZIONI'{#ORDER#} </SQL>
        </QUERY>
        <QUERY id="AC_CONSOLE_OPERATORI">
            <SQL>SELECT IDEN VALUE,DESCRIZIONE DESCR,TIPO_MEDICO,CODICE_FISCALE FROM PERSONALE WHERE TIPO_PERSONALE='M' AND TIPO_MEDICO = :tipo_medico AND ATTIVO='S' AND DESCRIZIONE LIKE :descr {#ORDER#}</SQL>
        </QUERY>
        <QUERY id="AC_PROFESSIONI">
            <SQL>Select IDEN VALUE,CODICE_DECODIFICA,DESCRIZIONE DESCR from PROFESSIONI WHERE ATTIVO='S' AND DESCRIZIONE like :descr {#ORDER#}</SQL>
        </QUERY>
        <QUERY id="AC_ANAG_PROFESSIONI">
            <SQL>Select IDEN VALUE,CODICE_DECODIFICA,DESCRIZIONE DESCR from PROFESSIONI WHERE ATTIVO='S' AND DESCRIZIONE like :descr {#ORDER#}</SQL>
        </QUERY>
        <QUERY id="AC_ANAG_COMUNE_NASCITA">
            <SQL>Select IDEN VALUE,DESCRIZIONE DESCR,CAP,PROVINCIA,DATA_INIZIO_VALIDA,DATA_FINE_VALIDA,CODICE_COMUNE,CODICE_REGIONE,CODICE_USL from COMUNI WHERE DESCRIZIONE like :descr {#ORDER#}</SQL>
        </QUERY>
        <QUERY id="AC_ANAG_COMUNE_RESIDENZA">
            <SQL>Select IDEN VALUE,DESCRIZIONE DESCR,CAP,PROVINCIA,CODICE_COMUNE,CODICE_REGIONE,CODICE_USL from COMUNI WHERE data_fine_valida is null and DESCRIZIONE like :descr {#ORDER#}</SQL>
        </QUERY>
        <QUERY id="AC_ANAG_COMUNE_DOMICILIO">
            <SQL>Select IDEN VALUE,DESCRIZIONE DESCR,CAP,PROVINCIA,CODICE_COMUNE,CODICE_REGIONE,CODICE_USL from COMUNI WHERE data_fine_valida is null and DESCRIZIONE like :descr {#ORDER#}</SQL>
        </QUERY>
        <QUERY id="AC_ANAG_CITTADINANZA">
            <SQL>Select IDEN VALUE,CODICE_ISTAT,DESCRIZIONE DESCR from NAZIONI WHERE attivo = 'S' and DESCRIZIONE like :descr {#ORDER#}</SQL>
        </QUERY>
        <QUERY id="AC_ANAG_TITOLO">
            <SQL>Select /*+first_rows(10)*/ IDEN VALUE,CODICE_DECODIFICA,DESCRIZIONE DESCR from TIPI WHERE TIPO = 'TITOLO' and ATTIVO = 'S' AND DESCRIZIONE like :descr {#ORDER#}</SQL>
        </QUERY>
        <QUERY id="AC_ANAG_TITOLO_STUDIO">
            <SQL>Select /*+first_rows(10)*/ IDEN VALUE,CODICE_DECODIFICA,DESCRIZIONE DESCR from TIPI WHERE TIPO = 'TITOLO_STUDIO' and ATTIVO = 'S' AND DESCRIZIONE like :descr {#ORDER#}</SQL>
        </QUERY>
        <QUERY id="AC_ANAG_STATO_CIVILE">
            <SQL>Select /*+first_rows(10)*/ IDEN VALUE,CODICE_DECODIFICA,DESCRIZIONE DESCR from TIPI WHERE TIPO = 'STATO_CIVILE' and ATTIVO = 'S' AND DESCRIZIONE like :descr {#ORDER#}</SQL>
        </QUERY>
        <QUERY id="AC_ANAG_MEDICO_BASE">
            <SQL>Select IDEN VALUE,DESCRIZIONE DESCR from from PERSONALE WHERE TIPO_PERSONALE=:tipo_personale and TIPO_MEDICO = :tipo_medico AND ATTIVO='S' AND DESCRIZIONE like :descr {#ORDER#}</SQL>
        </QUERY>
        <QUERY id="AC_TIPO_RICHIESTA_MODIFICA">
            <SQL>select /*+first_rows(10)*/ iden,descrizione,codice_decodifica from tipi where tipo = 'TIPO_RICHIESTA_MODIFICA' and parametri = :tipo_richiesta and attivo = 'S' and descrizione like :descr {#ORDER#}</SQL>
        </QUERY>
        <QUERY id="AC_TIPO_MATERIALE">
            <SQL>SELECT IDEN VALUE,DESCRIZIONE DESCR FROM TIPI WHERE TIPO =:mg_tipo AND ATTIVO='S' AND DESCRIZIONE LIKE :descr {#ORDER#} </SQL>
        </QUERY>
        <QUERY id="AC_PRODUTTORE">
            <SQL>SELECT IDEN VALUE,DESCRIZIONE DESCR FROM TIPI WHERE TIPO =:mg_tipo AND ATTIVO='S' AND DESCRIZIONE LIKE :descr {#ORDER#} </SQL>
        </QUERY>
        <QUERY id="SRM_PERSONALE">
            <SQL>SELECT /*+first_rows(10)*/ IDEN VALUE, DESCRIZIONE DESCR, CODICE_FISCALE FROM PERSONALE WHERE (:tipo_personale = 'ALL' or TIPO_PERSONALE = :tipo_personale) AND ATTIVO = 'S' AND DESCRIZIONE like :descr {#ORDER#}</SQL>
        </QUERY>
        <QUERY id="INDIRIZZO_COMUNE">
            <SQL>Select /*+first_rows(10)*/ IDEN VALUE,DESCRIZIONE DESCR,CAP,PROVINCIA,CODICE_COMUNE,CODICE_REGIONE,CODICE_USL from COMUNI WHERE data_fine_valida is null and DESCRIZIONE like :descr {#ORDER#}</SQL>
        </QUERY>
        <QUERY id="INDIRIZZO_TIPO">
            <SQL>select /*+first_rows(10)*/ IDEN VALUE,CODICE_DECODIFICA,DESCRIZIONE DESCR from TIPI where TIPO = 'INDIRIZZO' and DESCRIZIONE like :descr {#ORDER#}</SQL>
        </QUERY>
        <QUERY id="AC_INDIRIZZI_PERSONALE">
            <SQL><![CDATA[select /*+first_rows(10)*/ I.IDEN VALUE,I.CODICE_DECODIFICA,I.DESCRIZIONE_COMUNE ,I.INDIRIZZO,INDIRIZZO || ' - ' || CAP  || ' ' || I.DESCRIZIONE_COMUNE  DESCR,I.DESCRIZIONE_PROVINCIA,T.DESCRIZIONE TIPO_INDIRIZZO
                from INDIRIZZI I
                inner join TIPI T on (T.IDEN = I.TIPO_INDIRIZZO and T.TIPO='INDIRIZZO' and T.CODICE_DECODIFICA<>'HOME')
                where I.DELETED='N'  AND I.NOME_TABELLA = 'PERSONALE' and I.IDEN_TABELLA = nvl(:iden_personale, I.IDEN_TABELLA) and UPPER(I.INDIRIZZO) like :descr {#ORDER#}]]></SQL>
        </QUERY>
        <QUERY id="INDIRIZZO_PROVINCIA">
            <SQL>select /*+first_rows(10)*/ IDEN VALUE,CODICE_DECODIFICA,DESCRIZIONE DESCR from TIPI where TIPO = 'CANTONE' and DESCRIZIONE like :descr {#ORDER#}</SQL>
        </QUERY>
        <QUERY id="NAZIONI">
            <SQL>select /*+first_rows(10)*/ IDEN VALUE,CODICE_ISTAT,DESCRIZIONE DESCR from NAZIONI where DESCRIZIONE like :descr and attivo = 'S' {#ORDER#}</SQL>
        </QUERY>
    </QUERY_GROUP>

    <QUERY_GROUP id="PACS">
        <QUERY id="SCAN_AETITLE">
            <SQL>select  src.iden iden_sorgente , src.aetitle aetitle_sorgente, dest.iden iden_destinatario , dest.aetitle aetitle_destinatario, toCall.IDEN iden_tocall, toCall.DESCRIZIONE descrizione_tocall, toCall.DB_STRINGA_CONNESSIONE stringa_connessione_tocall, toCall.DB_USER db_user_tocall, toCall.DB_PASSWORD db_password_tocall, toCall.DB_DRIVER db_driver_tocall, toCall.DB_TIMEOUT db_timeout_tocall, toCall.ID_QUERY id_query_tocall, toCall.DELETED deleted_tocall, toCall.AETITLE aetitle_tocall
                from  pacs_scan_aetitle  psa
                inner join pacs_aetitle src    on (psa.IDEN_PACS_SORGENTE=src.iden)
                inner join pacs_aetitle dest   on (psa.IDEN_PACS_DESTINATARIO=dest.iden)
                inner join pacs_aetitle toCall on (psa.IDEN_PACS_TOCALL=toCall.iden)
                where psa.attivo=:attivo and src.aetitle=:sorgente and dest.iden=(select extractvalue(extra,'//COL/IDEN_AETITLE') from sala_area where iden=:destinatario and rownum=1) order by psa.ordine
            </SQL>
        </QUERY>
        <QUERY id="AETITLE_SOURCE_FROM_IDEN">
            <SQL>select aetitle from pacs_aetitle where iden=:iden_aetitle</SQL>
        </QUERY>
        <QUERY id="AETITLE_SOURCE_FROM_ACCESSION_NUMBER">
            <SQL>select aetitle from pacs_aetitle  inner join VIEW_SALA on (view_sala.iden_aetitle=pacs_aetitle.iden) inner join esami_dettaglio on (esami_dettaglio.iden_sala=VIEW_SALA.IDEN) where esami_dettaglio.id_dicom=:accession_number</SQL>
        </QUERY>
        <QUERY id="CSH">
            <SQL>select number_of_study_images from medistore.study_imagecount_view where accession_number=:accession_number</SQL>
        </QUERY>
        <QUERY id="ORGANIZATION_FROM_ACCESSION_NUMBER">
            <SQL>select Get_Org_From_Acc_Number(:accession_number) as ORGANIZATION from dual</SQL>
        </QUERY>
    </QUERY_GROUP>

    <QUERY_GROUP id="SDJ">
        <QUERY id="SG_GENERALI">
            <SQL>select /*+first_rows(1)*/ 0 value, 'Ottime' DESCR from dual
                union all select /*+first_rows(1)*/ 0 value, 'Buone' DESCR from dual
                union all select /*+first_rows(1)*/ 0 value, 'Discrete' DESCR from dual
                union all select /*+first_rows(1)*/ 0 value, 'Sufficienti' DESCR from dual
                union all select /*+first_rows(1)*/ 0 value, 'Scarse' DESCR from dual
            </SQL>
        </QUERY>
        <QUERY id="SG_CONTROLATERALE">
            <SQL>select /*+first_rows(1)*/ 0 value, 'Indenne' DESCR from dual
                union all select /*+first_rows(1)*/ 0 value, 'Ricostruz. legamenti' DESCR from dual
                union all select /*+first_rows(1)*/ 0 value, 'Protesi totale' DESCR from dual
                union all select /*+first_rows(1)*/ 0 value, 'Artroscopia' DESCR from dual
                union all select /*+first_rows(1)*/ 0 value, 'Meniscectomia' DESCR from dual
                union all select /*+first_rows(1)*/ 0 value, 'Revisione' DESCR from dual
                union all select /*+first_rows(1)*/ 0 value, 'Osteosintesi' DESCR from dual
                union all select /*+first_rows(1)*/ 0 value, 'Osteotomia' DESCR from dual
                union all select /*+first_rows(1)*/ 0 value, 'Rimoz. impianto' DESCR from dual
                union all select /*+first_rows(1)*/ 0 value, 'Anormale non operato' DESCR from dual
                union all select /*+first_rows(1)*/ 0 value, 'Protesi mono' DESCR from dual
            </SQL>
        </QUERY>
        <QUERY id="SG_ARTICOLAZIONI">
            <SQL>select /*+first_rows(1)*/ 0 value, 'Nessuna' DESCR from dual
                union all select /*+first_rows(1)*/ 0 value, 'Anca controlaterale' DESCR from dual
                union all select /*+first_rows(1)*/ 0 value, 'Spalle' DESCR from dual
                union all select /*+first_rows(1)*/ 0 value, 'Anca omolaterale' DESCR from dual
                union all select /*+first_rows(1)*/ 0 value, 'Piede, caviglia' DESCR from dual
                union all select /*+first_rows(1)*/ 0 value, 'Colonna vertebrale' DESCR from dual
            </SQL>
        </QUERY>
        <QUERY id="SG_FARMACI">
            <SQL>select /*+first_rows(1)*/ 0 value, 'Nessuno' DESCR from dual
                union all select /*+first_rows(1)*/ 0 value, 'Analgesici' DESCR from dual
                union all select /*+first_rows(1)*/ 0 value, 'FANS' DESCR from dual
                union all select /*+first_rows(1)*/ 0 value, 'Steroidi' DESCR from dual
            </SQL>
        </QUERY>
        <QUERY id="SG_DOLORE">
            <SQL>select /*+first_rows(1)*/ 50 value, 'Assente' DESCR from dual
                union all select /*+first_rows(1)*/ 45 value, 'Lieve occas. no compr. attiva' DESCR from dual
                union all select /*+first_rows(1)*/ 40 value, 'Lieve occas. scale' DESCR from dual
                union all select /*+first_rows(1)*/ 30 value, 'Lieve occas. scale/cammino' DESCR from dual
                union all select /*+first_rows(1)*/ 20 value, 'Moderato occas., limitaz. attività' DESCR from dual
                union all select /*+first_rows(1)*/ 10 value, 'Moderato continuo' DESCR from dual
                union all select /*+first_rows(1)*/ 00 value, 'Severo' DESCR from dual
            </SQL>
        </QUERY>
        <QUERY id="SG_RANGE">
            <SQL>select /*+first_rows(1)*/ 25 value, '90°-120°' DESCR from dual
                union all select /*+first_rows(1)*/ 20 value, '60°-89°' DESCR from dual
                union all select /*+first_rows(1)*/ 15 value, '45°-59°' DESCR from dual
                union all select /*+first_rows(1)*/ 10 value, '20°-44°' DESCR from dual
                union all select /*+first_rows(1)*/ 05 value, '0°-19°' DESCR from dual
            </SQL>
        </QUERY>
        <QUERY id="SG_CONTRATTURA">
            <SQL>select /*+first_rows(1)*/ 00 value, '&lt;5°' DESCR from dual
                union all select /*+first_rows(1)*/ 02 value, '5°-10°' DESCR from dual
                union all select /*+first_rows(1)*/ 05 value, '11°-15°' DESCR from dual
                union all select /*+first_rows(1)*/ 10 value, '16°-20°' DESCR from dual
                union all select /*+first_rows(1)*/ 15 value, '&gt;20°' DESCR from dual
            </SQL>
        </QUERY>
        <QUERY id="SG_AP">
            <SQL>select /*+first_rows(1)*/ 10 value, '&lt;5mm' DESCR from dual
                union all select /*+first_rows(1)*/ 05 value, '5-10mm' DESCR from dual
                union all select /*+first_rows(1)*/ 00 value, '10mm' DESCR from dual
            </SQL>
        </QUERY>
        <QUERY id="SG_DEFICIT">
            <SQL>select /*+first_rows(1)*/ 00 value, '0°' DESCR from dual
                union all select /*+first_rows(1)*/ 05 value, '&lt;10°' DESCR from dual
                union all select /*+first_rows(1)*/ 10 value, '10°-20°' DESCR from dual
                union all select /*+first_rows(1)*/ 15 value, '&gt;20°' DESCR from dual
            </SQL>
        </QUERY>
        <QUERY id="SG_ML">
            <SQL>select /*+first_rows(1)*/ 15 value, '&lt;5°' DESCR from dual
                union all select /*+first_rows(1)*/ 10 value, '6°-9°' DESCR from dual
                union all select /*+first_rows(1)*/ 05 value, '10°-14°' DESCR from dual
                union all select /*+first_rows(1)*/ 00 value, '15°' DESCR from dual
            </SQL>
        </QUERY>
        <QUERY id="SG_FEMORE">
            <SQL>select /*+first_rows(1)*/ 1 value, 'Varo' DESCR from dual
                union all select /*+first_rows(1)*/ 2 value, 'Valgo' DESCR from dual
            </SQL>
        </QUERY>
        <QUERY id="SG_TIBIA">
            <SQL>select /*+first_rows(1)*/ 1 value, 'Varo' DESCR from dual
                union all select /*+first_rows(1)*/ 2 value, 'Valgo' DESCR from dual
            </SQL>
        </QUERY>
        <QUERY id="SG_ALLINEAMENTO">
            <SQL>select /*+first_rows(1)*/ 00 value, '5°-9°' DESCR from dual
                union all select /*+first_rows(1)*/ 10 value, '0°-4°' DESCR from dual
                union all select /*+first_rows(1)*/ 10 value, '10°-15°' DESCR from dual
                union all select /*+first_rows(1)*/ 20 value, '&lt;0°' DESCR from dual
                union all select /*+first_rows(1)*/ 20 value, '&gt;15°' DESCR from dual
            </SQL>
        </QUERY>
        <QUERY id="SG_CAMMINO">
            <SQL>select /*+first_rows(1)*/ 50 value, 'Illim.' DESCR from dual
                union all select /*+first_rows(1)*/ 40 value, '1 Km' DESCR from dual
                union all select /*+first_rows(1)*/ 30 value, '500m' DESCR from dual
                union all select /*+first_rows(1)*/ 20 value, '&lt;500m' DESCR from dual
                union all select /*+first_rows(1)*/ 10 value, 'Casa' DESCR from dual
                union all select /*+first_rows(1)*/ 00 value, 'Nessuno' DESCR from dual
            </SQL>
        </QUERY>
        <QUERY id="SG_SALITA">
            <SQL>select /*+first_rows(1)*/ 50 value, 'Sù e giù' DESCR from dual
                union all select /*+first_rows(1)*/ 40 value, 'Giù con appoggio' DESCR from dual
                union all select /*+first_rows(1)*/ 30 value, 'Sù/Giù con appoggio' DESCR from dual
                union all select /*+first_rows(1)*/ 15 value, 'Sù appoggio No giù' DESCR from dual
                union all select /*+first_rows(1)*/ 00 value, 'No' DESCR from dual
            </SQL>
        </QUERY>
        <QUERY id="SG_SUPPORTO">
            <SQL>select /*+first_rows(1)*/ 00 value, 'Nessuno' DESCR from dual
                union all select /*+first_rows(1)*/ 05 value, 'Bastone' DESCR from dual
                union all select /*+first_rows(1)*/ 10 value, '2 Bastoni' DESCR from dual
                union all select /*+first_rows(1)*/ 15 value, 'Stampelle o girello' DESCR from dual
            </SQL>
        </QUERY>
        <QUERY id="SG_TIPO_INT">
            <SQL>select /*+first_rows(1)*/ 0 value, 'Artrodesi' DESCR from dual
                union all select /*+first_rows(1)*/ 0 value, 'Artrolisi' DESCR from dual
                union all select /*+first_rows(1)*/ 0 value, 'Artroprotesi' DESCR from dual
                union all select /*+first_rows(1)*/ 0 value, 'Biopsia' DESCR from dual
                union all select /*+first_rows(1)*/ 0 value, 'Lavaggio' DESCR from dual
                union all select /*+first_rows(1)*/ 0 value, 'Osteotomia' DESCR from dual
                union all select /*+first_rows(1)*/ 0 value, 'Revisione - Reimpianto' DESCR from dual
                union all select /*+first_rows(1)*/ 0 value, 'Rimozione Mezzi di sintesi' DESCR from dual
                union all select /*+first_rows(1)*/ 0 value, 'Rimozione Protesi' DESCR from dual
                union all select /*+first_rows(1)*/ 0 value, 'Sintesi' DESCR from dual
            </SQL>
        </QUERY>
        <QUERY id="SG_BILATERALE">
            <SQL>select /*+first_rows(1)*/ 1 value, 'Si' DESCR from dual
                union all select /*+first_rows(1)*/ 2 value, 'No' DESCR from dual
            </SQL>
        </QUERY>
        <QUERY id="SG_ACCESSO">
            <SQL>select /*+first_rows(1)*/ 1 value, 'Pararotulea mediale' DESCR from dual
                union all select /*+first_rows(1)*/ 2 value, 'Pararotulea laterale' DESCR from dual
            </SQL>
        </QUERY>
        <QUERY id="SG_PROTESI">
            <SQL>select /*+first_rows(1)*/ 0 value, 'Ignoto' DESCR from dual
                union all select /*+first_rows(1)*/ 0 value, 'Mono' DESCR from dual
                union all select /*+first_rows(1)*/ 0 value, 'Bicomp.' DESCR from dual
                union all select /*+first_rows(1)*/ 0 value, 'Totale' DESCR from dual
            </SQL>
        </QUERY>
        <QUERY id="SG_CEMENTO">
            <SQL>select /*+first_rows(1)*/ 0 value, 'Ignoto' DESCR from dual
                union all select /*+first_rows(1)*/ 0 value, 'Assente' DESCR from dual
                union all select /*+first_rows(1)*/ 0 value, 'Antibiotico.' DESCR from dual
                union all select /*+first_rows(1)*/ 0 value, 'Simplex P' DESCR from dual
                union all select /*+first_rows(1)*/ 0 value, 'Pres. Non Spec.' DESCR from dual
            </SQL>
        </QUERY>
        <QUERY id="SG_TRAPIANTO">
            <SQL>select /*+first_rows(1)*/ 0 value, 'Autologo' DESCR from dual
                union all select /*+first_rows(1)*/ 0 value, 'Eterologo' DESCR from dual
                union all select /*+first_rows(1)*/ 0 value, 'Omologo.' DESCR from dual
                union all select /*+first_rows(1)*/ 0 value, 'Sintentico' DESCR from dual
            </SQL>
        </QUERY>
        <QUERY id="SG_MOTIVO_REV">
            <SQL>select /*+first_rows(1)*/ 0 value, 'Frattura' DESCR from dual
                union all select /*+first_rows(1)*/ 0 value, 'Lussazione' DESCR from dual
                union all select /*+first_rows(1)*/ 0 value, 'Mobilizzazione asettica' DESCR from dual
                union all select /*+first_rows(1)*/ 0 value, 'Mobilizzazione settica' DESCR from dual
                union all select /*+first_rows(1)*/ 0 value, 'Rottura componenti' DESCR from dual
                union all select /*+first_rows(1)*/ 0 value, 'Usura PE' DESCR from dual
            </SQL>
        </QUERY>
        <QUERY id="SG_ARCHIVIO1">
            <SQL>select /*+first_rows(1)*/ 0 value, '' DESCR from dual
            </SQL>
        </QUERY>
        <QUERY id="SG_ARCHIVIO2">
            <SQL>select /*+first_rows(1)*/ 0 value, '' DESCR from dual
            </SQL>
        </QUERY>
        <QUERY id="SG_CLOCALI">
            <SQL>select /*+first_rows(1)*/ 0 value, 'Infezione superficiale' DESCR from dual
                union all select /*+first_rows(1)*/ 0 value, 'Infezione profonda' DESCR from dual
                union all select /*+first_rows(1)*/ 0 value, 'Ematoma' DESCR from dual
                union all select /*+first_rows(1)*/ 0 value, 'Paralisi SPE' DESCR from dual
                union all select /*+first_rows(1)*/ 0 value, 'Frattura femore' DESCR from dual
                union all select /*+first_rows(1)*/ 0 value, 'Frattura piatto tib.' DESCR from dual
                union all select /*+first_rows(1)*/ 0 value, 'Mobilizz. precoce comp. fem.' DESCR from dual
                union all select /*+first_rows(1)*/ 0 value, 'Mobilizz. precoce comp. tib.' DESCR from dual
                union all select /*+first_rows(1)*/ 0 value, '(Sub) Lussazione protesi' DESCR from dual
            </SQL>
        </QUERY>
        <QUERY id="SG_CGENERALI">
            <SQL>select /*+first_rows(1)*/ 0 value, 'Embolia polmonare' DESCR from dual
                union all select /*+first_rows(1)*/ 0 value, 'Cardiovascol.' DESCR from dual
                union all select /*+first_rows(1)*/ 0 value, 'Respiratorie' DESCR from dual
                union all select /*+first_rows(1)*/ 0 value, 'Gastrointestin.' DESCR from dual
                union all select /*+first_rows(1)*/ 0 value, 'Urologiche' DESCR from dual
                union all select /*+first_rows(1)*/ 0 value, 'Sist. nerv. cent.' DESCR from dual
                union all select /*+first_rows(1)*/ 0 value, 'Multiple' DESCR from dual
            </SQL>
        </QUERY>
        <QUERY id="CHECK_AUTORIZZA_MDC">
            <SQL>select  /*+first_rows(1)*/ &apos;S&apos;  VALUE ,&apos;lblAutorizMDC&apos;  DESCR,&apos;CBcolorDefault&apos; CLASS  from dual</SQL>
        </QUERY>
        <QUERY id="CHECK_CONSENSO_REFERTO">
            <SQL>select  /*+first_rows(1)*/ &apos;S&apos;  VALUE ,&apos;lblConsensoReferto&apos;  DESCR,&apos;CBcolorDefault&apos; CLASS  from dual</SQL>
        </QUERY>
        <QUERY id="CHECK_CONSENSO_ORALE">
            <SQL>select  /*+first_rows(1)*/ &apos;S&apos;  VALUE ,&apos;lblConsensoOrale&apos;  DESCR,&apos;CBcolorDefault&apos; CLASS  from dual</SQL>
        </QUERY>
        <QUERY id="CHECK_CONSENSO_RISULTATI_ONLINE">
            <SQL>select  /*+first_rows(1)*/ &apos;S&apos;  VALUE ,&apos;lblConsensoRisultatiOnline&apos;  DESCR,&apos;CBcolorDefault&apos; CLASS  from dual</SQL>
        </QUERY>
        <QUERY id="CHECK_CONSENSO_REFERTO_AL_MEDICO_BASE">
            <SQL>select  /*+first_rows(1)*/ &apos;S&apos;  VALUE ,&apos;lblConsensoRefertoAlMedicoBase&apos;  DESCR,&apos;CBcolorDefault&apos; CLASS  from dual</SQL>
        </QUERY>
        <QUERY id="CHECK_ACCETTAZIONE_CONTABILE_NO_ESAMI">
            <SQL>select  /*+first_rows(1)*/ &apos;S&apos;  VALUE ,&apos;lblAccettazioneContabileNoEsami&apos;  DESCR,&apos;CBcolorDefault&apos; CLASS  from dual</SQL>
        </QUERY>
        <QUERY id="CHECK_STAMPA_ALLEGATI">
            <SQL>select  /*+first_rows(1)*/ &apos;S&apos;  VALUE ,&apos;lblStampaAllegati&apos;  DESCR,&apos;CBcolorDefault&apos; CLASS  from dual</SQL>
        </QUERY>
        <QUERY id="CHECK_STAMPA_FATTURA">
            <SQL>select  /*+first_rows(1)*/ &apos;S&apos;  VALUE ,&apos;lblStampaFattura&apos;  DESCR,&apos;CBcolorDefault&apos; CLASS  from dual</SQL>
        </QUERY>
        <QUERY id="CHECK_CONSENSO_WEB_SMS">
            <SQL>select  /*+first_rows(1)*/ &apos;S&apos;  VALUE ,&apos;lblConsensoWebSms&apos;  DESCR,&apos;CBcolorDefault&apos; CLASS  from dual</SQL>
        </QUERY>
        <QUERY id="CHECK_STAMPA_RICEVUTA">
            <SQL>select  /*+first_rows(1)*/ &apos;S&apos;  VALUE ,&apos;lblStampaRicevuta&apos;  DESCR,&apos;CBcolorDefault&apos; CLASS  from dual</SQL>
        </QUERY>
        <QUERY id="CHECK_STAMPA_ETICHETTA">
            <SQL>select  /*+first_rows(1)*/ &apos;S&apos;  VALUE ,&apos;lblStampaEtichetta&apos;  DESCR,&apos;CBcolorDefault&apos; CLASS  from dual</SQL>
        </QUERY>
        <QUERY id="CHECK_ESCLUDI_DALLA_CODA">
            <SQL>select  /*+first_rows(1)*/ &apos;S&apos;  VALUE ,&apos;lblEscludiDallaCoda&apos;  DESCR,&apos;CBcolorDefault&apos; CLASS  from dual</SQL>
        </QUERY>
        <QUERY id="CHECK_EVIDENZIA_IN_CODA">
            <SQL>select  /*+first_rows(1)*/ &apos;S&apos;  VALUE ,&apos;lblEvidenziaInCoda&apos;  DESCR,&apos;CBcolorDefault&apos; CLASS  from dual</SQL>
        </QUERY>
        <QUERY id="CHECK_GARANZIA_TEMPI_ATTESA">
            <SQL>select  /*+first_rows(1)*/ &apos;S&apos;  VALUE ,&apos;lblGaranziaTempiAttesa&apos;  DESCR,&apos;CBcolorDefault&apos; CLASS  from dual</SQL>
        </QUERY>
        <QUERY id="CHECK_CONSEGNA_REFERTO_PAZIENTE">
            <SQL>select  /*+first_rows(1)*/ &apos;S&apos;  VALUE ,&apos;lblConsegnaRefertoPaziente&apos;  DESCR,&apos;CBcolorDefault&apos; CLASS  from dual</SQL>
        </QUERY>
        <QUERY id="CHECK_METODICHE">
            <SQL>select  /*+first_rows(100)*/ CODICE_DECODIFICA  VALUE ,PARAMETRI  DESCR  from TIPI WHERE TIPO=&apos;METODICA&apos; AND ATTIVO =&apos;S&apos;</SQL>
        </QUERY>
        <QUERY id="CHECK_PRESTAZIONE_PRIMO_ACCESSO">
            <SQL>select  /*+first_rows(1)*/ &apos;S&apos;  VALUE ,&apos;lblPrestazionePrimoAccesso&apos;  DESCR,&apos;CBcolorDefault&apos; CLASS  from dual</SQL>
        </QUERY>
        <QUERY id="CHECK_PRONTA_DISP">
            <SQL>select  /*+first_rows(1)*/ &apos;S&apos;  VALUE ,&apos;lblProntaDisp&apos;  DESCR,&apos;CBcolorDefault&apos; CLASS  from dual</SQL>
        </QUERY>
        <QUERY id="CHECK_TRATTAMENTO_DATI_ESA">
            <SQL>select  /*+first_rows(1)*/ &apos;S&apos;  VALUE ,&apos;lblTrattamentoDatiEsa&apos;  DESCR,&apos;CBcolorRed&apos; CLASS  from dual</SQL>
        </QUERY>
        <QUERY id="CHECK_URGENZE">
            <SQL>select /*+first_rows(10)*/   CODICE_DECODIFICA VALUE,DESCRIZIONE DESCR,PARAMETRI CLASS from TIPI WHERE TIPO=&apos;URGENZA&apos; ORDER BY VALUE ASC</SQL>
        </QUERY>
        <QUERY id="CHK_DX_SX">
            <SQL>select /*+first_row(10)*/ &apos;DX&apos; VALUE, &apos;Destra&apos; DESCR from dual union all select /*+first_row(10)*/ &apos;SX&apos; VALUE, &apos;Sinistra&apos; DESCR from dual</SQL>
        </QUERY>
        <QUERY id="CHK_GIORNI_SETTIMANA">
            <SQL>SELECT /*+first_rows(10)*/ &apos;1&apos; VALUE, &apos;lblLunedi&apos; DESCR FROM DUAL UNION ALL SELECT &apos;2&apos; VALUE, &apos;lblMartedi&apos; DESCR FROM DUAL UNION ALL SELECT &apos;3&apos; VALUE, &apos;lblMercoledi&apos; DESCR FROM DUAL UNION ALL SELECT &apos;4&apos; VALUE, &apos;lblGiovedi&apos; DESCR FROM DUAL UNION ALL SELECT &apos;5&apos; VALUE, &apos;lblVenerdi&apos; DESCR FROM DUAL UNION ALL SELECT &apos;6&apos; VALUE, &apos;lblSabato&apos; DESCR FROM DUAL UNION ALL SELECT &apos;7&apos; VALUE, &apos;lblDomenica&apos; DESCR FROM DUAL</SQL>
        </QUERY>
        <QUERY id="CHK_TEST_CLASS">
            <SQL>select /*+first_rows(1)*/ 'S' VALUE, 'Consenso' DESCR, 'CBcolorRed' CLASS from dual UNION ALL select /*+first_rows(1)*/ 'S2' VALUE, 'Consenso2' DESCR, 'CBcolorGreen' CLASS from dual UNION ALL select /*+first_rows(1)*/ 'S3' VALUE, 'Consenso2' DESCR, 'CBcolorYellow' CLASS from dual</SQL>
        </QUERY>
        <QUERY id="CMB_AGENDA_FASCE_ORARIE">
            <SQL><![CDATA[
                select  /*+first_rows(100)*/ IDEN VALUE ,get_giorni_settimana(giorni_attivi) || &apos; dalle &apos; || ora_inizio || &apos; alle &apos; ||ora_fine  DESCR  from AGENDA_FASCE_ORARIE ORDER BY DESCRIZIONE
            ]]></SQL>
        </QUERY>
        <QUERY id="CMB_INFO_MEDICI_PRESCRIVENTI">
            <SQL>select t.IDEN_MEDICO || '#' || t.iden_indirizzo || '#' ||t.note VALUE,  'Medico: ' || p.descrizione || ' Indirizzo: ' || i.indirizzo || ' Note: ' || t.note DESCR
                from ESAMI_TESTATA_EXTRA_INFO ETEI, xmltable('/ROWS/ROW' passing ETEI.INFO
                columns IDEN_MEDICO number path '/*/IDEN_MEDICO',
                IDEN_INDIRIZZO number path '/*/IDEN_INDIRIZZO',
                NOTE varchar2(4000) path '/*/NOTE') T
                left outer join  personale p  on(p.iden=t.iden_medico )
                left outer join INDIRIZZI I  on(i.iden=t.iden_indirizzo )
                where etei.IDEN_ESAME_TESTATA = :iden_testata and etei.CATEGORIA = 'NOTE_MEDICI' and etei.DELETED = 'N'</SQL>
            <BINDS>
                <BIND id="iden_testata" value="#IDEN_TESTATA#" type="N"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="CMB_TIPO_PAGAMENTO">
            <SQL>select /*+first_rows(10)*/ IDEN VALUE,DESCRIZIONE  DESCR from TIPI WHERE TIPO = 'TIPO_PAGAMENTO' ORDER BY ORDINE</SQL>
        </QUERY>
        <QUERY id="CMB_AGENDE">
            <SQL>SELECT /*+first_rows(100)*/ IDEN VALUE, DESCRIZIONE DESCR FROM AGENDA WHERE ATTIVO = &apos;S&apos; ORDER BY DESCRIZIONE</SQL>
        </QUERY>
        <QUERY id="CMB_CDC">
            <SQL>SELECT /*+first_rows(100)*/ IDEN VALUE, DESCRIZIONE DESCR FROM CENTRI_DI_COSTO WHERE ATTIVO = &apos;S&apos; ORDER BY DESCRIZIONE</SQL>
        </QUERY>
        <QUERY id="CMB_GRUPPO_SANGUIGNO">
            <SQL>select /*+first_rows(10)*/ CODICE_DECODIFICA VALUE,DESCRIZIONE  DESCR from TIPI WHERE TIPO = 'GRUPPO_SANGUIGNO' ORDER BY ORDINE </SQL>
        </QUERY>
        <QUERY id="CMB_AETITLE">
            <SQL>SELECT /*+first_rows(100)*/ IDEN VALUE, AETITLE DESCR FROM PACS_AETITLE WHERE DELETED = &apos;N&apos; ORDER BY AETITLE </SQL>
        </QUERY>
        <QUERY id="CMB_STATO_NOSOLOGICO">
            <SQL><![CDATA[select 0 value, 'Tutti' descr from dual UNION ALL SELECT /*+first_rows(100)*/ IDEN VALUE, DESCRIZIONE DESCR FROM ADT$TIPI WHERE tipo ='STATO' and ASSIGNING_AUTHORITY_AREA = 'ADT']]></SQL>
        </QUERY>
        <QUERY id="CMB_MODALITYTYPE">
            <SQL>select CODICE_DECODIFICA VALUE,DESCRIZIONE  DESCR from TIPI WHERE TIPO = :metodica</SQL>
            <BINDS>
                <BIND id="metodica" value="MODALITYTYPE" type="V"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="CMB_CDC_PERSONALE">
            <SQL>SELECT  /*+first_rows(1)*/ CDC.IDEN VALUE, CDC.DESCRIZIONE DESCR  FROM CENTRI_DI_COSTO_ASSOCIATI CA INNER JOIN CENTRI_DI_COSTO CDC ON (CDC.IDEN = CA.IDEN_CDC) where CA.TABELLA_NOME = 'PERSONALE' and tabella_iden = :iden_per</SQL>
            <BINDS>
                <BIND id="iden_per" value="#IDEN_PER#" type="N"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="CMB_CDC_NOT_SEL">
            <SQL>select  CDC.IDEN VALUE,CDC.DESCRIZIONE DESCR from CENTRI_DI_COSTO CDC left outer join CENTRI_DI_COSTO_ASSOCIATI CDC_AS ON (CDC.IDEN=CDC_AS.IDEN_CDC and CDC_AS.TABELLA_IDEN= :id_tabella  and CDC_AS.TABELLA_NOME=:tabella) where CDC_AS.IDEN is null</SQL>
            <BINDS>
                <BIND id="id_tabella" value="#IDEN#" type="N"></BIND>
                <BIND id="tabella" value="#TABELLA#" type="V"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="CMB_CDC_SEL">
            <SQL>select CDC_AS.IDEN_CDC VALUE,CDC.DESCRIZIONE DESCR from CENTRI_DI_COSTO_ASSOCIATI CDC_AS INNER JOIN CENTRI_DI_COSTO CDC ON (CDC.IDEN=CDC_AS.IDEN_CDC)  WHERE CDC_AS.TABELLA_IDEN= :id_tabella and CDC_AS.TABELLA_NOME=:tabella</SQL>
            <BINDS>
                <BIND id="id_tabella" value="#IDEN#" type="N"></BIND>
                <BIND id="tabella" value="#TABELLA#" type="V"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="CMB_CDC_NOT_SEL_NOMENCLATORE">
            <SQL>select  CDC.IDEN VALUE,CDC.DESCRIZIONE DESCR from CENTRI_DI_COSTO CDC left outer join CENTRI_DI_COSTO_ASSOCIATI CDC_AS ON (CDC.IDEN=CDC_AS.IDEN_CDC and CDC_AS.TABELLA_IDEN= :id_tabella  and CDC_AS.TABELLA_NOME='NOMENCLATORE' and CDC_AS.SITO = 'RIS') where CDC_AS.IDEN is null and CDC.ATTIVO='S' ORDER BY DESCR ASC</SQL>
            <BINDS>
                <BIND id="id_tabella" value="#IDEN#" type="N"></BIND>

            </BINDS>
        </QUERY>
        <QUERY id="CMB_CDC_SEL_NOMENCLATORE">
            <SQL>select CDC_AS.IDEN_CDC VALUE,CDC.DESCRIZIONE DESCR from CENTRI_DI_COSTO_ASSOCIATI CDC_AS INNER JOIN CENTRI_DI_COSTO CDC ON (CDC.IDEN=CDC_AS.IDEN_CDC)  WHERE CDC_AS.TABELLA_IDEN= :id_tabella and CDC_AS.TABELLA_NOME='NOMENCLATORE' and CDC_AS.SITO = 'RIS' ORDER BY DESCR ASC </SQL>
            <BINDS>
                <BIND id="id_tabella" value="#IDEN#" type="N"></BIND>

            </BINDS>
        </QUERY>
        <QUERY id="CMB_CDC_NOT_SEL_PERSONALE">
            <SQL>select  CDC.IDEN VALUE,CDC.DESCRIZIONE DESCR from CENTRI_DI_COSTO CDC left outer join CENTRI_DI_COSTO_ASSOCIATI CDC_AS ON (CDC.IDEN=CDC_AS.IDEN_CDC and CDC_AS.TABELLA_IDEN= :id_tabella  and CDC_AS.TABELLA_NOME='PERSONALE') where CDC_AS.IDEN is null and CDC.ATTIVO='S' and (CDC.SITO = :sito or CDC.SITO = 'ALL') ORDER BY DESCR ASC</SQL>
            <BINDS>
                <BIND id="id_tabella" value="#IDEN#" type="N"></BIND>
                <BIND id="sito" value="#SITO#" type="V"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="CMB_CDC_SEL_PERSONALE">
            <SQL>select CDC_AS.IDEN_CDC VALUE,CDC.DESCRIZIONE DESCR from CENTRI_DI_COSTO_ASSOCIATI CDC_AS INNER JOIN CENTRI_DI_COSTO CDC ON (CDC.IDEN=CDC_AS.IDEN_CDC)  WHERE CDC_AS.TABELLA_IDEN= :id_tabella and CDC_AS.TABELLA_NOME='PERSONALE' ORDER BY DESCR ASC</SQL>
            <BINDS>
                <BIND id="id_tabella" value="#IDEN#" type="N"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="CMB_CDC_NOT_SEL_PROVENIENZE">
            <SQL>select  CDC.IDEN VALUE,CDC.DESCRIZIONE DESCR from CENTRI_DI_COSTO CDC left outer join CENTRI_DI_COSTO_ASSOCIATI CDC_AS ON (CDC.IDEN=CDC_AS.IDEN_CDC and CDC_AS.TABELLA_IDEN= :id_tabella  and CDC_AS.TABELLA_NOME='PROVENIENZE') where CDC_AS.IDEN is null</SQL>
            <BINDS>
                <BIND id="id_tabella" value="#IDEN#" type="N"></BIND>

            </BINDS>
        </QUERY>
        <QUERY id="CMB_CDC_SEL_PROVENIENZE">
            <SQL>select CDC_AS.IDEN_CDC VALUE,CDC.DESCRIZIONE DESCR from CENTRI_DI_COSTO_ASSOCIATI CDC_AS INNER JOIN CENTRI_DI_COSTO CDC ON (CDC.IDEN=CDC_AS.IDEN_CDC)  WHERE CDC_AS.TABELLA_IDEN= :id_tabella and CDC_AS.TABELLA_NOME='PROVENIENZE'</SQL>
            <BINDS>
                <BIND id="id_tabella" value="#IDEN#" type="N"></BIND>

            </BINDS>
        </QUERY>
        <QUERY id="CMB_MEDICI_SUGGERITORI">
            <SQL>select /*+first_rows(10)*/  T.IDEN VALUE,T.DESCRIZIONE DESCR from TIPI T WHERE T.TIPO='MEDICI_SUGGERITORI'</SQL>
        </QUERY>
        <QUERY id="CMB_MEDICI_PRESCRIVENTI">
            <SQL>select /*+first_rows(10)*/  T.IDEN VALUE,T.DESCRIZIONE DESCR from TIPI T WHERE T.TIPO='MEDICI_PRESCRIVENTI'</SQL>
        </QUERY>
        <QUERY id="CMB_DIRECTORY_REPORT">
            <SQL>select /*+first_rows(100)*/  CDC.IDEN VALUE,CDC.DESCRIZIONE DESCR from CENTRI_DI_COSTO CDC WHERE CDC.ATTIVO=&apos;S&apos;</SQL>
        </QUERY>
        <QUERY id="CMB_GENERICA_ALCOL">
            <SQL>select /*+first_rows(10)*/ codice value, descrizione descr from mmg.mmg_codifiche where tipo_dato = :tipo_dato AND ATTIVO = &apos;S&apos;</SQL>
        </QUERY>
        <QUERY id="CMB_GENERICA_VACCINAZIONI">
            <SQL>select /*+first_rows(10)*/ codice value, descrizione descr from mmg.mmg_codifiche where tipo_dato = &apos;VACCINAZIONE&apos; AND ATTIVO = &apos;S&apos;</SQL>
        </QUERY>
        <QUERY id="CMB_GRUPPO_TIPI">
            <SQL>select  /*+first_rows(100)*/ DISTINCT TIPO  VALUE ,TIPO DESCR  from TIPI</SQL>
        </QUERY>
        <QUERY id="CMB_LINGUE">
            <SQL>select /*+first_rows(10)*/   CODICE_DECODIFICA VALUE,DESCRIZIONE DESCR from TIPI WHERE TIPO=&apos;LINGUA&apos; ORDER BY ORDINE ASC</SQL>
        </QUERY>
        <QUERY id="CMB_METODICA">
            <SQL>select CODICE_DECODIFICA VALUE,DESCRIZIONE  DESCR from TIPI WHERE TIPO = :metodica</SQL>
            <BINDS>
                <BIND id="metodica" value="METODICA" type="V"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="CMB_MODALITA_ACCESSO">
            <SQL>Select /*+first_row(10)*/ IDEN VALUE,DESCRIZIONE DESCR from TIPI where TIPO=&apos;ACCESSO&apos; AND ATTIVO=&apos;S&apos;</SQL>
        </QUERY>
        <QUERY id="CMB_MODALITA_PRESCRITTIVA">
            <SQL>Select /*+first_row(10)*/ IDEN VALUE,DESCRIZIONE DESCR from TIPI where TIPO=&apos;MODALITA_PRESCRITTIVA&apos; AND ATTIVO=&apos;S&apos;</SQL>
        </QUERY>
        <QUERY id="CMB_NOMENCLATORE">
            <SQL>select tbl.descrizione descr,tbl.iden value ,TIPI.PARAMETRI METODICA_DESCR,tbl.*  from table(GESTIONE_RIS_ESAMI.GET_LISTA_NOMENCLATORE(:request)) tbl
                 inner join TIPI on(TIPI.CODICE_DECODIFICA = tbl.METODICA and TIPI.TIPO = 'METODICA')
            </SQL>
            <BINDS>
                <BIND id="request" value="#REQUEST#" type="C"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="CMB_NOMENCLATORE_ATTIVI">
            <SQL>select descrizione descr,iden value from nomenclatore where attivo = :attivo</SQL>
            <BINDS>
                <BIND id="attivo" value="S" type="V"></BIND>
            </BINDS>
        </QUERY>

        <!--<QUERY id="CMB_NOMENCLATORE_SELEZIONATI">
            <SQL>with ARRAY_IDEN_SELEZIONATI as (select to_number(COLUMN_VALUE) IDEN_SELEZIONATI from table(split(:Piden)))
                Select Nomenclatore.iden value, Nomenclatore.descrizione descr, Nomenclatore.*
                From Esami_Dettaglio Inner Join ARRAY_IDEN_SELEZIONATI On (Esami_Dettaglio.Iden = Array_Iden_Selezionati.Iden_Selezionati )
                inner join Nomenclatore on (Esami_Dettaglio.iden_nomenclatore=nomenclatore.iden)
                Order By Nomenclatore.Descrizione Asc</SQL>
            <BINDS>
                <BIND id="Piden" value="#IDEN_ESAME_DETTAGLIO#" type="V"></BIND>
            </BINDS>
        </QUERY>-->
        <QUERY id="CMB_NOMENCLATORE_SELEZIONATI">
            <SQL>with ARRAY_IDEN_SELEZIONATI as (select to_number(regexp_substr(x, '[^,]+', 1, level)) IDEN_SELEZIONATI
                                                 from(select :Piden x from dual)
                                                 connect by level &lt;= length(x) - length(replace(x, ',')) + 1)
                Select Nomenclatore.iden value, Nomenclatore.descrizione descr, Nomenclatore.*
                From Esami_Dettaglio Inner Join ARRAY_IDEN_SELEZIONATI On (Esami_Dettaglio.Iden = Array_Iden_Selezionati.Iden_Selezionati )
                inner join Nomenclatore on (Esami_Dettaglio.iden_nomenclatore=nomenclatore.iden)
                Order By Nomenclatore.Descrizione Asc</SQL>
            <BINDS>
                <BIND id="Piden" value="#IDEN_ESAME_DETTAGLIO#" type="V"></BIND>
            </BINDS>
        </QUERY>

        <QUERY id="CMB_NOTIFICHE_PC">
            <SQL>select  /*+first_rows(100)*/  IP  VALUE ,IP DESCR  from CONFIG$PC WHERE ATTIVO=&apos;S&apos;</SQL>
        </QUERY>
        <QUERY id="CMB_NOTIFICHE_SUONI">
            <SQL>Select /*+first_row(10)*/ CODICE_DECODIFICA VALUE,DESCRIZIONE DESCR from TIPI where TIPO=&apos;SUONO&apos;  AND ATTIVO=&apos;S&apos;  ORDER BY DESCR ASC</SQL>
        </QUERY>
        <QUERY id="CMB_NOTIFICHE_TIPO">
            <SQL>Select /*+first_row(10)*/ CODICE_DECODIFICA VALUE,DESCRIZIONE DESCR from TIPI where TIPO=&apos;TIPO_NOTIFICA&apos;  AND ATTIVO=&apos;S&apos; ORDER BY ORDINE ASC</SQL>
        </QUERY>
        <QUERY id="CMB_NOTIFICHE_TIPO_PERSONALE">
            <SQL>select  /*+first_rows(100)*/  CODICE_DECODIFICA  VALUE ,DESCRIZIONE DESCR  from TIPI WHERE TIPO=&apos;PERSONALE&apos; AND  ATTIVO=&apos;S&apos;</SQL>
        </QUERY>
        <QUERY id="CMB_NOTIFICHE_UTENTI">
            <SQL>select  /*+first_rows(100)*/  USERNAME  VALUE ,USERNAME DESCR  from CONFIG$UTENTI WHERE ATTIVO=&apos;S&apos;</SQL>
        </QUERY>
        <QUERY id="CMB_ONERE">
            <SQL>select  /*+first_rows(100)*/ IDEN  VALUE ,DESCRIZIONE DESCR  from ONERE WHERE ATTIVO=&apos;S&apos;</SQL>
        </QUERY>
        <QUERY id="CMB_PAGINE">
            <SQL>select  /*+first_rows(100)*/ KEY_LEGAME  VALUE ,KEY_LEGAME DESCR  from SDJ.HTML_STRUTTURA_CONFIG WHERE ATTIVO='S' and SITO = :sito
                union
                select  /*+first_rows(100)*/ KEY_LEGAME  VALUE ,KEY_LEGAME DESCR  from SDJ.HTML_STRUTTURA_CONFIG WHERE ATTIVO='S' and SITO = 'ALL'
            </SQL>
            <BINDS>
                <BIND id="sito" value="#SITO#" type="V"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="CMB_PERSONALE">
            <SQL>select /*+first_rows(100)*/   IDEN VALUE,DESCRIZIONE DESCR from PERSONALE WHERE ATTIVO ='S' ORDER BY DESCR ASC</SQL>
        </QUERY>
        <QUERY id="CMB_RADIOFARMACO">
            <SQL>select /*+first_rows(100)*/  mg.IDEN VALUE,mg.DESCRIZIONE DESCR from polaris_dati.magazzini_articoli mg where stato_fisico=&apos;LIQUIDO&apos; and tracciante=&apos;S&apos; and attivo=&apos;S&apos;</SQL>
        </QUERY>
        <QUERY id="CMB_SALA_AREA">
            <SQL>select /*+first_rows(10)*/   S.IDEN  || &apos;/&apos; || A.IDEN VALUE,S.DESCRIZIONE || &apos;/&apos; || A.DESCRIZIONE DESCR ,CDC.IDEN IDEN_CDC,CDC.DESCRIZIONE DESCRIZIONE_CDC
                from SALA_AREA S
                inner join SALA_AREA A on (S.IDEN = A.IDEN_PADRE AND S.TIPO =&apos;SALA&apos; AND A.TIPO=&apos;AREA&apos; AND A.ATTIVO=&apos;S&apos; AND S.ATTIVO=&apos;S&apos; AND A.IDEN_PADRE is not null)
                inner join CENTRI_DI_COSTO_ASSOCIATI CDC_A on(CDC_A.TABELLA_IDEN=S.IDEN AND CDC_A.TABELLA_NOME=&apos;SALA_AREA&apos; and CDC_A.ATTIVO=&apos;S&apos;)
                inner join CENTRI_DI_COSTO CDC on (CDC_A.IDEN_CDC=CDC.IDEN AND CDC.ATTIVO=&apos;S&apos;)
                ORDER BY DESCR ASC</SQL>
        </QUERY>
        <QUERY id="CMB_SCHEDA_ESAME_NOMENCLATORE">
            <!--  colpa di jack  -->
            <SQL>select /*+first_rows(10)*/  T2.IDEN VALUE, T2.DESCRIZIONE DESCR from ESAMI_DETTAGLIO T1 inner join NOMENCLATORE T2 on (T2.IDEN = T1.IDEN_NOMENCLATORE and T1.DELETED = &apos;N&apos;) where T1.IDEN_TESTATA = :iden_testata and nvl(:ASSOCIA_ESAME, &apos;N&apos;) = &apos;N&apos;</SQL>
            <BINDS>
                <BIND id="iden_testata" value="#IDEN_TESTATA#" type="N"></BIND>
                <BIND id="ASSOCIA_ESAME" value="#ASSOCIA_ESAME#" type="V"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="CMB_SEGRETERIA_DOCUMENTAZIONE">
            <SQL><![CDATA[SELECT /*+first_rows(10)*/ CODICE_DECODIFICA VALUE, DESCRIZIONE DESCR FROM TIPI WHERE TIPO='SEGRETERIA_DOCUMENTAZIONE' order by ORDINE]]></SQL>
        </QUERY>
        <QUERY id="CMB_SEGRETERIA_FORMATO">
            <SQL>SELECT /*+first_rows(10)*/ CODICE_DECODIFICA VALUE, DESCRIZIONE DESCR FROM TIPI WHERE TIPO=&apos;SEGRETERIA_FORMATO&apos;</SQL>
        </QUERY>
        <QUERY id="CMB_SEGRETERIA_PROTOCOLLO_STAMPA">
            <SQL>SELECT /*+first_rows(10)*/ CODICE_DECODIFICA VALUE, DESCRIZIONE DESCR FROM TIPI WHERE TIPO=&apos;SEGRETERIA_PROTOCOLLO_STAMPA&apos;</SQL>
        </QUERY>
        <QUERY id="CMB_SEGRETERIA_STATO_CARTELLA">
            <SQL>SELECT /*+first_rows(10)*/ CODICE_DECODIFICA VALUE, DESCRIZIONE DESCR FROM TIPI WHERE TIPO=&apos;SEGRETERIA_STATO_CARTELLA&apos;</SQL>
        </QUERY>
        <QUERY id="CMB_SEGRETERIA_SUPPORTO_EROGAZIONE">
            <SQL><![CDATA[SELECT /*+first_rows(10)*/ CODICE_DECODIFICA VALUE, DESCRIZIONE DESCR FROM TIPI WHERE TIPO='SEGRETERIA_SUPPORTO_EROGAZIONE' order by ORDINE]]></SQL>
        </QUERY>
        <QUERY id="CMB_SESSO">
            <SQL>select /*+first_rows(10)*/ &apos;Sesso 1&apos; OPTGROUP, &apos;M&apos; VALUE, &apos;lblMaschio&apos; DESCR from dual union all select /*+first_rows(10)*/ &apos;Sesso 1&apos; OPTGROUP, &apos;F&apos; VALUE, &apos;lblFemmina&apos; DESCR from dual union all select /*+first_rows(10)*/ &apos;Sesso 1&apos; OPTGROUP, &apos;U&apos; VALUE, &apos;lblSconosciuto&apos; DESCR from dual union all select /*+first_row(10)*/ &apos;Sesso 2&apos; OPTGROUP, &apos;M2&apos; VALUE, &apos;lblMaschio&apos; DESCR from dual union all select /*+first_row(10)*/ &apos;Sesso 2&apos; OPTGROUP, &apos;F2&apos; VALUE, &apos;lblFemmina&apos; DESCR from dual union all select /*+first_rows(10)*/ &apos;Sesso 2&apos; OPTGROUP, &apos;U2&apos; VALUE, &apos;lblSconosciuto&apos; DESCR from dual</SQL>
        </QUERY>
        <QUERY id="CMB_STATO_PAZIENTE">
            <SQL>select  /*+first_rows(10)*/ IDEN  VALUE ,DESCRIZIONE DESCR  from STATO_PAZIENTE WHERE ATTIVO=&apos;S&apos;</SQL>
        </QUERY>
        <QUERY id="CMB_STATO_REFERTAZIONE">
            <SQL>select CODICE VALUE,DESCRIZIONE DESCR from STATO_ESAME</SQL>
            <BINDS>
                <BIND id="min_codice" value="0" type="N"></BIND>
                <BIND id="max_codice" value="12" type="N"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="CMB_SUONI_WK">
            <SQL>Select /*+first_row(10)*/ CODICE_DECODIFICA VALUE,DESCRIZIONE DESCR from TIPI where TIPO=&apos;SUONO&apos;  AND ATTIVO=&apos;S&apos;  ORDER BY DESCR ASC</SQL>
        </QUERY>
        <QUERY id="CMB_TIPOLOGIA_DOCUMENTO">
            <SQL>select /*first_rows(10)*/ DESCRIZIONE DESCR,DESCRIZIONE VALUE  FROM TIPI WHERE TIPO=:tipo AND ATTIVO =:attivo ORDER BY ORDINE</SQL>
            <BINDS>
                <BIND id="tipo" value="TIPOLOGIA_DOCUMENTO" type="V"></BIND>
                <BIND id="attivo" value="S" type="V"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="CMB_TIPO_DAY_SERVICE">
            <SQL>Select /*+first_row(10)*/ IDEN VALUE,DESCRIZIONE DESCR from TIPI where TIPO=&apos;DAY_SERVICE&apos;  AND ATTIVO=&apos;S&apos;</SQL>
        </QUERY>
        <QUERY id="CMB_TIPO_VOCALE">
            <SQL>select /*+first_rows(10)*/   CODICE_DECODIFICA VALUE,DESCRIZIONE DESCR from TIPI WHERE TIPO=&apos;VOCALE&apos;   union all SELECT &apos;NULL&apos; VALUE,&apos;NESSUNO&apos; DESCR FROM DUAL ORDER BY DESCR ASC</SQL>
        </QUERY>
        <QUERY id="CMB_CONTATTI_PAZIENTE">
            <SQL>select C.Codice || ' - ' ||  p.descrizione || ' - ' || to_char(c.data_inizio,'DD/MM/YYYY') Descr,C.Iden Value,p.iden iden_provenienza,p.descrizione descr_provenienza From Adt$contatti C Inner Join Adt$tipi At On (At.Iden=C.Stato And At.Tipo ='STATO') inner join adt$contatti_giuridici cg on (c.iden=cg.iden_contatto and cg.attivo='S') inner join provenienze p on (p.iden=cg.iden_provenienza) Where C.Iden_Anagrafica = get_iden_anag_contatto(:iden_anagrafica,:iden_testata) And At.Codice_Decodifica='ADMITTED'
                Union
                Select C1.Codice || ' - ' || p1.descrizione || ' - ' || to_char(c1.data_inizio,'DD/MM/YYYY') Descr,C1.Iden Value,p1.iden iden_provenienza,p1.descrizione descr_provenienza From Adt$contatti C1 Inner Join esami_testata et On (C1.iden=et.iden_contatto)  inner join adt$contatti_giuridici cg1 on (c1.iden=cg1.iden_contatto and cg1.attivo='S') inner join provenienze p1 on (p1.iden=cg1.iden_provenienza) where et.iden=nvl(:iden_testata,0)  order by Descr desc
            </SQL>
            <BINDS>
                <BIND id="iden_anagrafica" value="#IDEN_ANAGRAFICA#" type="N"></BIND>
                <BIND id="iden_testata" value="#IDEN_TESTATA#" type="N"></BIND>
            </BINDS>
        </QUERY>

        <QUERY id="CMB_ALL_CONTATTI_PAZIENTE">
            <SQL>
                Select C.Codice || ' - ' ||  p.descrizione || ' - ' || to_char(c.data_inizio,'DD/MM/YYYY') Descr,C.Iden Value,p.iden iden_provenienza,p.descrizione descr_provenienza,p.tipo_provenienza From Adt$contatti C Inner Join Adt$tipi At On (At.Iden=C.Stato And At.Tipo ='STATO' and at.ASSIGNING_AUTHORITY_AREA='ADT') inner join adt$contatti_giuridici cg on (c.iden=cg.iden_contatto and cg.attivo='S') inner join provenienze p on (p.iden=cg.iden_provenienza) Where C.Iden_Anagrafica = :iden_anagrafica
            </SQL>
            <BINDS>
                <BIND id="iden_anagrafica" value="#IDEN_ANAGRAFICA#" type="N"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="CONSOLE">
            <SQL><![CDATA[
                with LIST_ESA as (select to_number(regexp_substr(x, '[^,]+', 1, level)) ID
                                  from(select :iden_testata x from dual)
                                  connect by level <= length(x) - length(replace(x, ',')) + 1)
                select /*+first_row(1)*/
                distinct ANAG.IDEN IDEN_ANAGRAFICA,
                anag.cognome || ' ' || anag.nome || ' ' || datetimeconverter(anag.data_nascita, 'yyyyMMdd', 'dd/MM/yyyy') || ' Sesso:' || anag.sesso || get_info_anagrafica(anag.iden)  paziente,
                ANAG.DATA_NASCITA,
                et.iden_cdc IDEN_CDC_REF,
                TO_CHAR(sysdate,'DD/MM/YYYY') DATA_REFERTO_FORMAT,
                concat_fields('select nomenclatore.descrizione from esami_dettaglio ed inner join nomenclatore on (ed.iden_nomenclatore=nomenclatore.iden) where ed.IDEN IN ('|| :iden_dettaglio ||')  and deleted=''N''',',','<br />') TESTO_HTML,
                concat_fields('select nomenclatore.descrizione from esami_dettaglio ed inner join nomenclatore on (ed.iden_nomenclatore=nomenclatore.iden) where ed.IDEN IN ('|| :iden_dettaglio ||')  and deleted=''N''',',',chr(10) || chr(13)) TESTO,
                concat_fields('select nomenclatore.descrizione from esami_dettaglio ed inner join nomenclatore on (ed.iden_nomenclatore=nomenclatore.iden) where ed.IDEN IN ('|| :iden_dettaglio ||')  and deleted=''N''',',',chr(10) || chr(13)) TESTO_RTF,
                concat_fields('select nomenclatore.metodica from esami_dettaglio ed inner join nomenclatore on (ed.iden_nomenclatore=nomenclatore.iden) where ed.IDEN IN ('|| :iden_dettaglio ||')  and deleted=''N''',',') METODICA,
                (SELECT /*+first_rows(1)*/ DISTINCT chr(123) || 'key_legame:'''||KEY_LEGAME||''',parametri:'||PARAMETRI||',procedura:'''||PROCEDURA_SAVE|| '''' || chr(125) FROM CONFIG$SCHEDE_REFERTAZIONE WHERE IDEN_CDC IN (SELECT TO_NUMBER(COLUMN_VALUE) FROM TABLE(SPLIT(:iden_cdc))) AND IDEN_NOMENCLATORE IN (SELECT TO_NUMBER(COLUMN_VALUE) FROM TABLE(SPLIT(:iden_nomenclatore))) and attivo = 'S') SCHEDA,
                et.quadro_clinico Quadro,
                et.quesito_clinico Quesito,
                et.note Note,
                et.autorizza_mdc mdc,
                'N' sospeso,
                :iden_per utente_modifica,
                :iden_nomenclatore IDEN_NOMENCLATORE,
                (select max(stato) from esami_dettaglio where iden IN (select to_number(regexp_substr(x, '[^,]+', 1, level)) ID from(select :iden_dettaglio x from dual) connect by level <= length(x) - length(replace(x, ',')) + 1) ) max_stato,
                '' IDEN_SPECIALIZZANDO, '' SPECIALIZZANDO, '' IDEN_SECONDO_MEDICO, '' SECONDO_MEDICO,
                ed.iden_medico_refertante IDEN_PRIMO_MEDICO,
                get_descrizione_personale(ed.iden_medico_refertante) PRIMO_MEDICO,
                '' IDEN_VERSIONE_REFERTO,
                (select listagg(iden, ',') within group (order by iden) from esami_dettaglio where iden_testata IN (select column_value from table(split(:iden_testata))) and deleted = 'N' and iden_referto is not null ) iden_dettagli,
                get_descrizione_personale_eoc(et.iden_medico_inviante,'S',et.IDEN_INDIRIZZO_MEDICO_INVIANTE) medico_inviante,
                get_descrizione_operatori(:iden_testata,'IDEN_TECNICO_1') tecnici_esecutori ,
                get_descrizione_operatori(:iden_testata,'IDEN_TECNICO_2') tecnici_esecutori_2 ,
                get_descrizione_operatori(:iden_testata,'/E/I/S[@V="30"]/@U','S') accettazione_operatori,
	         PRO.descrizione PROVENIENZA
                FROM ESAMI_DETTAGLIO ED
                INNER JOIN ESAMI_TESTATA ET ON (ET.IDEN = ED.IDEN_TESTATA)
                inner join LIST_ESA LE on (ET.IDEN = LE.ID)
                INNER JOIN ANAGRAFICA ANAG ON (ANAG.IDEN = ET.IDEN_ANAGRAFICA)
                INNER JOIN PROVENIENZE PRO ON (PRO.IDEN = ET.IDEN_PROVENIENZA)
                WHERE IDEN_TESTATA IN (select column_value from table(split(:iden_testata)))
                and ed.iden_referto is null and rownum <= 1
				]]></SQL>
            <BINDS>
                <BIND id="iden_per" value="#IDEN_PER#" type="N"></BIND>
                <BIND id="iden_testata" value="#IDEN_TESTATA#" type="V"></BIND>
                <BIND id="iden_dettaglio" value="#IDEN_DETTAGLIO#" type="V"></BIND>
                <BIND id="iden_nomenclatore" value="#IDEN_NOMENCLATORE#" type="V"></BIND>
                <BIND id="sito" value="#SITO#" type="V"></BIND>
                <BIND id="iden_cdc" value="#IDEN_CDC#" type="V"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="CONSOLE_ANAGRAFICA">
            <SQL>select /*+first_rows(1)*/ ANAG.IDEN IDEN_ANAGRAFICA, ANAG.DATA_NASCITA, ANAG.COGNOME || ' ' || ANAG.NOME || ' ' || DATETIMECONVERTER(ANAG.DATA_NASCITA, 'yyyyMMdd', 'dd/MM/yyyy') PAZIENTE, AGEINYEARS(ANAG.DATA_NASCITA) ETA_ANNI, AGEINMONTHS(ANAG.DATA_NASCITA) ETA_MESI from ANAGRAFICA ANAG where iden = :iden_anagrafica</SQL>
            <BINDS>
                <BIND id="iden_anagrafica" value="#IDEN_ANAGRAFICA#" type="N"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="CONSOLE_DOC_ALLEGATI">
            <SQL>
                with LIST_ESA as (select to_number(regexp_substr(x, '[^,]+', 1, level)) ID
                                  from(select :iden_testata x from dual)
                                  connect by level &lt;= length(x) - length(replace(x, ',')) + 1)
                select /*+first_rows(1)*/ nome_file, to_char(data_inserimento,'YYYYMMDD') data_inserimento, mime_type
                from documenti_allegati da inner join LIST_ESA le on (da.IDEN_ESAMI_TESTATA = le.ID)
            </SQL>
            <BINDS>
                <BIND id="iden_testata" value="#IDEN_TESTATA#" type="V"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="CONSOLE_INFO_ESAME">
            <SQL>
                with LIST_ESA as (select to_number(regexp_substr(x, '[^,]+', 1, level)) ID
                                  from(select :iden_testata x from dual)
                                  connect by level &lt;= length(x) - length(replace(x, ',')) + 1)
                select /*+first_rows(1)*/ iden, quadro_clinico ieQuadro,quesito_clinico ieQuesito,note ieNote,autorizza_mdc ieMdc
                from esami_testata et inner join LIST_ESA le on (et.iden = le.id)
            </SQL>
            <BINDS>
                <BIND id="iden_testata" value="#IDEN_TESTATA#" type="V"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="CONSOLE_LISTA_ESAMI">
            <SQL>
                with LIST_ESA as (select to_number(regexp_substr(x, '[^,]+', 1, level)) ID
                                  from(select :iden_testata x from dual)
                                  connect by level &lt;= length(x) - length(replace(x, ',')) + 1)
                SELECT distinct /*+first_row(10)*/ ED.IDEN ID, ED.IDEN_TESTATA IDEN_TESTATA, N.DESCRIZIONE DESCR, ed.id_dicom
                FROM ESAMI_DETTAGLIO ED inner join LIST_ESA LE on (ED.IDEN_TESTATA = LE.ID)
                INNER JOIN NOMENCLATORE N ON (N.IDEN = ED.IDEN_NOMENCLATORE)
                where deleted = 'N'
            </SQL>
            <BINDS>
                <BIND id="iden_testata" value="#IDEN_TESTATA#" type="V"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="CONSOLE_REFERTO">
            <SQL><![CDATA[
                with ver_ref as (select /*+first_rows(1)*/ * from table(gestione_ris_referti.get_ultima_versione(:iden_referto)))
                select /*+first_rows(1)*/
                r.iden,
                r.iden_cdc iden_cdc_ref,
                r.data_referto,
                to_char(to_date (r.data_referto,'YYYYMMDD'),'DD/MM/YYYY') || ' h' || r.ora_referto data_referto_format,
                rt.testo,
                /* il replace &lt; con &lt;spazio, serve per bugfix di tinymce */
                regexp_replace(regexp_replace(nvl(rt.testo_html, dbms_xmlgen.convert(rt.testo,0)), '&amp;lt;', '&amp;lt; '), CHR(13) || CHR(10), '&lt;br /&gt;') testo_html,
                rt.testo_rtf,
                r.iden_primo_medico,
                get_descrizione_personale_eoc(r.iden_primo_medico) primo_medico,
                r.iden_secondo_medico,
                get_descrizione_personale_eoc(r.iden_secondo_medico) secondo_medico,
                r.iden_specializzando,
                get_descrizione_personale_eoc(r.iden_specializzando) specializzando,
                ver_ref.iden iden_versione_referto,
                r.sospeso,
                r.utente_modifica,
                (select wm_concat(iden) from esami_dettaglio where iden_referto = :iden_referto and deleted = 'N') iden_dettagli,
                (select wm_concat(tag)  from referti_hashtags where iden_referto = :iden_referto and deleted='N') hashtags,
                (select max(stato) from esami_dettaglio where iden_referto = :iden_referto and deleted = 'N') max_stato,
                (select /*+first_rows(1)*/ anag.cognome || ' ' || anag.nome || ' ' || datetimeconverter(anag.data_nascita, 'yyyyMMdd', 'dd/MM/yyyy') || ' Sesso:' || anag.sesso || get_info_anagrafica(:iden_anagrafica) from anagrafica anag where iden = :iden_anagrafica) paziente,
                (select /*+first_rows(1)*/ anag.data_nascita from anagrafica anag where iden = :iden_anagrafica) data_nascita,
                (select /*+first_rows(1)*/ distinct chr(123) || 'key_legame:'''||key_legame||''',parametri:'||parametri||',procedura:'''||procedura_save|| '''' ||chr(125)  from config$schede_refertazione where iden_cdc in (select to_number(column_value) from table(split(:iden_cdc))) and iden_nomenclatore in (select to_number(column_value) from table(split(:iden_nomenclatore))) and attivo = 'S') scheda,
                (select /*+first_rows(1)*/ quadro_clinico from esami_testata where IDEN IN (select to_number(regexp_substr(x, '[^,]+', 1, level)) ID from(select :iden_testata x from dual) connect by level <= length(x) - length(replace(x, ',')) + 1) and rownum <= 1) QUADRO,
                (select /*+first_rows(1)*/ quesito_clinico from esami_testata where IDEN IN (select to_number(regexp_substr(x, '[^,]+', 1, level)) ID from(select :iden_testata x from dual) connect by level <= length(x) - length(replace(x, ',')) + 1) and rownum <= 1) QUESITO,
                (select /*+first_rows(1)*/ note from esami_testata where iden in (select to_number(regexp_substr(x, '[^,]+', 1, level)) ID from(select :iden_testata x from dual) connect by level <= length(x) - length(replace(x, ',')) + 1) and rownum <= 1) note,
                (select /*+first_rows(1)*/ autorizza_mdc from esami_testata where iden in (select to_number(regexp_substr(x, '[^,]+', 1, level)) ID from(select :iden_testata x from dual) connect by level <= length(x) - length(replace(x, ',')) + 1) and rownum <= 1) mdc,
               (select /*+first_rows(1)*/ get_descrizione_personale_eoc(iden_medico_inviante,'S',IDEN_INDIRIZZO_MEDICO_INVIANTE) from esami_testata where iden=to_number(regexp_substr(:iden_testata, '[^,]+', 1, 1))) medico_inviante,
                (select /*+first_rows(1)*/ descrizione from provenienze where iden = (select /*+first_rows(1)*/ iden_provenienza from esami_testata where iden in (select to_number(regexp_substr(x, '[^,]+', 1, level)) ID from(select :iden_testata x from dual) connect by level <= length(x) - length(replace(x, ',')) + 1) and rownum <= 1)) PROVENIENZA,
                concat_fields('select nomenclatore.metodica from esami_dettaglio ed inner join nomenclatore on (ed.iden_nomenclatore=nomenclatore.iden) where ed.IDEN_REFERTO IN ('|| :iden_referto ||')  and deleted=''N''',',') METODICA,
                get_descrizione_operatori(:iden_testata,'IDEN_TECNICO_1') tecnici_esecutori,
                get_descrizione_operatori(:iden_testata,'IDEN_TECNICO_2') tecnici_esecutori_2,
                get_descrizione_operatori(:iden_testata,'/E/I/S[@V="30"]/@U','S') accettazione_operatori,
                get_descrizione_operatori(:iden_testata,'IDEN_MEDICO_REFERTANTE') medico_refertante
                from referti r
                inner join referti_testo rt on (r.iden = rt.iden_referto)
                left outer join ver_ref on (ver_ref.iden_referto = r.iden)
                where r.iden = :iden_referto
                ]]></SQL>
            <BINDS>
                <BIND id="iden_referto" value="#IDEN_REFERTO#" type="N"></BIND>
                <BIND id="iden_testata" value="#IDEN_TESTATA#" type="V"></BIND>
                <BIND id="iden_nomenclatore" value="#IDEN_NOMENCLATORE#" type="V"></BIND>
                <BIND id="sito" value="#SITO#" type="V"></BIND>
                <BIND id="iden_cdc" value="#IDEN_CDC#" type="V"></BIND>
                <BIND id="iden_anagrafica" value="#IDEN_ANAGRAFICA#" type="N"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="CONSOLE_SCHEDA_REFERTAZIONE">
            <SQL>select /*+first_rows(1)*/ distinct CHR(123) || 'key_legame:'''||KEY_LEGAME||''',parametri:'||PARAMETRI||',procedura:'||PROCEDURA_SAVE|| CHR(125) SCHEDA from CONFIG$SCHEDE_REFERTAZIONE WHERE IDEN_CDC IN (SELECT TO_NUMBER(COLUMN_VALUE) FROM TABLE(SPLIT(:iden_cdc))) AND IDEN_NOMENCLATORE IN (SELECT TO_NUMBER(COLUMN_VALUE) FROM TABLE(SPLIT(:iden_nomenclatore)))</SQL>
        </QUERY>
        <QUERY id="MAGAZZINI_SALE_ASSOCIATE">
            <SQL>
                select /*+first_row(10)*/ sa.iden value,sa.descrizione descr
                from sala_area sa
                inner join gruppo_associazione ga on (ga.TABELLA_NOME_EROGANTE = 'SALA_AREA' and ga.TABELLA_IDEN_EROGANTE = sa.iden
                and ga.TABELLA_NOME_NOMENCLATORE = 'MAGAZZINI' and ga.TABELLA_IDEN_NOMENCLATORE = :iden_magazzino and ga.attivo = 'S')
                where sa.attivo = 'S'
                order by sa.descrizione
            </SQL>
            <BINDS>
                <BIND id="iden_magazzino" value="#IDEN#" type="N"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="MAGAZZINI_SALE_ASSOCIABILI">
            <SQL>select /*+first_row(10)*/ sa.iden value,sa.descrizione descr
                from sala_area sa
                left outer join gruppo_associazione ga on (ga.TABELLA_NOME_EROGANTE = 'SALA_AREA' and ga.TABELLA_IDEN_EROGANTE = sa.iden
                and ga.TABELLA_NOME_NOMENCLATORE = 'MAGAZZINI' and ga.TABELLA_IDEN_NOMENCLATORE = :iden_magazzino and ga.attivo = 'S')
                where ga.TABELLA_IDEN_EROGANTE is null and sa.attivo = 'S'
                order by sa.descrizione
            </SQL>
            <BINDS>
                <BIND id="iden_magazzino" value="#IDEN#" type="N"></BIND>
            </BINDS>
        </QUERY>
       <!-- <QUERY id="PARAMS_LIST_GROUP">
            <SQL>select /*+first_rows(100)*/  DISTINCT ID_GRUPPO VALUE,ID_GRUPPO DESCR FROM CONFIG$PARAMETRI WHERE GRUPPO = :gruppo and ID_GRUPPO NOT IN (
                SELECT ID_GRUPPO FROM CONFIG$PARAMETRI_GRUPPO WHERE GRUPPO = :gruppo AND ID = :to_config) ORDER BY ID_GRUPPO</SQL>
            <BINDS>
                <BIND id="gruppo" value="#GRUPPO#" type="V"></BIND>
                <BIND id="to_config" value="#TO_CONFIG#" type="V"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="PARAMS_LIST_PARAMS_GLOBAL">
            <SQL>SELECT /*+first_rows(100)*/ IDEN VALUE ,NOME DESCR FROM  CONFIG$PARAMETRI WHERE ID_GRUPPO = :gruppo and SITO= :sito
                union all
                SELECT /*+first_rows(100)*/ IDEN VALUE ,NOME DESCR FROM  CONFIG$PARAMETRI WHERE ID_GRUPPO = :gruppo and SITO= 'ALL'
            </SQL>
            <BINDS>
                <BIND id="gruppo" value="#GRUPPO#" type="V"></BIND>
                <BIND id="sito" value="#SITO#" type="V"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="PARAMS_LIST_PARAMS_GROUP">
            <SQL>SELECT /*+first_rows(100)*/ ID_GRUPPO VALUE ,ID_GRUPPO DESCR FROM  CONFIG$PARAMETRI_GRUPPO WHERE GRUPPO = :gruppo AND ID = :to_config</SQL>
            <BINDS>
                <BIND id="gruppo" value="#GRUPPO#" type="V"></BIND>
                <BIND id="to_config" value="#TO_CONFIG#" type="V"></BIND>
            </BINDS>
        </QUERY> -->
        <QUERY id="Q_ASSOCIAZIONE_AREA_AGENDA">
            <SQL>select /*+first_rows(1)*/
                &apos;ASSOCIAZIONE AGENDE PER L&apos;&apos;AREA &apos; || DESCRIZIONE AS TITOLO
                FROM SALA_AREA WHERE IDEN = :iden</SQL>
            <BINDS>
                <BIND id="iden" value="#IDEN#" type="N"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="Q_ASSOCIAZIONE_AREA_ESAME">
            <SQL>select /*+first_rows(1)*/
                &apos;ASSOCIAZIONE ESAMI PER L&apos;&apos;AREA &apos; || DESCRIZIONE AS TITOLO
                FROM SALA_AREA WHERE IDEN = :iden</SQL>
            <BINDS>
                <BIND id="iden" value="#IDEN#" type="N"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="Q_CIS_STRESS_TEST">
            <SQL>select /*+first_rows(10)*/ tab.CONTENUTO.getClobVal() CONTENUTO from cardio$cardio_schede_xml tab where tab.IDEN =:iden</SQL>
            <BINDS>
                <BIND id="iden" value="#IDEN#" type="N"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="Q_CMB_MAGAZZINI">
            <SQL>select -1 VALUE , &apos;&apos; DESCR FROM DUAL UNION ALL select IDEN VALUE,DESCRIZIONE DESCR from MAGAZZINO$MAGAZZINI M where attivo=&apos;S&apos;</SQL>
        </QUERY>
        <QUERY id="Q_CONSOLE_CDC_PER">
            <SQL>SELECT  /*+first_rows(1)*/ CDC.IDEN VALUE, CDC.DESCRIZIONE DESCR FROM CENTRI_DI_COSTO_ASSOCIATI CA INNER JOIN CENTRI_DI_COSTO CDC ON (CDC.IDEN = CA.IDEN_CDC) where CA.TABELLA_NOME = 'PERSONALE' and tabella_iden = :iden_per</SQL>
            <BINDS>
                <BIND id="iden_per" value="#IDEN_PER#" type="N"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="Q_CONSULTA_PRENOTAZIONE">
            <SQL>select /*+first_rows(1)*/ 1 VALUE from DUAL</SQL>
        </QUERY>
        <QUERY id="Q_DATI_TECNICI">
            <SQL>select /*+first_rows(1)*/ COGNOME || ' ' || NOME || ' ' || TO_CHAR(TO_DATE(DATA_NASCITA,'yyyyMMdd'),'dd/MM/yyyy') AS PAZIENTE from ANAGRAFICA where iden = :iden_anagrafica</SQL>
            <BINDS>
                <BIND id="iden_anagrafica" value="#IDEN_ANAG#" type="N"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="Q_EMPTY">
            <SQL>select null VALUE, null DESCR from dual</SQL>
        </QUERY>
        <QUERY id="Q_ESTRAZIONI_SALVATE">
            <SQL>
                SELECT ID_FILTRO VALUE, ID_FILTRO_PERSONALE AS DESCR, LISTAGG(CODICE_VARCHAR,'|') WITHIN GROUP (ORDER BY IDEN) CAMPI FROM FILTRI WHERE GRUPPO_FILTRI = 'FILTRO_STATISTICHE_USER_DEFINED_' || :id_statistica AND USERNAME = :username GROUP BY (ID_FILTRO_PERSONALE,ID_FILTRO)
            </SQL>
            <BINDS>
                <BIND id="username" value="#USERNAME#" type="V"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="Q_FILL_COMBO">
            <SQL>select /*+first_row(10)*/ DESCRIZIONE AS DESCR, CODICE_DECODIFICA AS VALUE FROM TIPI WHERE  attivo=&apos;S&apos; {and 1=1} order by ordine</SQL>
        </QUERY>
        <QUERY id="Q_FILL_RADIO">
            <SQL>select /*+first_row(10)*/ DESCRIZIONE AS DESCR, CODICE_DECODIFICA AS VALUE FROM TIPI WHERE  attivo=&apos;S&apos; {and 1=1} order by ordine</SQL>
        </QUERY>
        <QUERY id="Q_FILTRO_CDC">
            <SQL>select /*+first_rows(10)*/ cdc.iden value, cdc.descrizione descr
                from config$utenti u
                inner join personale p on (p.iden = u.iden_per)
                inner join centri_di_costo_associati cdcass on (cdcass.tabella_nome = 'PERSONALE' and cdcass.tabella_iden = p.iden and cdcass.sito = :sito)
                inner join centri_di_costo cdc on (cdc.iden = cdcass.iden_cdc and cdc.attivo = 'S') where username = :username</SQL>
            <BINDS>
                <BIND id="sito" value="#SITO#" type="V"></BIND>
                <BIND id="username" value="#USERNAME#" type="V"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="Q_FILTRO_STATO_FATTURAZIONE">
            <SQL>
                Select 'In Attesa di Invio in Fatturazione' descr, '2' value from dual
                union all
                Select 'Non Fatturato' descr, '3' value from dual
                union all
                Select 'Fatturato con Errore' descr, '4' value from dual
                union all
                Select 'Fatturato correttamente' descr, '1' value from dual
            </SQL>

        </QUERY>
        <QUERY id="Q_FILTRO_CDC_CONSULTA">
            <SQL>select /*+first_rows(10)*/ cdc.iden value, cdc.descrizione descr
                from config$utenti u
                inner join personale p on (p.iden = u.iden_per)
                inner join centri_di_costo_associati cdcass on (cdcass.tabella_nome = 'PERSONALE' and cdcass.tabella_iden = p.iden and cdcass.attivo = 'S' and (cdcass.sito = :sito or cdcass.sito = 'ALL'))
                inner join centri_di_costo cdc on (cdc.iden = cdcass.iden_cdc and cdc.attivo = 'S') where username = :username</SQL>
            <BINDS>
                <BIND id="username" value="#USERNAME#" type="V"></BIND>
                <BIND id="sito" value="#SITO#" type="V"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="Q_FILTRO_MN_ESAME">
            <SQL>select /*+first_rows(10)*/ iden value,descrizione descr from polaris_dati.nomenclatore</SQL>
        </QUERY>
        <QUERY id="Q_FILTRO_PRENOTAZIONE_AREE">
            <SQL>select /*+first_row(10)*/  AR.IDEN value, AR.DESCRIZIONE DESCR from SALA_AREA AR inner join FILTRI F on F.CODICE_NUMBER = AR.IDEN_PADRE where F.ID_FILTRO = &apos;FILTRO_SALE_PRENOTAZIONE&apos; and USERNAME = :username and AR.ATTIVO = &apos;S&apos; and AR.TIPO=&apos;AREA&apos;  order by AR.DESCRIZIONE</SQL>
            <BINDS>
                <BIND id="username" value="#USERNAME#" type="V"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="Q_FILTRO_PRENOTAZIONE_SALE">
            <SQL>select /*+first_row(10)*/  SA.IDEN value, SA.DESCRIZIONE DESCR from SALA_AREA SA inner join CENTRI_DI_COSTO_ASSOCIATI CDCA on (CDCA.TABELLA_IDEN = SA.IDEN and CDCA.TABELLA_NOME = &apos;SALA_AREA&apos; ) inner join FILTRI F on F.CODICE_NUMBER = CDCA.IDEN_CDC where F.ID_FILTRO = &apos;FILTRO_CDC_PRENOTAZIONE&apos; and USERNAME = :username and SA.ATTIVO = &apos;S&apos; and CDCA.ATTIVO = &apos;S&apos; order by SA.DESCRIZIONE</SQL>
            <BINDS>
                <BIND id="username" value="#USERNAME#" type="V"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="Q_FILTRO_STATO_ESAME">
            <SQL>select /*+first_rows(10)*/ CODICE value, DESCRIZIONE DESCR from STATO_ESAME where FILTRO = &apos;S&apos; and ATTIVO = &apos;S&apos; order by ORDINE</SQL>
        </QUERY>
        <QUERY id="Q_FILTRO_WK_AREE_CONSULTA">
            <SQL>select /*+first_row(10)*/ ar.iden value, ar.descrizione descr
                from sala_area ar
                inner join filtri f on (f.codice_number = ar.iden_padre)
                where f.id_filtro = 'FILTRO_SALE_CONSULTA' and f.sito = :sito and username = :username and ar.attivo = 'S' and ar.tipo = 'AREA' order by AR.DESCRIZIONE</SQL>
            <BINDS>
                <BIND id="username" value="#USERNAME#" type="V"></BIND>
                <BIND id="sito" value="#SITO#" type="V"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="Q_FILTRO_WK_DAY_END_CONSULTA">
            <SQL>select /*+first_rows(1)*/ CODICE_VARCHAR VALUE,CODICE_VARCHAR DESCR FROM FILTRI WHERE ID_FILTRO = &apos;FILTRO_DAY_END_CONSULTA&apos; AND USERNAME = :username</SQL>
            <BINDS>
                <BIND id="username" value="#USERNAME#" type="V"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="Q_FILTRO_WK_DAY_NAME_CONSULTA">
            <SQL>select /*+first_rows(1)*/ CODICE_VARCHAR VALUE FROM FILTRI WHERE ID_FILTRO = &apos;FILTRO_DAY_NAME_CONSULTA&apos; AND USERNAME = :username</SQL>
            <BINDS>
                <BIND id="username" value="#USERNAME#" type="V"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="Q_FILTRO_WK_DAY_START_CONSULTA">
            <SQL>select /*+first_rows(1)*/ CODICE_VARCHAR VALUE FROM FILTRI WHERE ID_FILTRO = &apos;FILTRO_DAY_START_CONSULTA&apos; AND USERNAME = :username</SQL>
            <BINDS>
                <BIND id="username" value="#USERNAME#" type="V"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="Q_FILTRO_WK_MEDICI">
            <SQL>select /*+first_rows(1)*/ -1 VALUE, '' DESCR from DUAL union all
                select /*+first_rows(1)*/ 0 VALUE, 'Tutti' DESCR from DUAL union all
                SELECT VALUE,DESCR FROM
                (select /*+first_row(100)*/ DISTINCT P.IDEN VALUE, P.DESCRIZIONE DESCR
                from PERSONALE P
                inner join centri_di_costo_associati on (centri_di_costo_associati.tabella_iden=P.iden and centri_di_costo_associati.tabella_nome='PERSONALE')
                inner join FILTRI F on (f.codice_number = centri_di_costo_associati.iden_cdc and f.id_filtro = 'FILTRO_CDC_WORKLIST' and f.username=:username)
                where P.TIPO_PERSONALE = 'M' and P.TIPO_MEDICO = 'R' and P.ATTIVO = 'S' ORDER BY DESCR)</SQL>
            <BINDS>
                <BIND id="username" value="#USERNAME#" type="V"></BIND>
            </BINDS>

        </QUERY>
        <QUERY id="Q_FILTRO_WK_METODICHE">
            <SQL>select /*+first_rows(10)*/ CODICE_DECODIFICA VALUE, DESCRIZIONE DESCR from TIPI where TIPO = 'METODICA' and ATTIVO = 'S' order by DESCR</SQL>
        </QUERY>
        <QUERY id="Q_FILTRO_MASTERIZZAZIONI_METODICHE">
            <SQL>select /*+first_rows(10)*/ CODICE_DECODIFICA VALUE, DESCRIZIONE DESCR from TIPI where TIPO = 'METODICA' and ATTIVO = 'S' order by DESCR</SQL>
        </QUERY>
        <QUERY id="Q_FILTRO_MASTERIZZAZIONI_STATI">
            <SQL>select /*+first_rows(10)*/ CODICE_DECODIFICA VALUE, DESCRIZIONE DESCR from TIPI where TIPO = 'STATO_MASTERIZZAZIONE' and ATTIVO = 'S' order by VALUE</SQL>
        </QUERY>
        <QUERY id="Q_FILTRO_WK_MONTH_CONSULTA">
            <SQL>select /*+first_rows(1)*/ CODICE_VARCHAR VALUE FROM FILTRI WHERE ID_FILTRO = &apos;FILTRO_MONTH_CONSULTA&apos; AND USERNAME = :username</SQL>
            <BINDS>
                <BIND id="username" value="#USERNAME#" type="V"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="Q_FILTRO_WK_PROVENIENZE">
            <SQL>select /*+first_rows(10) index(TPRO IDX_PROVENIENZE_IDEN_ATTIVO)*/ distinct tpro.iden value,  tpro.descrizione descr
                from provenienze tpro
                inner join centri_di_costo_associati cdca on (cdca.tabella_iden = tpro.iden and cdca.tabella_nome = 'PROVENIENZE' and cdca.sito = :sito and cdca.attivo = 'S')
                inner join filtri f on (f.codice_number = cdca.iden_cdc and F.ATTIVO='S' and F.ID_FILTRO = 'FILTRO_CDC_WORKLIST' and f.sito = :sito)
                where TPRO.ATTIVO = 'S'  and username = :username order by TPRO.DESCRIZIONE</SQL>
            <BINDS>
                <BIND id="username" value="#USERNAME#" type="V"></BIND>
                <BIND id="sito" value="#SITO#" type="V"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="Q_FILTRO_WK_TIPI_PROVENIENZE">
            <SQL>select codice_decodifica value,descrizione descr from tipi where tipo='PROVENIENZA'</SQL>
            <BINDS>
                <BIND id="username" value="#USERNAME#" type="V"></BIND>
                <BIND id="sito" value="#SITO#" type="V"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="Q_FILTRO_MASTERIZZAZIONI_PROVENIENZE">
            <SQL>select /*+first_rows(10) index(TPRO IDX_PROVENIENZE_IDEN_ATTIVO)*/ distinct tpro.iden value,  tpro.descrizione descr
                from provenienze tpro
                inner join centri_di_costo_associati cdca on (cdca.tabella_iden = tpro.iden and cdca.tabella_nome = 'PROVENIENZE' and cdca.sito = :sito and cdca.attivo = 'S')
                inner join filtri f on (f.codice_number = cdca.iden_cdc and F.ATTIVO='S' and F.ID_FILTRO = 'FILTRO_CDC_MASTERIZZAZIONI' and f.sito = :sito)
                where TPRO.ATTIVO = 'S'  and username = :username order by TPRO.DESCRIZIONE</SQL>
            <BINDS>
                <BIND id="username" value="#USERNAME#" type="V"></BIND>
                <BIND id="sito" value="#SITO#" type="V"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="Q_FILTRO_GR_PROVENIENZE"> <!-- [uguale a  Q_FILTRO_WK_PROVENIENZE] Valutare se filtrare solo provenienze interne -->
            <SQL>select /*+first_rows(10) index(TPRO IDX_PROVENIENZE_IDEN_ATTIVO)*/ distinct TPRO.IDEN value,  TPRO.DESCRIZIONE DESCR from PROVENIENZE TPRO inner join CENTRI_DI_COSTO_ASSOCIATI CDCA on (CDCA.TABELLA_IDEN = TPRO.IDEN and CDCA.TABELLA_NOME = 'PROVENIENZE' ) inner join FILTRI F on F.CODICE_NUMBER = CDCA.IDEN_CDC where F.ATTIVO='S' and F.ID_FILTRO = 'F_GRICHIESTE_CDC' and TPRO.ATTIVO = 'S' and CDCA.ATTIVO = 'S' and username = :username order by TPRO.DESCRIZIONE</SQL>
            <BINDS>
                <BIND id="username" value="#USERNAME#" type="V"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="Q_FILTRO_WK_SALE">
            <SQL>select /*+first_row(10)*/  sa.iden value, sa.descrizione descr
                from sala_area sa
                inner join centri_di_costo_associati cdca on (cdca.tabella_iden = sa.iden and cdca.tabella_nome = 'SALA_AREA' and cdca.sito = :sito ) inner join filtri f on  f.codice_number = cdca.iden_cdc
                where F.ATTIVO='S' and  F.ID_FILTRO = 'FILTRO_CDC_WORKLIST' and USERNAME = :username and SA.ATTIVO = 'S' and CDCA.ATTIVO = 'S' order by SA.DESCRIZIONE</SQL>
            <BINDS>
                <BIND id="username" value="#USERNAME#" type="V"></BIND>
                <BIND id="sito" value="#SITO#" type="V"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="Q_FILTRO_WK_SALE_CONSULTA">
            <SQL>select /*+first_rows(10)*/ sa.iden value, sa.descrizione descr,
                (select listagg(iden, ',') WITHIN GROUP (ORDER BY iden) from sala_area where iden_padre = sa.iden) aree
                from sala_area sa
                inner join centri_di_costo_associati cdca on (cdca.tabella_nome = 'SALA_AREA' and cdca.tabella_iden = sa.iden  and CDCA.ATTIVO = 'S' and cdca.sito = :sito )
                inner join filtri f on (f.codice_number = cdca.iden_cdc and f.sito = :sito) inner join centri_di_costo cdc on ( cdc.iden = cdca.iden_cdc )
                where f.id_filtro = 'FILTRO_CDC_CONSULTA' and USERNAME = :username  and SA.ATTIVO = 'S' order by SA.DESCRIZIONE</SQL>
            <BINDS>
                <BIND id="username" value="#USERNAME#" type="V"></BIND>
                <BIND id="sito" value="#SITO#" type="V"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="Q_FILTRO_WK_URGENZE"><SQL>select /*+first_rows(1)*/ '-1' VALUE, 'lblTutte' DESCR from dual union all select /*+first_row(1)*/ '0' VALUE, 'lblNonUrgente' DESCR from dual union all select /*+first_row(1)*/ '1' VALUE, 'lblUrgenteDifferibile' DESCR from dual union all select /*+first_row(1)*/ '2' VALUE, 'lblUrgente' DESCR from dual union all select /*+first_row(1)*/ '3' VALUE, 'lblEmergenza' DESCR from dual</SQL>
        </QUERY>
        <QUERY id="Q_FILTRO_WK_WEEK_CONSULTA">
            <SQL>select /*+first_rows(1)*/ CODICE_VARCHAR VALUE FROM FILTRI WHERE ID_FILTRO = &apos;FILTRO_WEEK_CONSULTA&apos; AND USERNAME = :username</SQL>
            <BINDS>
                <BIND id="username" value="#USERNAME#" type="V"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="Q_INFO_REFERTO_DETTAGLIO">
            <SQL>select /*+first_rows(1)*/
                TO_CHAR(TO_DATE (R.DATA_REFERTO,'YYYYMMDD'),'DD/MM/YYYY') DATA_REFERTO,
                R.DATE_SOSPESO,
                GET_DESCRIZIONE_CDC(ET.IDEN_CDC) CDC,
                RT.TESTO,
                RT.SUGGERIMENTI,
                RT.CONCLUSIONI,
                get_descrizione_personale(extractvalue(ed.stato_cronologia, '/E/I/S[@V="2"]/@U')) || ' - ' || extractvalue(ed.stato_cronologia, '/E/I/S[@V="2"]/@D') inv_ins,
                get_descrizione_personale(extractvalue(ed.stato_cronologia, '/E/U/S[@V="2"]/@U')) || ' - ' || extractvalue(ed.stato_cronologia, '/E/U/S[@V="2"]/@D') inv_MOD,
                get_descrizione_personale(extractvalue(ed.stato_cronologia, '/E/I/S[@V="10"]/@U')) || ' - ' || extractvalue(ed.stato_cronologia, '/E/I/S[@V="10"]/@D') pren_ins,
                get_descrizione_personale(extractvalue(ed.stato_cronologia, '/E/U/S[@V="10"]/@U')) || ' - ' || extractvalue(ed.stato_cronologia, '/E/U/S[@V="10"]/@D') PREN_MOD,
                get_descrizione_personale(extractvalue(ed.stato_cronologia, '/E/I/S[@V="30"]/@U')) || ' - ' || extractvalue(ed.stato_cronologia, '/E/I/S[@V="30"]/@D') acc_ins,
                get_descrizione_personale(extractvalue(ed.stato_cronologia, '/E/U/S[@V="30"]/@U')) || ' - ' || extractvalue(ed.stato_cronologia, '/E/U/S[@V="30"]/@D') acc_MOD,
                get_descrizione_personale(extractvalue(ed.stato_cronologia, '/E/I/S[@V="50"]/@U')) || ' - ' || extractvalue(ed.stato_cronologia, '/E/I/S[@V="50"]/@D') esec_ins,
                nvl(get_descrizione_personale(ed.iden_tecnico_1), ' - ') tecnico,
                nvl(get_descrizione_personale(ed.iden_tecnico_2), ' - ') tecnico_2,
                get_descrizione_personale(extractvalue(ed.stato_cronologia, '/E/U/S[@V="50"]/@U')) || ' - ' || extractvalue(ed.stato_cronologia, '/E/U/S[@V="50"]/@D') esec_MOD,
                get_descrizione_personale(extractvalue(ed.stato_cronologia, '/E/I/S[@V="120"]/@U')) || ' - ' || extractvalue(ed.stato_cronologia, '/E/I/S[@V="120"]/@D') ref_ins,
                get_descrizione_personale(extractvalue(ed.stato_cronologia, '/E/U/S[@V="120"]/@U')) || ' - ' || extractvalue(ed.stato_cronologia, '/E/U/S[@V="120"]/@D') ref_MOD,
                get_descr_esami(:iden_testata) || ' - ' || to_char(to_date (ed.data_esame,'YYYYMMDD'),'DD/MM/YYYY') || ' h' || ed.ora_esame titolo,
                to_char(to_date (ed.data_esame,'YYYYMMDD'),'DD/MM/YYYY') || ' h' || ed.ora_esame data_esame,
                get_descr_esami(:iden_testata) esame,
                get_descrizione_personale(ed.iden_medico_refertante) med_ref,
                get_descrizione_personale(et.iden_medico_inviante) med_inv,
                get_descrizione_personale(ed.iden_medico_esecutore_1) med_esec,
                get_descrizione_personale(ed.iden_infermiere_1) infermiere,
                et.quesito_clinico,
                et.quadro_clinico,
                et.note,
                et.autorizza_mdc,
                prov.descrizione DESCR_PROV,
                ed.iden_referto,et.iden_anagrafica, ed.iden iden_dettaglio, ed.iden_testata, et.iden_provenienza, et.iden_cdc,
                etce.codice_1,etce.codice_2,etce.codice_3,etce.codice_5,etce.codice_4,etce.codice_6 ,etce.codice_10  ,etce.codice_8,prov.descrizione irdDescrProv,
                t.descrizione motivoNonErogato
                from esami_testata et
                inner join esami_dettaglio ed on (et.iden = ed.iden_testata and et.deleted = 'N' and ed.deleted = 'N')
                inner join provenienze prov on (prov.iden = et.iden_provenienza /*and prov.attivo = 'S'*/)
                inner join ESAMI_TESTATA_CODICI_ESTERNI etce on (et.iden = etce.IDEN_ESAME)
                left outer join referti r on (r.iden = ed.iden_referto)
                left outer join referti_testo rt on (rt.iden_referto = ed.iden_referto)
                left outer join tipi t on (t.iden = ed.iden_motivo_non_effettuato)
                where ET.IDEN = :iden_testata and ED.iden = :iden_dettaglio</SQL>
            <BINDS>
                <BIND id="iden_testata" value="#IDEN_TESTATA#" type="N"></BIND>
                <BIND id="iden_dettaglio" value="#IDEN_DETTAGLIO#" type="N"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="Q_INTEGRAZIONI_INTEGRAZIONI">
            <SQL>select NOME_INTEGRAZIONE descr,Route_Log value,BEAN_LOG from INTEGRAzIONI_CONF_DEST where Bean_Log is not null and Route_Log is not null</SQL>
        </QUERY>
        <QUERY id="Q_INT_EST">
            <SQL>select /*+first_rows(1)*/ 'I' value, 'lblInterno' descr from dual union all select /*+first_rows(1)*/ 'E' value, 'lblEsterno' descr from dual</SQL>
        </QUERY>
        <QUERY id="Q_LEVEL_INTEGRAZIONI">
            <SQL>select /*+first_rows(1)*/ &apos;&apos; value, &apos;Tutti&apos; descr from dual  union all select /*+first_rows(1)*/ &apos;DEBUG&apos; value, &apos;DEBUG&apos; descr from dual  union all  select /*+first_rows(1)*/ &apos;INFO&apos; value, &apos;INFO&apos; descr from dual union all  select /*+first_rows(1)*/ &apos;WARNING&apos; value, &apos;WARNING&apos; descr from dual union all  select /*+first_rows(1)*/ &apos;ERROR&apos; value, &apos;ERROR&apos; descr from dual</SQL>
        </QUERY>
        <QUERY id="Q_LIST_TEST">
            <SQL>select /*+first_rows(1)*/ iden id, cognome || ' ' || nome DESCR,cognome,nome from anagrafica where cognome like 'ABAC%'</SQL>
        </QUERY>
        <QUERY id="Q_MAT_ESA">
            <SQL>SELECT a.iden VALUE,a.descrizione DESCR FROM magazzino$articoli a where iden not in (select tabella_iden_erogante
                from gruppo_associazione where tabella_nome_erogante =&apos;ARTICOLI&apos; and attivo=&apos;S&apos; AND TABELLA_IDEN_NOMENCLATORE = :iden_nomenclatore AND  TABELLA_NOME_NOMENCLATORE =&apos;NOMENCLATORE&apos; )
            </SQL>
            <BINDS>
                <BIND id="iden_nomenclatore" value="#IDEN#" type="N"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="Q_MOVIMENTI">
            <SQL>select  MV.DATA_BOLLA,MV.DATA_ORDINE,MV.DATA_SCADENZA,MV.DATA_TARATURA,MV.DATA_MOVIMENTO,A.DESCRIZIONE AS ARTICOLO,MV.IDEN_PRODUTTORE,TP.DESCRIZIONE AS PRODUTTORE,TP2.DESCRIZIONE AS CAUSALE,TP2.IDEN AS IDEN_CAU
                ,CODICE_LOTTO, NUMERO_BOLLA,TIPO_UTILIZZO,ORA_TARATURA,QUANTITA,mg.descrizione AS MAGAZZINO,MG.IDEN AS IDEN_MAGAZZINO,A.IDEN IDEN_ART,GIACENZA,NUMERO_ORDINE,G.G.SCORTA_MINIMA,MV.IDEN IDEN_MOVIMENTO,MV.NOTE  FROM
                MAGAZZINO$MOVIMENTI MV INNER JOIN MAGAZZINO$ARTICOLI A ON A.IDEN = MV.IDEN_ARTICOLO LEFT JOIN TIPI TP ON TP.IDEN = MV.IDEN_PRODUTTORE
                LEFT JOIN MAGAZZINO$GIACENZE G ON A.IDEN = G.IDEN_ARTICOLO

                LEFT JOIN TIPI TP2 ON TP2.IDEN = MV.IDEN_CAUSALE LEFT JOIN MAGAZZINO$MAGAZZINI MG ON MG.IDEN = MV.IDEN_MAGAZZINO WHERE MV.IDEN = :IDEN_MOVIMENTO</SQL>
            <BINDS>
                <BIND id="iden_movimento" value="#IDEN#" type="N"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="Q_PANNELLO_PRIMARIO">
            <SQL>SELECT /*+first_rows(1)*/ &apos;PANNELLO PRIMARIO PER L&apos;&apos;UTENTE &apos; || UPPER( USERNAME ) AS TITOLO FROM CONFIG$UTENTI WHERE IDEN = :iden_utente</SQL>
            <BINDS>
                <BIND id="iden_utente" value="#IDEN_UTENTE#" type="N"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="Q_RICHIESTE_MODIFICA_I">
            <SQL>select /*+first_rows(1)*/
                (select /*+first_rows(1)*/ per.descrizione || ' - ' || tipi.descrizione from personale per inner join tipi tipi on (per.tipo_personale = tipi.codice_decodifica and tipi.tipo = 'PERSONALE' and per.iden = :iden_per)) richiedente,
                a.id_paz_dicom,
                a.cognome,
                a.nome,
                TO_CHAR(TO_DATE(a.DATA_NASCITA,'yyyyMMdd'),'dd/MM/yyyy') data_nascita,
                a.sesso,
                comuni.descrizione comune_nascita,
                a.note,
                ed.data_esame,
                ed.ora_esame,
                ed.id_dicom,
                nom.descrizione tipo_esame,
                (select /*+first_rows(1)*/ pro.tipo_provenienza from provenienze pro inner join esami_testata et on (et.iden_provenienza = pro.iden) inner join esami_dettaglio ed on (ed.iden_testata = et.iden and ed.iden = :iden_dettaglio)) tipo_provenienza
                from anagrafica a
                left outer join comuni comuni on (comuni.iden = a.iden_comune_nascita)
                left outer join esami_dettaglio ed on (ed.iden = :iden_dettaglio)
                left outer join nomenclatore nom on (nom.iden = ed.iden_nomenclatore)
                where a.iden = :iden_anagrafica
            </SQL>
            <BINDS>
                <BIND id="iden_per" value="#IDEN_PER#" type="N"></BIND>
                <BIND id="iden_dettaglio" value="#IDEN_DETTAGLIO#" type="N"></BIND>
                <BIND id="iden_anagrafica" value="#IDEN_ANAGRAFICA#" type="N"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="Q_RICHIESTE_MODIFICA_M">
            <SQL>SELECT /*+first_rows(1)*/ per.descrizione || ' - ' || tipi.descrizione richiedente,rm.tipo_richiesta,a.id_paz_dicom,a.cognome,a.nome,a.data_nascita,A.sesso,
                comuni.descrizione comune_nascita,A.note,ed.data_esame,ed.ora_esame,ed.id_dicom,nom.descrizione tipo_esame,rm.iden_dettaglio,pro.tipo_provenienza tipo_provenienza,
                rm.xml.getClobVal() XML FROM RICHIESTE_MODIFICA rm
                left outer join anagrafica a on (a.iden = rm.iden_anagrafica) left outer join comuni comuni on (comuni.iden = a.iden_comune_nascita)
                INNER JOIN personale per ON (per.iden = rm.iden_ope_richiesta) INNER JOIN tipi tipi ON (per.tipo_personale = tipi.codice_decodifica)
                LEFT OUTER JOIN esami_dettaglio ed ON (ed.iden = rm.iden_dettaglio) LEFT OUTER JOIN esami_testata et ON (et.iden = ed.iden_testata)
                LEFT OUTER JOIN nomenclatore nom ON (nom.iden = ed.iden_nomenclatore) LEFT OUTER JOIN provenienze pro ON (et.iden_provenienza = pro.iden)
                WHERE rm.iden = :iden_richiesta </SQL>
            <BINDS>
                <BIND id="iden_richiesta" value="#IDEN_RICHIESTA#" type="N"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="Q_RM_CDC">
            <SQL>SELECT /*+first_rows(10)*/ DISTINCT cdc.iden VALUE,cdc.descrizione descr FROM centri_di_costo cdc inner join centri_di_costo_associati cdca on (cdca.iden_cdc = cdc.iden and cdca.tabella_iden = :iden_per and tabella_nome = 'PERSONALE') where cdc.attivo = 'S' order by cdc.descrizione</SQL>
            <BINDS>
                <BIND id="iden_per" value="#IDEN_PER#" type="N"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="Q_FILTRO_MASTERIZZAZIONI_CDC">
            <SQL>SELECT /*+first_rows(10)*/ DISTINCT cdc.iden VALUE,cdc.descrizione descr FROM centri_di_costo cdc inner join centri_di_costo_associati cdca on (cdca.iden_cdc = cdc.iden and cdca.tabella_iden = :iden_per and tabella_nome = 'PERSONALE') where cdc.attivo = 'S' order by cdc.descrizione</SQL>
            <BINDS>
                <BIND id="iden_per" value="#IDEN_PER#" type="N"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="Q_RM_RICHIEDENTE">
            <SQL>select /*+first_rows(1)*/ 0 VALUE, 'Tutti' DESCR from DUAL union all select /*+first_row(100)*/ IDEN VALUE, DESCRIZIONE DESCR from PERSONALE where ATTIVO = 'S'</SQL>
        </QUERY>
        <QUERY id="Q_RM_STATO">
            <SQL>select /*+first_rows(10)*/ codice_decodifica value,descrizione descr from tipi where tipo = 'STATO_RICHIESTA_MODIFICA' order by ordine</SQL>
        </QUERY>
        <QUERY id="Q_RM_TIPO">
            <SQL>select /*+first_rows(10)*/ iden value,descrizione descr from tipi where tipo = 'TIPO_RICHIESTA_MODIFICA' order by ordine</SQL>
        </QUERY>
        <QUERY id="Q_RM_TIPO_FILTERED">
            <SQL>select /*+first_rows(10)*/ iden value,descrizione descr, codice_decodifica cod_dec from tipi where tipo = 'TIPO_RICHIESTA_MODIFICA' and parametri = :tipo_richiesta order by ordine</SQL>
            <BINDS>
                <BIND id="tipo_richiesta" value="#TIPO_RICHIESTA#" type="V"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="Q_SCHEDA_APPROPRIATEZZA">
            <SQL>
                <![CDATA[
                select AE.IDEN,AE.DATI_APPROPRIATEZZA.getClobVal() DATI_APPROPRIATEZZA
                       from APPROPRIATEZZA_ESAME AE
                       where AE.IDEN_ESAME_DETTAGLIO in (select regexp_substr(x, '[^,]+', 1, level) ID
                                                        from(select :iden_dettaglio x from dual)
                                                        connect by level <= length(x) - length(replace(x, ',')) + 1) ]]>
            </SQL>
            <BINDS>
                <BIND id="iden_dettaglio" value="#IDEN_DETTAGLIO#" type="V"></BIND>
            </BINDS>
        </QUERY>

        <QUERY id="Q_SCHEDA_FATTURAZIONE">
            <SQL>select /*+first_rows(1)*/ NOME,COGNOME,DATA_NASCITA,DOM_INDIRIZZO INDIRIZZO,CODICE_FISCALE,RES_TELEFONO TELEFONO,
                C_RES.IDEN IDEN_COMUNE_RESIDENZA,C_RES.DESCRIZIONE DESCR_COMUNE_RESIDENZA,C_RES.PROVINCIA PROVINCIA_RESIDENZA,C_RES.CAP CAP_RESIDENZA,
                C_NASC.IDEN IDEN_COMUNE_NASCITA,C_RES.DESCRIZIONE DESCR_COMUNE_NASCITA,C_NASC.PROVINCIA PROVINCIA_NASCITA,C_NASC.CAP CAP_NASCITA,
                ET.QUESITO_CLINICO QUESITO,DF.DATI.getClobVal() DATI,
                extractvalue(DF.DATI,'//CAMPI/CAMPO[@COL='' EVIDENZIA_IN_CODA'']') EVIDENZIA_IN_CODA,
                extractvalue(DF.DATI,'//CAMPI/CAMPO[@COL=''ESCLUDI_DALLA_CODA'']') ESCLUDI_DALLA_CODA,
                extractvalue(DF.DATI,'//CAMPI/CAMPO[@COL=''TIPO_PAGAMENTO'']') TIPO_PAGAMENTO,
                extractvalue(DF.DATI,'//CAMPI/CAMPO[@COL=''STAMPA_ETICHETTA'']') STAMPA_ETICHETTA,
                extractvalue(DF.DATI,'//CAMPI/CAMPO[@COL=''STAMPA_RICEVUTA'']') STAMPA_RICEVUTA,
                extractvalue(DF.DATI,'//CAMPI/CAMPO[@COL=''STAMPA_ALLEGATI'']') STAMPA_ALLEGATI,
                extractvalue(DF.DATI,'//CAMPI/CAMPO[@COL=''STAMPA_FATTURA'']') STAMPA_FATTURA,
                extractvalue(DF.DATI,'//CAMPI/CAMPO[@COL=''ACCETTAZIONE_CONTABILE_NO_ESAMI'']') ACC_CONTABILE_NO_ESAMI,
                extractvalue(DF.DATI,'//CAMPI/CAMPO[@COL=''REFERTO_AL_MEDICO_BASE'']') REFERTO_AL_MEDICO_BASE,
                extractvalue(DF.DATI,'//CAMPI/CAMPO[@COL=''RISULTATI_ONLINE'']') RISULTATI_ONLINE,
                extractvalue(DF.DATI,'//CAMPI/CAMPO[@COL=''CONSENSO_ORALE'']') CONSENSO_ORALE,
                extractvalue(DF.DATI,'//CAMPI/CAMPO[@COL=''CONSENSO_WEB'']') CONSENSO_WEB,
                extractvalue(DF.DATI,'//CAMPI/CAMPO[@COL=''GRUPPO_SANGUIGNO'']') GRUPPO_SANGUIGNO,
                extractvalue(DF.DATI,'//CAMPI/CAMPO[@COL=''FATTORE_RH'']') FATTORE_RH,
                extractvalue(DF.DATI,'//CAMPI/CAMPO[@COL=''SESSO'']') SESSO,
                'TEST' CODICE   ,
                (select sum(prezzo) from nomenclatore n inner join esami_dettaglio ed on (ed.iden_nomenclatore=n.iden) where ed.iden_testata=et.iden)  TOTALE_PRESTAZIONI

                from ANAGRAFICA A
                inner join ESAMI_TESTATA ET on(ET.IDEN_ANAGRAFICA = A.IDEN)
                left outer join COMUNI C_RES on (C_RES.IDEN = A.IDEN_COMUNE_DOMICILIO)
                left outer join COMUNI C_NASC on (C_NASC.IDEN = A.IDEN_COMUNE_NASCITA)
                left outer join DATI_FATTURAZIONE DF on(DF.IDEN_TESTATA = ET.IDEN)

                WHERE ET.IDEN =  :iden_testata </SQL>
            <BINDS>
                <BIND id="iden_testata" value="#IDEN_TESTATA#" type="V"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="Q_SCHEDA_AGENDA">
            <SQL>select /*+first_rows(1)*/
                distinct agenda.iden,
                agenda.codice_decodifica,
                agenda.descrizione,
                agenda.deleted,
                agenda.attivo,
                (select min(data_inizio) from agenda_pianificazione where iden_agenda = :iden) da_data,
                (SELECT MAX(data_fine) FROM agenda_pianificazione WHERE IDEN_AGENDA = :iden) A_DATA,
                (select tipo from agenda_pianificazione WHERE IDEN_AGENDA = :iden and rownum=1) TIPO,
                '[' || (select /*+first_rows(10)*/ wm_concat(distinct chr(123) || 'iden:' || iden || ',descr:' || '''' || get_giorni_settimana(giorni_attivi) || ' dalle ' || ora_inizio || ' alle ' ||ora_fine|| ''',impostazione:' || impostazione || chr(125)) from agenda_pianificazione where iden_agenda = :iden) || ']' JSON
                from agenda agenda
                WHERE agenda.IDEN = :iden </SQL>
            <BINDS>
                <BIND id="iden" value="#IDEN#" type="N"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="Q_SCHEDA_AGENDA_FASCE_ORARIE">
            <SQL>select /*+first_rows(1)*/ * from AGENDA_FASCE_ORARIE WHERE IDEN = :iden</SQL>
            <BINDS>
                <BIND id="iden" value="#IDEN#" type="N"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="Q_SCHEDA_ANAGRAFICA">
            <SQL>select /*+first_rows(1)*/
                cod.CODICE_1,cod.CODICE_2,cod.CODICE_3,cod.CODICE_4,cod.CODICE_5,cod.CODICE_6,cod.CODICE_7,cod.CODICE_8,cod.CODICE_9,cod.CODICE_10,com_nasc.descrizione comune_nascita,
                com_nasc.codice_comune codice_comune_nascita,com_nasc.codice_regione codice_regione_nascita,com_nasc.codice_usl usl_nascita,com_res.descrizione comune_residenza,com_res.codice_comune codice_comune_residenza,
                com_res.codice_regione codice_regione_residenza,com_res.codice_usl usl_residenza,com_dom.descrizione comune_domicilio,com_dom.codice_comune codice_comune_domicilio,com_dom.codice_regione codice_regione_domicilio,
                com_dom.codice_usl usl_domicilio,prof.descrizione professione,get_descrizione_personale(anag.iden_medico_base) medico_base,naz.descrizione cittadinanza,GET_DESCRIZIONE_TIPI(anag.tessera_beneficiario) beneficiario,
                get_descrizione_tipi(anag.iden_titolo) titolo,GET_DESCRIZIONE_TIPI(anag.IDEN_STATO_CIVILE) stato_civile,iden_titolo_studio,GET_DESCRIZIONE_TIPI(anag.IDEN_TITOLO_STUDIO) titolo_studio,
                anag.*
                from anagrafica anag
                left outer join comuni com_nasc on (com_nasc.iden=anag.iden_comune_nascita)
                left outer join comuni com_res on (com_res.iden=anag.iden_comune_residenza)
                left outer join comuni com_dom on (com_dom.iden=anag.iden_comune_domicilio)
                left outer join professioni prof on (prof.iden=anag.iden_professione)
                left outer join nazioni naz on (naz.iden=anag.iden_nazione)
                left outer join anagrafica_codici_esterni cod on (cod.iden_anagrafica = anag.iden)
                where anag.iden  = :iden_anagrafica
            </SQL>
            <BINDS>
                <BIND id="iden_anagrafica" value="#IDEN_ANAG#" type="N"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="Q_SCHEDA_CDC">
            <SQL>select /*+first_rows(1)*/ * from CENTRI_DI_COSTO where IDEN = :id_cdc</SQL>
            <BINDS>
                <BIND id="id_cdc" value="#IDEN#" type="N"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="Q_SCHEDA_COMUNE">
            <SQL>select /*+first_row(1)*/ * from POLARIS_DATI.VIEW_COMUNI where IDEN = :id_comune</SQL>
            <BINDS>
                <BIND id="id_comune" value="#IDEN#" type="N"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="Q_SCHEDA_PACS_AETITLE">
            <SQL>select /*+first_row(1)*/ * from POLARIS_DATI.PACS_AETITLE where IDEN = :id_pacs</SQL>
            <BINDS>
                <BIND id="id_pacs" value="#IDEN#" type="N"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="Q_SCHEDA_DOCUMENTI_ALLEGATI">
            <SQL>select COGNOME || ' ' || NOME || ' ' || TO_CHAR(TO_DATE(DATA_NASCITA,'yyyyMMdd'),'dd/MM/yyyy') AS PAZIENTE from anagrafica a where iden = :iden_anagrafica</SQL>
            <BINDS>
                <BIND id="iden_anagrafica" value="#IDEN_ANAG#" type="N"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="Q_SCHEDA_ESAME">
            <SQL>select /*+first_rows(1)*/ * from table(GESTIONE_RIS_ESAMI.GET_SCHEDA_ESAME(:iden_testata,:request, &apos;ALL&apos;, &apos;2&apos;))</SQL>
            <BINDS>
                <BIND id="iden_testata" value="#IDEN_TESTATA#" type="N"></BIND>
                <BIND id="request" value="#REQUEST#" type="C"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="Q_SCHEDA_INDIRIZZO">
            <SQL>SELECT /*+first_rows(1)*/
                IND.*,
                CASE WHEN IDEN_COMUNE IS NOT NULL THEN DESCRIZIONE_COMUNE ELSE '' END AC_COMUNE,
                CASE WHEN IDEN_PROVINCIA IS NOT NULL THEN DESCRIZIONE_PROVINCIA ELSE '' END AC_PROVINCIA,
                CASE WHEN TIPO_INDIRIZZO IS NOT NULL THEN DESCRIZIONE_INDIRIZZO ELSE '' END AC_TIPO,
                NAZ.DESCRIZIONE NAZIONE
                FROM INDIRIZZI IND
                LEFT OUTER JOIN NAZIONI NAZ ON (NAZ.IDEN = IND.IDEN_NAZIONE)
                WHERE IND.IDEN = :iden_indirizzo </SQL>
            <BINDS>
                <BIND id="iden_indirizzo" value="#IDEN_INDIRIZZO#" type="N"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="Q_SCHEDA_MAGAZZINI">
            <SQL>select * from MAGAZZINO$MAGAZZINI M where M.IDEN = :iden_magazzino</SQL>
            <BINDS>
                <BIND id="iden_magazzino" value="#IDEN#" type="N"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="Q_SCHEDA_NOMENCLATORE">
            <SQL>select /*+first_rows(1)*/ * from NOMENCLATORE where IDEN = :id_esa</SQL>
            <BINDS>
                <BIND id="id_esa" value="#IDEN#" type="N"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="Q_SCHEDA_ONERE">
            <SQL>select /*+first_row(1)*/ * from ONERE where IDEN = :id_onere</SQL>
            <BINDS>
                <BIND id="id_onere" value="#IDEN#" type="N"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="Q_SCHEDA_PATOLOGIA">
            <SQL>select /*+first_row(1)*/ * from PATOLOGIE where IDEN = :id_patologia</SQL>
            <BINDS>
                <BIND id="id_patologia" value="#IDEN#" type="N"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="Q_SCHEDA_PERSONALE">
            <SQL>select /*+first_rows(1)*/ * from PERSONALE where IDEN = :id_per</SQL>
            <BINDS>
                <BIND id="id_per" value="#IDEN#" type="N"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="Q_SCHEDA_PROFESSIONE">
            <SQL>select /*+first_rows(1)*/ * from PROFESSIONI where IDEN = :id_professione</SQL>
            <BINDS>
                <BIND id="id_professione" value="#IDEN#" type="N"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="Q_SCHEDA_PROVENIENZA">
            <SQL>select /*+first_rows(1)*/ * from PROVENIENZE where IDEN = :id_provenienza</SQL>
            <BINDS>
                <BIND id="id_provenienza" value="#IDEN#" type="N"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="Q_SCHEDA_REFERTI_STANDARD">
            <SQL>SELECT /*+first_rows(1)*/  RST.CODICE_DECODIFICA,RST.TESTO,RST.ATTIVO,RST.DESCRIZIONE,RST.IDEN_MEDICO IDEN_MED,P.DESCRIZIONE MEDICO
                , RST.IDEN_NOMENCLATORE FROM REFERTI_STANDARD RST LEFT JOIN PERSONALE P ON P.IDEN = RST.IDEN_MEDICO WHERE RST.IDEN = :iden</SQL>
            <BINDS>
                <BIND id="iden" value="#IDEN#" type="N"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="Q_SCHEDA_SALA">
            <SQL>select * from view_sala where  IDEN = :id_sala</SQL>
            <BINDS>
                <BIND id="id_sala" value="#IDEN#" type="N"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="Q_SCHEDA_SCREENING_PRIMO_LIVELLO">
            <SQL>select /*+first_rows(1)*/ 1 FROM DUAL</SQL>
        </QUERY>
        <QUERY id="Q_SCHEDA_AREA">
            <SQL>SELECT /*+first_rows(1)*/ * FROM VIEW_AREA WHERE IDEN = :iden</SQL>
            <BINDS>
                <BIND id="iden" value="#IDEN#" type="N"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="Q_SCHEDA_SEGRETERIA">
            <SQL>select /*+first_rows(1)*/ S.*, p.descrizione DESCRIZIONE_PROVENIENZA FROM SEGRETERIA S LEFT JOIN provenienze P ON S.VISIONE_REPARTO = P.IDEN WHERE IDEN_TESTATA = :iden_testata</SQL>
            <BINDS>
                <BIND id="iden_testata" value="#IDEN_TESTATA#" type="N"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="Q_SCHEDA_STATO_ESAME">
            <SQL>select /*+first_row(1)*/ * from STATO_ESAME where IDEN = :id_statoEsa</SQL>
            <BINDS>
                <BIND id="id_statoEsa" value="#IDEN#" type="N"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="Q_SCHEDA_STATO_PAZIENTE">
            <SQL>select /*+first_row(1)*/ * from STATO_PAZIENTE where IDEN = :id_statoPaz</SQL>
            <BINDS>
                <BIND id="id_statoPaz" value="#IDEN#" type="N"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="Q_SCHEDA_TICKET">
            <SQL>select /*+first_row(1)*/ * from TICKET where IDEN = :id_ticket</SQL>
            <BINDS>
                <BIND id="id_ticket" value="#IDEN#" type="N"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="Q_SCHEDA_TIPO">
            <SQL>select /*+first_row(1)*/ * from TIPI where IDEN = :id_tipo</SQL>
            <BINDS>
                <BIND id="id_tipo" value="#IDEN#" type="N"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="Q_SCHEDA_UTENTE">
            <SQL>select /*+first_row(1)*/ * from POLARIS_DATI.VIEW_UTENTI where IDEN = :id_utente</SQL>
            <BINDS>
                <BIND id="id_utente" value="#IDEN#" type="N"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="Q_TEST_JACK">
            <SQL>select /*+first_row(1)*/ * from TIPI where ATTIVO = 'S' {and 1 = 1}</SQL>
        </QUERY>
        <QUERY id="Q_URGENZA_SI_NO">
            <SQL>select /*+first_rows(10)*/ 1 VALUE, 'lblSi' DESCR from dual union all select /*+first_row(10)*/ 0 VALUE, 'lblNo' DESCR from dual</SQL>
        </QUERY>
        <QUERY id="Q_GGP_GRUPPI">
            <SQL>select /*+first_rows(10)*/ &apos;PC_GRUPPO&apos; VALUE, &apos;lblPc&apos; DESCR from dual union all select /*+first_row(10)*/ &apos;UTENTI_GRUPPO&apos; VALUE, &apos;lblUtenti&apos; DESCR from dual</SQL>
        </QUERY>
        <QUERY id="RAD_CAUSALE">
            <SQL>select IDEN VALUE,DESCRIZIONE DESCR from TIPI WHERE TIPO = :tipo</SQL>
            <BINDS>
                <BIND id="tipo" value="MG_CAUSALE" type="V"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="RAD_TIPO_UTILIZZO">
            <SQL>select &apos;S&apos; VALUE , &apos;SCARTO&apos; DESCR FROM DUAL UNION ALL SELECT &apos;U&apos; VALUE , &apos;UTILIZZO&apos; DESCR FROM DUAL</SQL>
        </QUERY>
        <QUERY id="R_AND_OR">
            <SQL>select /*+first_row(1)*/ 'AND' VALUE, 'lblAnd' DESCR from dual union all select /*+first_row(1)*/ 'OR' VALUE, 'lblOr' DESCR from dual</SQL>
        </QUERY>
        <QUERY id="R_PC_UTENTI">
            <SQL>select /*+first_row(1)*/ &apos;PC_GRUPPO&apos; VALUE, &apos;lblPc&apos; DESCR from dual union all select /*+first_row(1)*/ &apos;UTENTI_GRUPPO&apos; VALUE, &apos;lblUtenti&apos; DESCR from dual</SQL>
        </QUERY>
        <QUERY id="R_ATTIVI_NONATTIVI_ENTRAMBI">
            <SQL>select /*+first_row(10)*/ 'S' VALUE, 'lblAttivi' DESCR from dual union all select /*+first_row(10)*/ 'N' VALUE, 'lblNonAttivi' DESCR from dual  union all select /*+first_row(10)*/ 'E' VALUE, 'lblEntrambi' DESCR from dual</SQL>
        </QUERY>
        <QUERY id="R_CANC_NONACANC_ENTRAMBI">
            <SQL>select /*+first_row(10)*/ 'S' VALUE, 'lblCancellate' DESCR from dual union all select /*+first_row(10)*/ 'N' VALUE, 'lblNonCancellate' DESCR from dual  union all select /*+first_row(10)*/ 'E' VALUE, 'lblEntrambi' DESCR from dual</SQL>
        </QUERY>
        <QUERY id="R_COD_DESCR">
            <SQL>select /*+first_row(10)*/ 'CODICE' VALUE, 'lblCodice' DESCR from dual union all select /*+first_row(10)*/ 'DESCRIZIONE' VALUE, 'lblDescrizione' DESCR from dual</SQL>
        </QUERY>
        <QUERY id="R_COD_DESCR_BARRE">
            <SQL>select /*+first_row(10)*/ 'CODICE' VALUE, 'lblCodice' DESCR from dual union all select /*+first_row(10)*/ 'DESCRIZIONE' VALUE, 'lblDescrizione' DESCR from dual union all select /*+first_row(10)*/ 'BARRE' VALUE, 'lblCodiceBarre' DESCR from dual</SQL>
        </QUERY>
        <QUERY id="R_DX_SX_NESSUNA">
            <SQL>select /*+first_row(10)*/ &apos;DX&apos; VALUE, &apos;Destra&apos; DESCR from dual union all select /*+first_row(10)*/ &apos;SX&apos; VALUE, &apos;Sinistra&apos; DESCR from dual union all select /*+first_row(10)*/ &apos;N&apos; VALUE, &apos;Nessuna&apos; DESCR from dual</SQL>
        </QUERY>
        <QUERY id="R_GEST_PROVENIENZA">
            <SQL>select /*+first_row(10)*/ &apos;S&apos; VALUE, &apos;lblSingola&apos; DESCR from dual union all select /*+first_row(10)*/ &apos;M&apos; VALUE, &apos;lblMultipla&apos; DESCR from dual union all select /*+first_row(10)*/ &apos;T&apos; VALUE, &apos;lblTipoProvenienza&apos; DESCR from dual</SQL>
        </QUERY>
        <QUERY id="R_SCELTA_ALLEGATO_PAZIENTE_EPISODIO">
            <SQL>select /*+first_rows(1)*/ &apos;P&apos; VALUE, &apos;Paziente&apos; DESCR from dual union all select /*+first_rows(1)*/ &apos;E&apos; VALUE, &apos;Episodio&apos; DESCR from dual</SQL>
        </QUERY>
        <QUERY id="R_SESSO">
            <SQL>select /*+first_rows(10)*/ 'M' VALUE, 'lblMaschio' DESCR from dual union all select /*+first_row(10)*/ 'F' VALUE, 'lblFemmina' DESCR from dual union all select /*+first_row(10)*/ 'U' VALUE, 'lblSconosciuto' DESCR from dual</SQL>
        </QUERY>
        <QUERY id="R_SI_NO">
            <SQL>select /*+first_rows(10)*/ 'S' VALUE, 'lblSi' DESCR from dual union all select /*+first_rows(10)*/ 'N' VALUE, 'lblNo' DESCR from dual</SQL>
        </QUERY>
        <QUERY id="R_POSITIVO_NEGATIVO">
            <SQL>select /*+first_rows(10)*/ 'P' VALUE, 'lblPositivo' DESCR from dual union all select /*+first_rows(10)*/ 'N' VALUE, 'lblNegativo' DESCR from dual</SQL>
        </QUERY>
        <QUERY id="COMBO_PACS">
            <SQL>SELECT IDEN VALUE , DESCRIZIONE DESCR FROM PACS_AETITLE WHERE DELETED = 'N'</SQL>
        </QUERY>
        <QUERY id="R_SI_NO_TEMP">
            <SQL>select /*+first_row(10)*/ 'S' VALUE, 'Si' DESCR from dual union all select /*+first_row(10)*/ 'N' VALUE, 'No' DESCR from dual</SQL>
        </QUERY>
        <QUERY id="R_DX_SX">
            <SQL>select /*+first_rows(10)*/ 'DX' VALUE, 'lblDestra' DESCR from dual union all select /*+first_row(10)*/ 'SX' VALUE, 'lblSinistra' DESCR from dual</SQL>
        </QUERY>
        <QUERY id="R_STATO_MATERIALE">
            <SQL>select /*+first_row(10)*/ &apos;S&apos; VALUE, &apos;Solido&apos; DESCR from dual union all select /*+first_row(10)*/ &apos;L&apos; VALUE, &apos;Liquido&apos; DESCR from dual union all select /*+first_row(10)*/ &apos;A&apos; VALUE, &apos;Altro&apos; DESCR from dual</SQL>
        </QUERY>
        <QUERY id="R_SVILUPPO_PSICOMOTORIO">
            <SQL>select /*+first_row(10)*/ &apos;R&apos; VALUE, &apos;Regolare&apos; DESCR from dual union all select /*+first_row(10)*/ &apos;A&apos; VALUE, &apos;Altro&apos; DESCR from dual</SQL>
        </QUERY>
        <QUERY id="R_TIPO_AGENDA">
            <SQL>SELECT &apos;P&apos; VALUE, &apos;lblTipoAgendaPosti&apos; DESCR FROM DUAL UNION ALL SELECT &apos;T&apos; VALUE, &apos;lblTipoAgendaTempo&apos; DESCR FROM DUAL</SQL>
        </QUERY>
        <QUERY id="R_TIPOLOGIA_CDC">
            <SQL>select /*+first_row(1)*/ &apos;0&apos; VALUE, &apos;Reparto&apos; DESCR from dual union all select /*+first_row(10)*/ &apos;1&apos; VALUE, &apos;Ambulatorio&apos; DESCR from dual union all select /*+first_row(1)*/ &apos;2&apos; VALUE, &apos;Entrambi&apos; DESCR from dual union all select /*+first_row(1)*/ &apos;4&apos; VALUE, &apos;Radiologia&apos; DESCR from dual</SQL>
        </QUERY>
        <QUERY id="R_TIPOLOGIA_PROVENIENZA">
            <SQL>Select /*+first_row(10)*/  CODICE_DECODIFICA VALUE,DESCRIZIONE DESCR from TIPI where TIPO=&apos;PROVENIENZA&apos;</SQL>
        </QUERY>
        <QUERY id="R_TIPOLOGIA_PROVENIENZA_OLD">
            <SQL>select /*+first_row(1)*/ &apos;I&apos; VALUE, &apos;lblInterno&apos; DESCR from dual union all select /*+first_row(10)*/ &apos;E&apos; VALUE, &apos;lblEsterno&apos; DESCR from dual union all select /*+first_row(1)*/ &apos;P&apos; VALUE, &apos;lblProntoSoccorso&apos; DESCR from dual union all select /*+first_row(1)*/ &apos;O&apos; VALUE, &apos;lblAltriOspedali&apos; DESCR from dual union all select /*+first_row(1)*/ &apos;L&apos; VALUE, &apos;lblLiberaProfessione&apos; DESCR from dual</SQL>
        </QUERY>
        <QUERY id="R_TIPOLOGIA_PROVENIENZA_TARMED">
            <SQL>select 'T' VALUE,'TUTTE PROVENIENZE' DESCR from dual union all Select  CODICE_DECODIFICA VALUE,DESCRIZIONE DESCR from TIPI where TIPO=&apos;PROVENIENZA&apos;</SQL>
        </QUERY>
        <QUERY id="R_TIPO_MEDICO">
            <SQL>Select /*+first_rows(10)*/ CODICE_DECODIFICA VALUE,DESCRIZIONE DESCR from TIPI where TIPO='MEDICO'</SQL>
        </QUERY>
        <QUERY id="R_TIPO_MEDICO_OLD">
            <SQL>Select 'R' VALUE, 'lblRefertante' DESCR From DUAL Union All Select 'I' VALUE, 'lblInviante' DESCR From DUAL Union All Select 'P' VALUE, 'lblProponente' DESCR From DUAL Union All Select 'A' VALUE, 'lblAnestesista' DESCR From DUAL Union All Select 'S' VALUE, 'lblSpecializzando' DESCR From DUAL</SQL>
        </QUERY>
        <QUERY id="R_TIPO_PAGAMENTO">
            <SQL>select /*+first_row(1)*/ &apos;E&apos; VALUE, &apos;lblEsente&apos; DESCR from dual union all select /*+first_row(1)*/ &apos;P&apos; VALUE, &apos;lblPrivato&apos; DESCR from dual union all select /*+first_row(1)*/ &apos;T&apos; VALUE, &apos;lblTicket&apos; DESCR from dual union all select /*+first_row(1)*/ &apos;I&apos; VALUE, &apos;lblIntramoenia&apos; DESCR from dual</SQL>
        </QUERY>
        <QUERY id="R_TIPO_PERSONALE">
            <SQL>Select /*+first_rows(1)*/  CODICE_DECODIFICA VALUE,DESCRIZIONE DESCR from TIPI where TIPO='PERSONALE'</SQL>
        </QUERY>
        <QUERY id="R_TIPO_SCELTA_ESA">
            <SQL>Select &apos;HB&apos; VALUE, &apos;lblHumanBody&apos; DESCR From DUAL Union All Select &apos;ACR&apos; VALUE, &apos;lblACR&apos; DESCR From DUAL</SQL>
        </QUERY>
        <QUERY id="R_TITOLO">
            <SQL>select /*+first_rows(10)*/ 'DOTT.' VALUE, 'lblTit_Dottore' DESCR from dual union all select /*+first_row(10)*/ 'DOTT.SSA' VALUE, 'lblTit_Dottoressa' DESCR from dual  union all select /*+first_row(10)*/ 'INF.' VALUE, 'lblTit_Infermiere' DESCR from dual union all select /*+first_row(10)*/ 'INF.RA' VALUE, 'lblTit_Infermiera' DESCR from dual union all select /*+first_row(10)*/ 'SIG.' VALUE, 'lblTit_Signore' DESCR from dual union all select /*+first_row(10)*/ 'SIG.RA' VALUE, 'lblTit_Signora' DESCR from dual union all select /*+first_row(10)*/ 'TEC.' VALUE, 'lblTit_Tecnico' DESCR from dual</SQL>
        </QUERY>
        <QUERY id="R_VALUTAZIONE">
            <SQL>SELECT /*+first_rows(1)*/ '1' VALUE, 'lbl1' DESCR FROM DUAL UNION ALL SELECT /*+first_row(1)*/ '2' VALUE, 'lbl2' DESCR FROM DUAL UNION ALL SELECT /*+first_row(1)*/ '3' VALUE, 'lbl3' DESCR FROM DUAL</SQL>
        </QUERY>
        <QUERY id="R_ESITI_SCREENING">
            <SQL>Select /*+first_rows(1)*/  CODICE_DECODIFICA VALUE,DESCRIZIONE DESCR from TIPI where TIPO='SCREENING_ESITO' ORDER BY ORDINE</SQL>
        </QUERY>
        <QUERY id="R_INDICAZIONI_SCREENING">
            <SQL>Select /*+first_rows(1)*/  CODICE_DECODIFICA VALUE,DESCRIZIONE DESCR from TIPI where TIPO='SCREENING_INDICAZIONI' ORDER BY ORDINE</SQL>
        </QUERY>
        <QUERY id="TARMED_GRUPPI_ASSOCIATI">
            <SQL>
                select tabella_iden_erogante value,tp.descrizione descr from gruppo_associazione ga inner join tipi tp on
                tp.iden = ga.tabella_iden_erogante where tabella_nome_erogante ='TARMED_GRUPPI' and tabella_nome_nomenclatore ='SALA_AREA'
                and tabella_iden_nomenclatore = :iden_sala and tp.attivo='S' and ga.attivo='S'
            </SQL>
            <BINDS>
                <BIND id="iden_sala" value="#IDEN#" type="N"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="TARMED_GRUPPI_ASSOCIABILI">
            <SQL>
                SELECT TP.iden VALUE,TP.descrizione DESCR FROM
                TIPI tp WHERE TIPO ='TARMED_GRUPPI' AND TP.ATTIVO='S' and tp.iden
                not in (
                select tabella_iden_erogante from gruppo_associazione where tabella_nome_nomenclatore ='SALA_AREA'
                AND TABELLA_NOME_EROGANTE  = 'TARMED_GRUPPI'
                AND TABELLA_IDEN_NOMENCLATORE = :iden_sala and attivo='S' )
                order by tp.descrizione
            </SQL>
            <BINDS>
                <BIND id="iden_sala" value="#IDEN#" type="N"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="CMBLATO">
            <SQL>SELECT IDEN VALUE,DESCRIZIONE DESCR FROM TIPI WHERE TIPO =:tipo ORDER BY ORDINE</SQL>
            <BINDS>
                <BIND id="tipo" value="LATERALITA" type="V"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="CMB_DETTAGLIO_TARMED">
            <SQL>SELECT ED.IDEN VALUE,N.DESCRIZIONE DESCR FROM ESAMI_DETTAGLIO ED INNER JOIN NOMENCLATORE N ON (ED.IDEN_NOMENCLATORE=N.IDEN) WHERE ED.DELETED='N' AND ED.IDEN_TESTATA=:iden_testata</SQL>

        </QUERY>
    </QUERY_GROUP>
    <QUERY_GROUP id="EOC">
        <QUERY id="GET_IDEN_ANAGRAFICA_FROM_PID">
            <SQL>select iden from anagrafica where ID_PAZ_DICOM = :pid</SQL>
            <BINDS>
                <BIND id="pid " value="#PID#" type="V"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="GET_IDEN_ANAGRAFICA_FROM_FID">
            <SQL>select IDEN_ANAGRAFICA IDEN from ADT$CONTATTI where codice=:codice and stato=1</SQL>
            <BINDS>
                <BIND id="codice " value="#codice#" type="V"></BIND>
            </BINDS>
        </QUERY>
        <QUERY id="ESAMI_PAZIENTE_IN_SK_ANAG">
            <SQL>
                select /*+first_rows(100)*/ ED.IDEN,ET.IDEN IDEN_TESTATA,ED.IDEN IDEN_DETTAGLIO,ED.IDEN_REFERTO,ED.IDEN_SALA,ET.IDEN_ANAGRAFICA,ET.IDEN_PROVENIENZA,ED.IDEN_NOMENCLATORE,ED.ID_DICOM,ANAG.ID_PAZ_DICOM,ANAG.COGNOME || ' ' || ANAG.NOME || ' ' || ANAG.DATA_NASCITA PAZIENTE,NOM.DESCRIZIONE NOMENCLATORE,ET.IDEN_CDC,cdc.descrizione cdc,et.stato stato_testata,se.descrizione STATO_DETTAGLIO,ET.URGENTE,ED.DATA_ESAME,ED.ORA_ESAME,PROV.DESCRIZIONE PROVENIENZA,ET.FLAG_CONSENSO,ED.STATO ESAME_DETTAGLIO_STATO,NOM.STATO_PER_REFERTAZIONE,T_M.DESCRIZIONE   METODICA
                from ESAMI_TESTATA ET inner join ESAMI_DETTAGLIO ED on
                (ED.IDEN_TESTATA = ET.IDEN and ET.DELETED = 'N' and ED.DELETED = 'N')
                inner join ANAGRAFICA ANAG on (ANAG.IDEN = ET.IDEN_ANAGRAFICA and ANAG.DELETED = 'N')
                inner join PROVENIENZE PROV on (PROV.IDEN = ET.IDEN_PROVENIENZA)
                inner join NOMENCLATORE NOM on (NOM.IDEN = ED.IDEN_NOMENCLATORE)
                inner join centri_di_costo cdc on (cdc.iden = et.iden_cdc)
                inner join tipi T_M on (NOM.METODICA=T_M.CODICE_DECODIFICA and T_M.TIPO='METODICA')
                inner join STATO_ESAME SE on (se.codice = ED.STATO)
                where ed.deleted='N' and et.iden_anagrafica = :iden_anagrafica
                AND (:metodica is null or METODICA = :metodica ) and (data_esame &gt;= :data_da and data_esame &lt;= :data_a)
                {#ORDER#}
            </SQL>
        </QUERY>
        <QUERY id="EOC_ESAMI_PAZIENTE">
            <SQL>
                select /*+first_rows(100)*/ ED.IDEN,ET.IDEN IDEN_TESTATA,ED.IDEN IDEN_DETTAGLIO,ED.IDEN_REFERTO,ED.IDEN_SALA,ET.IDEN_ANAGRAFICA,ET.IDEN_PROVENIENZA,ED.IDEN_NOMENCLATORE,ED.ID_DICOM,ANAG.ID_PAZ_DICOM,ANAG.COGNOME || ' ' || ANAG.NOME || ' ' || ANAG.DATA_NASCITA PAZIENTE,NOM.DESCRIZIONE NOMENCLATORE,ET.IDEN_CDC,cdc.descrizione cdc,et.stato stato_testata,se.descrizione STATO_DETTAGLIO,ET.URGENTE,ED.DATA_ESAME,ED.ORA_ESAME,PROV.DESCRIZIONE PROVENIENZA,ET.FLAG_CONSENSO,ED.STATO ESAME_DETTAGLIO_STATO,NOM.STATO_PER_REFERTAZIONE,T_M.DESCRIZIONE   METODICA,etc.PAGATO
                from ESAMI_TESTATA ET inner join ESAMI_DETTAGLIO ED on
                (ED.IDEN_TESTATA = ET.IDEN and ET.DELETED = 'N' and ED.DELETED = 'N')
                inner join ANAGRAFICA ANAG on (ANAG.IDEN = ET.IDEN_ANAGRAFICA and ANAG.DELETED = 'N')
                inner join PROVENIENZE PROV on (PROV.IDEN = ET.IDEN_PROVENIENZA)
                inner join NOMENCLATORE NOM on (NOM.IDEN = ED.IDEN_NOMENCLATORE)
                inner join centri_di_costo cdc on (cdc.iden = et.iden_cdc)
                inner join tipi T_M on (NOM.METODICA=T_M.CODICE_DECODIFICA and T_M.TIPO='METODICA')
                inner join STATO_ESAME SE on (se.codice = ED.STATO)
                inner join esami_testata_codici_esterni etc on etc.IDEN_ESAME = et.iden
                where ed.deleted='N' and et.iden_anagrafica = :iden_anagrafica
                AND (:metodica is null or METODICA = :metodica ) and (data_esame &gt;= :data_da and data_esame &lt;= :data_a)
                {#ORDER#}
            </SQL>
        </QUERY>
    </QUERY_GROUP>
    <QUERY_GROUP id="POLARIS_DATI">
        <QUERY id="CHECK_APPROPRIATEZZA">
            <SQL>select GET_APPROPRIATEZZA_VALUE(:iden_referto) ret from dual</SQL>
        </QUERY>
    </QUERY_GROUP>
</QUERIES>